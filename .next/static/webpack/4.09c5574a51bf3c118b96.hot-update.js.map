{"version":3,"file":"static/webpack/4.09c5574a51bf3c118b96.hot-update.js","sources":["webpack:///./components/dialog/Order.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { cancelOrders, approveOrders } from '../../src/gql/order'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport Button from '@material-ui/core/Button';\r\nimport dialogContentStyle from '../../src/styleMUI/dialogContent'\r\nimport { pdDDMMYYHHMM } from '../../src/lib'\r\nimport dynamic from 'next/dynamic'\r\n\r\nconst Confirmation = dynamic(\r\n    () => import('./Confirmation')\r\n)\r\n\r\nconst Order =  React.memo(\r\n    (props) =>{\r\n        const { isMobileApp } = props.app;\r\n        const { profile } = props.user;\r\n        const { showMiniDialog, setMiniDialog } = props.mini_dialogActions;\r\n        const { classes, element, setList, route, getInvoices } = props;\r\n        const width = isMobileApp? (window.innerWidth-126) : 500;\r\n        return (\r\n            <div className={classes.column} style={{width: width}}>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Заказ №:&nbsp;</div>\r\n                    <div className={classes.value}>{element.number}</div>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Статус:&nbsp;</div>\r\n                    <div className={classes.value}>{\r\n                            element.orders[0].status==='принят'&&(element.confirmationForwarder||element.confirmationClient)?\r\n                                element.confirmationClient?\r\n                                    'подтвержден клиентом'\r\n                                    :\r\n                                    element.confirmationForwarder?\r\n                                        'доставлен поставщиком'\r\n                                        :\r\n                                        element.orders[0].status\r\n                                :\r\n                                element.orders[0].status\r\n                    }</div>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Время заказа: &nbsp;</div>\r\n                    <div className={classes.value}>{pdDDMMYYHHMM(new Date(element.updatedAt))}</div>\r\n                </div>\r\n                <a href={`/client/${element.client.user._id}`} target='_blank'>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.nameField}>Получатель:&nbsp;</div>\r\n                        <div className={classes.value}>{element.client.name}</div>\r\n                    </div>\r\n                </a>\r\n                <a href={`/organization/${element.orders[0].item.organization._id}`} target='_blank'>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.nameField}>Поставщик:&nbsp;</div>\r\n                        <div className={classes.value}>{element.orders[0].item.organization.name}</div>\r\n                    </div>\r\n                </a>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Сумма:&nbsp;</div>\r\n                    <div className={classes.value}>{element.allPrice}&nbsp;сом</div>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Способ оплаты:&nbsp;</div>\r\n                    <div className={classes.value}>{element.paymentMethod}</div>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Информация:&nbsp;</div>\r\n                    <div className={classes.value}>{element.info}</div>\r\n                </div>\r\n                <br/>\r\n                <div className={classes.column}>\r\n                    <b>Товары:</b>\r\n                    <br/>\r\n                    <br/>\r\n                    {\r\n                        element.orders.map((order, idx) => (\r\n                            <div key={idx} className={classes.column}>\r\n                                <a href={`/item/${order.item._id}`} target='_blank'>\r\n                                    <div className={classes.row}>\r\n                                        <div className={classes.nameField}>Товар:&nbsp;</div>\r\n                                        <div className={classes.value}>{order.item.name}</div>\r\n                                    </div>\r\n                                </a>\r\n                                <div className={classes.row}>\r\n                                    <div className={classes.nameField}>Количество:&nbsp;</div>\r\n                                    <div className={classes.value}>{order.count}&nbsp;шт</div>\r\n                                </div>\r\n                                <div className={classes.row}>\r\n                                    <div className={classes.nameField}>Общая стоимость:&nbsp;</div>\r\n                                    <div className={classes.value}>{order.allPrice}&nbsp;сом</div>\r\n                                </div>\r\n                                <br/>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div>\r\n                    {\r\n                        (\r\n                            (profile.role==='client'&&'принят'===element.orders[0].status&&!element.confirmationClient)\r\n                            ||\r\n                            (['менеджер', 'организация'].includes(profile.role)&&'принят'===element.orders[0].status&&!element.confirmationForwarder)\r\n                            ||\r\n                            profile.role==='admin'\r\n                        )?\r\n                            <Button variant='contained' color='primary' onClick={()=>{\r\n                                const action = async() => {\r\n                                    let invoices = (await approveOrders({route: route, invoices: [element._id]})).invoices\r\n                                    if(setList)\r\n                                        setList(invoices)\r\n                                    if(getInvoices)\r\n                                        getInvoices()\r\n                                }\r\n                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            }} className={classes.button}>\r\n                                Заказ выполнен\r\n                            </Button>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        (profile.role==='client'&&element.orders[0].status==='обработка')\r\n                        ||(['менеджер', 'организация'].includes(profile.role)&&['обработка', 'принят'].includes(element.orders[0].status)&&!element.confirmationForwarder\r\n                        ||profile.role==='admin')?\r\n                            <Button variant='contained' color='primary' onClick={()=>{\r\n                                let _id = element.orders.map(order=>order._id)\r\n                                const action = async() => {\r\n                                    let invoices = (await cancelOrders({_id: _id})).invoices\r\n                                    if(setList)\r\n                                        setList(invoices)\r\n                                    if(getInvoices)\r\n                                        getInvoices()\r\n                                }\r\n                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            }} className={classes.button}>\r\n                                Отменить заказ\r\n                            </Button>\r\n                            :\r\n                            null\r\n                    }\r\n                    <Button variant='contained' color='secondary' onClick={()=>{showMiniDialog(false);}} className={classes.button}>\r\n                        Закрыть\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        mini_dialog: state.mini_dialog,\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nOrder.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Order));"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAahBA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AACA;AACA;AAEA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AACA;AACA;AAEA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAIA;;;;A","sourceRoot":""}