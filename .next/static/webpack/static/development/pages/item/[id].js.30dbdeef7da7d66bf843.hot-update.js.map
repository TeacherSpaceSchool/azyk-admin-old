{"version":3,"file":"static/webpack/static\\development\\pages\\item\\[id].js.30dbdeef7da7d66bf843.hot-update.js","sources":["webpack:///./pages/item/.js"],"sourcesContent":["import Head from 'next/head';\r\nimport React, { useState, useEffect } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport { getSubCategorys } from '../../src/gql/subcategory'\r\nimport { getEmployment } from '../../src/gql/employment'\r\nimport { getOrganizations } from '../../src/gql/organization'\r\nimport { getItem, addItem, setItem, onoffItem, deleteItem, favoriteItem } from '../../src/gql/items'\r\nimport { addBasket } from '../../src/gql/basket'\r\nimport { checkInt } from '../../src/lib'\r\nimport itemStyle from '../../src/styleMUI/item/item'\r\nimport { useRouter } from 'next/router'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport {\r\n    FacebookShareButton,\r\n    VKShareButton,\r\n    OKShareButton,\r\n    WhatsappShareButton,\r\n    TelegramShareButton,\r\n    FacebookIcon,\r\n    VKIcon,\r\n    OKIcon,\r\n    TelegramIcon,\r\n    WhatsappIcon,\r\n} from 'react-share';\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Router from 'next/router'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport Star from '@material-ui/icons/Star';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\nimport { urlMain } from '../../redux/constants/other'\r\n\r\nconst Item = React.memo((props) => {\r\n    const classes = itemStyle();\r\n    const { data } = props;\r\n    const router = useRouter()\r\n    const { isMobileApp } = props.app;\r\n    const { profile, authenticated } = props.user;\r\n    let [stock, setStock] = useState(data.item!==null?data.item.stock:'');\r\n    let [name, setName] = useState(data.item!==null?data.item.name:'');\r\n    let [info, setInfo] = useState(data.item!==null?data.item.info:'');\r\n    let [price, setPrice] = useState(data.item!==null?data.item.price:'');\r\n    let [subCategory, setSubCategory] = useState(data.item!==null?data.item.subCategory:{});\r\n    let [status, setStatus] = useState(data.item!==null?data.item.status:'');\r\n    let handleSubCategory =  (event) => {\r\n        setSubCategory({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [organization, setOrganization] = useState(data.item!==null?data.item.organization:{});\r\n    let handleOrganization =  (event) => {\r\n        setOrganization({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [hit, setHit] = useState(data.item!==null?data.item.hit:false);\r\n    let [latest, setLatest] = useState(data.item!==null?data.item.latest:false);\r\n    let [preview, setPreview] = useState(data.item!==null?data.item.image:'');\r\n    let [image, setImage] = useState(undefined);\r\n    let [employment, setEmployment] = useState({organization: ''});\r\n    let handleChangeImage = ((event) => {\r\n        setImage(event.target.files[0])\r\n        setPreview(URL.createObjectURL(event.target.files[0]))\r\n    })\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(['организация', 'менеджер', 'экспедитор'].includes(profile.role)){\r\n                let employment = (await getEmployment({_id: profile._id})).employment\r\n                setOrganization(employment.organization)\r\n                setEmployment(employment)\r\n            }\r\n        })()\r\n    },[profile])\r\n    useEffect(()=>{\r\n        if(!authenticated){\r\n            if(localStorage.favorites==undefined)\r\n                localStorage.favorites = JSON.stringify([])\r\n            else if(data.item!==null){\r\n                let favorites = JSON.parse(localStorage.favorites)\r\n                for(let i=0; i<favorites.length; i++){\r\n                    if(favorites[i]._id == data.item._id)\r\n                        setFavorite(true)\r\n                }\r\n            }\r\n            if(localStorage.basket==undefined)\r\n                localStorage.basket = JSON.stringify([])\r\n        }\r\n    },[])\r\n    //BUY\r\n    let [count, setCount] = useState(0);\r\n    let increment = ()=>{\r\n        count+=1\r\n        setCount(count)\r\n    }\r\n    let decrement = ()=>{\r\n        if(count>0)\r\n            count-=1\r\n            setCount(count)\r\n    }\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    let [favorite, setFavorite] = useState(data.item!==null&&data.item.favorite!==undefined?data.item.favorite:[]);\r\n    return (\r\n        <App filters={data.filterItem} sorts={data.sortItem} pageName={data.item!==null?router.query.id==='new'?'Добавить':data.item.name:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.item!==null?router.query.id==='new'?'Добавить':data.item.name:'Ничего не найдено'}</title>\r\n                <meta name='description' content={data.item!==null?data.item.info:'Ничего не найдено'} />\r\n                <meta property='og:title' content={data.item!==null?router.query.id==='new'?'Добавить':data.item.name:'Ничего не найдено'} />\r\n                <meta property='og:description' content={data.item!==null?data.item.info:'Ничего не найдено'} />\r\n                <meta property='og:type' content='website' />\r\n                <meta property='og:image' content={preview} />\r\n                <meta property=\"og:url\" content={`${urlMain}/item/${router.query.id}`} />\r\n                <link rel='canonical' href={`${urlMain}/item/${router.query.id}`}/>\r\n            </Head>\r\n            <Card className={classes.page}>\r\n                    <CardContent className={isMobileApp?classes.column:classes.row}>\r\n                        {\r\n                            profile.role==='admin'||router.query.id==='new'||(['менеджер', 'организация'].includes(profile.role)&&data.item.organization._id===employment.organization._id)?\r\n                                data.item!==null||router.query.id==='new'?\r\n                                    <>\r\n                                    <label htmlFor='contained-button-file'>\r\n                                        <img\r\n                                            className={isMobileApp?classes.mediaM:classes.mediaD}\r\n                                            src={preview}\r\n                                            alt={'Добавить'}\r\n                                        />\r\n                                    </label>\r\n                                    <div>\r\n                                        <h1 className={classes.name}>\r\n                                            <TextField\r\n                                                label='Имя'\r\n                                                value={name}\r\n                                                className={isMobileApp?classes.inputM:classes.inputD}\r\n                                                onChange={(event)=>{setName(event.target.value)}}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                }}\r\n                                            />\r\n                                        </h1>\r\n                                            <div className={classes.price}>\r\n                                                <TextField\r\n                                                    label='Цена'\r\n                                                    value={price}\r\n                                                    className={isMobileApp?classes.inputM:classes.inputD}\r\n                                                    onChange={(event)=>{setPrice(checkInt(event.target.value))}}\r\n                                                    inputProps={{\r\n                                                        'aria-label': 'description',\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                            <div className={classes.price}>\r\n                                                <TextField\r\n                                                    label='Скидка'\r\n                                                    value={stock}\r\n                                                    className={isMobileApp?classes.inputM:classes.inputD}\r\n                                                    onChange={(event)=>{setStock(checkInt(event.target.value))}}\r\n                                                    inputProps={{\r\n                                                        'aria-label': 'description',\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        {profile.role==='admin'?\r\n                                            <FormControl className={isMobileApp?classes.inputM:classes.inputD}>\r\n                                                <InputLabel>Организация</InputLabel>\r\n                                                <Select value={organization._id}onChange={handleOrganization}>\r\n                                                    {data.organizations.map((element)=>\r\n                                                        <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                                    )}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                            :\r\n                                            <Input\r\n                                                value={organization.name}\r\n                                                className={isMobileApp?classes.inputM:classes.inputD}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                    readOnly: true,\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                        <br/>\r\n                                        <FormControl className={isMobileApp?classes.inputM:classes.inputD}>\r\n                                            <InputLabel>Подкатегория</InputLabel>\r\n                                            <Select value={subCategory._id}onChange={handleSubCategory}>\r\n                                                {data.subCategorys.map((element)=>\r\n                                                    <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                                )}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        <br/>\r\n                                        {\r\n                                            profile.role==='admin'?\r\n                                                <>\r\n                                                <div className={classes.row}>\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Switch\r\n                                                                checked={hit}\r\n                                                                onChange={()=>{setHit(!hit)}}\r\n                                                                color=\"primary\"\r\n                                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                                            />\r\n                                                        }\r\n                                                        label='Популярное'\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Switch\r\n                                                                checked={latest}\r\n                                                                onChange={()=>{setLatest(!latest)}}\r\n                                                                color=\"primary\"\r\n                                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                                            />\r\n                                                        }\r\n                                                        label='Новинка'\r\n                                                    />\r\n                                                </div>\r\n                                                <br/>\r\n                                                </>:null\r\n                                        }\r\n                                        <TextField\r\n                                            multiline={true}\r\n                                            label='Информация'\r\n                                            value={info}\r\n                                            className={isMobileApp?classes.inputM:classes.inputD}\r\n                                            onChange={(event)=>{setInfo(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        <br/>\r\n                                        <div className={classes.row}>\r\n                                            {\r\n                                                router.query.id==='new'?\r\n                                                    <Button onClick={async()=>{\r\n                                                        if (name.length>0&&price>0&&subCategory._id!=undefined&&organization._id!=undefined) {\r\n                                                            const action = async() => {\r\n                                                                await addItem({\r\n                                                                    name: name,\r\n                                                                    stock: stock,\r\n                                                                    image: image,\r\n                                                                    info: info,\r\n                                                                    price: price,\r\n                                                                    subCategory: subCategory._id,\r\n                                                                    hit: hit,\r\n                                                                    latest: latest,\r\n                                                                    organization: organization._id,\r\n                                                                }, subCategory._id)\r\n                                                                Router.push(`/items/${subCategory._id}`)\r\n                                                            }\r\n                                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                            showMiniDialog(true)\r\n                                                        } else {\r\n                                                            showSnackBar('Заполните все поля')\r\n                                                        }\r\n                                                    }} size='small' color='primary'>\r\n                                                        Добавить\r\n                                                    </Button>\r\n                                                    :\r\n                                                    <>\r\n                                                    <Button onClick={async()=>{\r\n                                                        let editElement = {_id: data.item._id}\r\n                                                        if(stock>0&&stock!==data.item.stock)editElement.stock = stock\r\n                                                        if(name.length>0&&name!==data.item.name)editElement.name = name\r\n                                                        if(image!==undefined)editElement.image = image\r\n                                                        if(info.length>0&&info!==data.item.info)editElement.info = info\r\n                                                        if(price>0&&price!==data.item.price)editElement.price = price\r\n                                                        if(hit!==data.item.hit)editElement.hit = hit\r\n                                                        if(latest!==data.item.latest)editElement.latest = latest\r\n                                                        if(organization._id!==data.item.organization._id)editElement.organization = organization._id\r\n                                                        if(subCategory._id!==data.item.subCategory._id)editElement.subCategory = subCategory._id\r\n                                                        const action = async() => {\r\n                                                            await setItem(editElement, subCategory._id)\r\n                                                            //Router.push(`/items/${subCategory._id}`)\r\n                                                        }\r\n                                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                        showMiniDialog(true)\r\n                                                    }} size='small' color='primary'>\r\n                                                        Сохранить\r\n                                                    </Button>\r\n                                                    <Button onClick={async()=>{\r\n                                                        const action = async() => {\r\n                                                            await onoffItem([data.item._id])\r\n                                                            setStatus(status==='active'?'deactive':'active')\r\n                                                        }\r\n                                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                        showMiniDialog(true)\r\n                                                    }} size='small' color='primary'>\r\n                                                        {status==='active'?'Отключить':'Включить'}\r\n                                                    </Button>\r\n                                                    {\r\n                                                        profile.role==='admin'?\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    await deleteItem([data.item._id], subCategory._id)\r\n                                                                    Router.push(`/items/${subCategory._id}`)\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                Удалить\r\n                                                            </Button>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    </>\r\n                                            }\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    </>\r\n                                    :\r\n                                    'Ничего не найдено'\r\n\r\n                                :\r\n                                data.item===null||router.query.id==='new'?\r\n                                    'Ничего не найдено'\r\n                                    :\r\n                                    <>\r\n                                    <div className={classes.divImage}>\r\n                                        <img\r\n                                            className={isMobileApp?classes.mediaM:classes.mediaD}\r\n                                            src={data.item.image}\r\n                                            alt={data.item.info}\r\n                                        />\r\n                                        {\r\n                                            profile.role==='client'||!authenticated?\r\n                                                <Star className={classes.buttonToggle} onClick={async ()=>{\r\n                                                    let index\r\n                                                    if(profile.role==='client') {\r\n                                                        await favoriteItem([data.item._id])\r\n                                                        index = favorite.indexOf(profile._id)\r\n                                                        if (index === -1) {\r\n                                                            favorite.push(profile._id)\r\n                                                            setFavorite([...favorite])\r\n                                                        }\r\n                                                    }\r\n                                                    else if(!authenticated) {\r\n                                                        let favorites = JSON.parse(localStorage.favorites);\r\n                                                        index = -1\r\n                                                        for(let i=0; i<favorites.length; i++){\r\n                                                            if(favorites[i]._id == data.item._id)\r\n                                                                index = i\r\n                                                        }\r\n                                                        if(index===-1){\r\n                                                            favorites.push(data.item)\r\n                                                            setFavorite(true)\r\n                                                            localStorage.favorites = JSON.stringify(favorites)\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    if (index !== -1) {\r\n                                                        const action = async() => {\r\n                                                            if(profile.role==='client') {\r\n                                                                favorite.splice(index, 1)\r\n                                                                setFavorite([...favorite])\r\n                                                            }\r\n                                                            else if(!authenticated) {\r\n                                                                let favorites = JSON.parse(localStorage.favorites);\r\n                                                                favorites.splice(index, 1)\r\n                                                                setFavorite(false)\r\n                                                                localStorage.favorites = JSON.stringify(favorites)\r\n                                                            }\r\n                                                        }\r\n                                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                        showMiniDialog(true)\r\n                                                    }\r\n                                                }} style={{color: (!authenticated&&favorite===true)||(profile.role=='client'&&favorite.includes(profile._id))?'#ffb300':'#e1e1e1'}}  />\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </div>\r\n                                    <div>\r\n                                        <br/>\r\n                                        <h1 className={classes.name}>\r\n                                            {data.item.name}\r\n                                        </h1>\r\n                                        <div className={classes.share}>\r\n                                            {data.item.organization.name}\r\n                                        </div>\r\n                                        <div className={classes.row}>\r\n                                            {\r\n                                                data.item.stock===0||data.item.stock===undefined?\r\n                                                    <div className={classes.price}>\r\n                                                        {data.item.price}&nbsp;сом\r\n                                                    </div>\r\n                                                    :\r\n                                                    <>\r\n                                                    <div className={classes.stockPrice}>\r\n                                                        {data.item.stock}&nbsp;сом\r\n                                                    </div>\r\n                                                    <div className={classes.crossedPrice}>\r\n                                                        {data.item.price}&nbsp;сом\r\n                                                    </div>\r\n                                                    </>\r\n                                            }\r\n                                        </div>\r\n                                        <br/>\r\n                                        {\r\n                                            profile.role==='client'||!authenticated?\r\n                                                <>\r\n                                                <div className={isMobileApp?classes.column:classes.rowCenter}>\r\n                                                    <div className={classes.counter} style={isMobileApp?{marginBottom: 20}:{marginRight: 20}}>\r\n                                                        <div className={classes.counterbtn} onClick={decrement}>–</div>\r\n                                                        <input type='text' className={classes.counternmbr} value={count} onChange={(event)=>{\r\n                                                            setCount(isNaN(event.target.value)||event.target.value.length===0?0:parseInt(event.target.value))\r\n                                                        }}/>\r\n                                                        <div className={classes.counterbtn} onClick={increment}>+</div>\r\n                                                    </div>\r\n                                                    <Button\r\n                                                        variant='contained'\r\n                                                        color='primary'\r\n                                                        className={classes.button}\r\n                                                        onClick={()=>{\r\n                                                            if(profile.role==='client')\r\n                                                                addBasket({item: data.item._id, count: count>0?count:1})\r\n                                                            else if(!authenticated) {\r\n                                                                let basket = JSON.parse(localStorage.basket);\r\n                                                                let index = -1\r\n                                                                for(let i=0; i<basket.length; i++){\r\n                                                                    if(basket[i].item._id == data.item._id)\r\n                                                                        index = i\r\n                                                                }\r\n                                                                if(index===-1)\r\n                                                                    basket.push({item: data.item, count: count})\r\n                                                                localStorage.basket = JSON.stringify(basket)\r\n                                                            }\r\n                                                            showSnackBar('Товар добавлен в корзину')\r\n                                                        }}\r\n                                                    >\r\n                                                        В КОРЗИНУ\r\n                                                    </Button>\r\n                                                </div>\r\n                                                <br/>\r\n                                                <br/>\r\n                                                <div className={classes.share}>\r\n                                                    Поделиться:\r\n                                                </div>\r\n                                                <div className={classes.rowCenter}>\r\n                                                    <FacebookShareButton\r\n                                                        url={process.browser?window.location.href.toString():''}\r\n                                                    >\r\n                                                        <FacebookIcon\r\n                                                            size={32}\r\n                                                            round />\r\n                                                    </FacebookShareButton>\r\n                                                    &nbsp;\r\n                                                    &nbsp;\r\n                                                    <VKShareButton url={process.browser?window.location.href:''}>\r\n                                                        <VKIcon\r\n                                                            size={32}\r\n                                                            round />\r\n                                                    </VKShareButton>\r\n                                                    &nbsp;\r\n                                                    &nbsp;\r\n                                                    <OKShareButton url={process.browser?window.location.href:''}>\r\n                                                        <OKIcon\r\n                                                            size={32}\r\n                                                            round />\r\n                                                    </OKShareButton>\r\n                                                    &nbsp;\r\n                                                    &nbsp;\r\n                                                    <WhatsappShareButton url={process.browser?window.location.href:''}>\r\n                                                        <WhatsappIcon\r\n                                                            size={32}\r\n                                                            round />\r\n                                                    </WhatsappShareButton>\r\n                                                    &nbsp;\r\n                                                    &nbsp;\r\n                                                    <TelegramShareButton url={process.browser?window.location.href:''}>\r\n                                                        <TelegramIcon\r\n                                                            size={32}\r\n                                                            round />\r\n                                                    </TelegramShareButton>\r\n                                                </div>\r\n                                                </>\r\n                                                :\r\n                                                null\r\n\r\n                                        }\r\n                                    </div>\r\n                                    </>\r\n                        }\r\n\r\n\r\n\r\n\r\n                    </CardContent>\r\n            </Card>\r\n            <input\r\n                accept='image/*'\r\n                style={{ display: 'none' }}\r\n                id='contained-button-file'\r\n                type='file'\r\n                onChange={handleChangeImage}\r\n            />\r\n        </App>\r\n    )\r\n})\r\n\r\nItem.getInitialProps = async function(ctx) {\r\n    return {\r\n        data: {\r\n            ...ctx.query.id!=='new'?await getItem({_id: ctx.query.id}):{\r\n                    item:{\r\n                        image: '/static/add.png',\r\n                        stock: 0,\r\n                        name: '',\r\n                        info: '',\r\n                        price: 0,\r\n                        subCategory: {_id: ''},\r\n                        organization: {_id: ''},\r\n                        hit: false,\r\n                        latest: false\r\n                    }\r\n                },\r\n            ...await getOrganizations({search: '', sort: 'name', filter: ''}),\r\n            ...await getSubCategorys({category: 'all', search: '', sort: 'name', filter: ''})\r\n        }\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        app: state.app,\r\n        user: state.user,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);"],"mappings":"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","sourceRoot":""}