{"version":3,"file":"static/webpack/static\\development\\pages\\items\\[id].js.37a5cbe8c855341f0009.hot-update.js","sources":["webpack:///./components/items/CardItem.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport cardItemStyle from '../../src/styleMUI/item/cardItem'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport AddShoppingCart from '@material-ui/icons/AddShoppingCart';\r\nimport Star from '@material-ui/icons/Star';\r\nimport Link from 'next/link';\r\nimport { onoffItem, deleteItem, favoriteItem } from '../../src/gql/items'\r\nimport { addBasket } from '../../src/gql/basket'\r\nimport Button from '@material-ui/core/Button';\r\nimport Confirmation from '../dialog/Confirmation'\r\nimport { getCountBasket } from '../../src/gql/basket'\r\n\r\nconst CardItem = React.memo((props) => {\r\n    const classes = cardItemStyle();\r\n    const { element, setList, subCategory, getList, setFavorites } = props;\r\n    const { profile, authenticated } = props.user;\r\n    let [status, setStatus] = useState(element!==undefined?element.status:'');\r\n    let [favorite, setFavorite] = useState(element!==undefined&&element.favorite!==undefined?element.favorite:[]);\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    let [basket, setBasket] = useState(false);\r\n    useEffect(()=>{\r\n        if(!authenticated){\r\n            if(localStorage.favorites==undefined)\r\n                localStorage.favorites = JSON.stringify([])\r\n            else {\r\n                let favorites = JSON.parse(localStorage.favorites)\r\n                for(let i=0; i<favorites.length; i++){\r\n                    if(favorites[i]._id == element._id)\r\n                        setFavorite(true)\r\n                }\r\n            }\r\n            if(localStorage.basket==undefined)\r\n                localStorage.basket = JSON.stringify([])\r\n            else {\r\n                let basket = JSON.parse(localStorage.basket)\r\n                for(let i=0; i<basket.length; i++){\r\n                    if(basket[i].item._id == element._id)\r\n                        setBasket(true)\r\n                }\r\n            }\r\n\r\n        } else {\r\n            setBasket((element.basket).includes(profile._id))\r\n        }\r\n    },[])\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent className={classes.column}>\r\n                <div className={classes.chipList}>\r\n                    {\r\n                        element.latest?\r\n                            <div className={classes.chip} style={{color: 'white',background: 'green'}}>\r\n                                Новинка\r\n                            </div>\r\n                            :null\r\n                    }\r\n                                    {\r\n                                        element.hit?\r\n                                            <div className={classes.chip} style={{color: 'black',background: 'yellow'}}>\r\n                                                Хит\r\n                                            </div>\r\n                                            :null\r\n                                    }\r\n                                        </div>\r\n                                        <Link href='/item/[id]' as={`/item/${element!==undefined?element._id:'new'}`}>\r\n                                            <img\r\n                                                className={classes.media}\r\n                                                src={element.image}\r\n                                                alt={element.info}\r\n                                            />\r\n                                        </Link>\r\n                                        <Link href='/item/[id]' as={`/item/${element!==undefined?element._id:'new'}`}>\r\n                                            <div className={classes.name}>\r\n                                                {element.name}\r\n                                            </div>\r\n                                        </Link>\r\n                                        <Link href='/item/[id]' as={`/item/${element!==undefined?element._id:'new'}`}>\r\n                                            <div className={classes.row}>\r\n                                            {\r\n                                                element.stock===0||element.stock===undefined?\r\n                                                    <div className={classes.price}>\r\n                                                        {`${element.price} сом`}\r\n                                                    </div>\r\n                                                    :\r\n                                                    <>\r\n                                                    <div className={classes.crossedPrice}>\r\n                                                        {`${element.price}`}\r\n                                                    </div>\r\n                                                    <div className={classes.stockPrice}>\r\n                                                        {`${element.stock} сом`}\r\n                                                    </div>\r\n                                                    </>\r\n                                            }\r\n                                            </div>\r\n                                        </Link>\r\n                                        {['admin','организация','менеджер'].includes(profile.role)?\r\n                                            <>\r\n                                            <Button onClick={async()=>{\r\n                                                const action = async() => {\r\n                                                    await onoffItem([element._id])\r\n                                                    setStatus(status==='active'?'deactive':'active')\r\n                                                }\r\n                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                showMiniDialog(true)\r\n                                            }} size='small' color='primary'>\r\n                                                {status==='active'?'Отключить':'Включить'}\r\n                                            </Button>\r\n                                            {\r\n                                                'admin'===profile.role?\r\n                                                    <Button onClick={async()=>{\r\n                                                        const action = async() => {\r\n                                                            const list = (await deleteItem([element._id], subCategory)).items\r\n                                                            setList(list)\r\n                                                        }\r\n                                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                        showMiniDialog(true)\r\n                                                    }} size='small' color='primary'>\r\n                                                        Удалить\r\n                                                    </Button>:null\r\n                                            }\r\n                                            </>\r\n                                            :\r\n                                            profile.role==='client'||!authenticated?\r\n                                                <AddShoppingCart style={{color: basket?'#ffb300':'#e1e1e1'}}  className={classes.button} onClick={()=>{\r\n                                                    if(profile.role==='client')\r\n                                                        addBasket({item: element._id, count: 1})\r\n                                                    else if(!authenticated) {\r\n                                                        let basket = JSON.parse(localStorage.basket);\r\n                                                        let index = -1\r\n                                                        for(let i=0; i<basket.length; i++){\r\n                                                            if(basket[i].item._id == element._id)\r\n                                                                index = i\r\n                                                        }\r\n                                                        if(index===-1)\r\n                                                            basket.push({item: element, count: 1})\r\n                                                        localStorage.basket = JSON.stringify(basket)\r\n                                                    }\r\n                                                    showSnackBar('Товар добавлен в корзину')\r\n                                                    setBasket(true)\r\n                                                    getCountBasket()\r\n                                                }}/>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                        {profile.role==='client'||!authenticated?\r\n                                            <Star className={classes.buttonToggle} onClick={async ()=>{\r\n                                                let index\r\n                                                if(profile.role==='client') {\r\n                                                    await favoriteItem([element._id])\r\n                                                    index = favorite.indexOf(profile._id)\r\n                                                    if (index === -1) {\r\n                                                        favorite.push(profile._id)\r\n                                                        setFavorite([...favorite])\r\n                                                        if (getList !== undefined)\r\n                                                            getList()\r\n                                                    }\r\n                                                }\r\n                                                else if(!authenticated) {\r\n                                                    let favorites = JSON.parse(localStorage.favorites);\r\n                                                    index = -1\r\n                                                    for(let i=0; i<favorites.length; i++){\r\n                                                        if(favorites[i]._id == element._id)\r\n                                                            index = i\r\n                                                    }\r\n                                                    if(index===-1) {\r\n                                                        favorites.push(element)\r\n                                                        setFavorite(true)\r\n                                                        localStorage.favorites = JSON.stringify(favorites)\r\n                                                        if (setFavorites)\r\n                                                            setFavorites(favorites)\r\n                                                    }\r\n                                                }\r\n                                                if (index !== -1) {\r\n                                                    const action = async() => {\r\n                                                        if(profile.role==='client') {\r\n                                                            favorite.splice(index, 1)\r\n                                                            setFavorite([...favorite])\r\n                                                            if (getList !== undefined)\r\n                                                                getList()\r\n                                                        }\r\n                                                        else if(!authenticated) {\r\n                                                            let favorites = JSON.parse(localStorage.favorites);\r\n                                                            favorites.splice(index, 1)\r\n                                                            setFavorite(false)\r\n                                                            localStorage.favorites = JSON.stringify(favorites)\r\n                                                            if(setFavorites)\r\n                                                                setFavorites(favorites)\r\n                                                        }\r\n                                                    }\r\n                                                    setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                    showMiniDialog(true)\r\n                                                }\r\n                                            }} style={{color: (!authenticated&&favorite===true)||(profile.role=='client'&&favorite.includes(profile._id))?'#ffb300':'#e1e1e1'}}  />\r\n                                            :\r\n                                            null\r\n                                        }\r\n                                    </CardContent>\r\n        </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardItem)"],"mappings":"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","sourceRoot":""}