{"version":3,"file":"static/webpack/static\\development\\pages\\subcategory\\[id].js.d6b13d006b67e8083a38.hot-update.js","sources":["webpack:///./components/subcategory/SubCardCategory.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport cardCategoryStyle from '../../src/styleMUI/subcategory/cardSubcategory'\r\nimport { connect } from 'react-redux'\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { onoffSubCategory, addSubCategory, setSubCategory} from '../../src/gql/subcategory'\r\nimport Link from 'next/link';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Confirmation from '../dialog/Confirmation'\r\n\r\nconst CardCategory = React.memo((props) => {\r\n    const classes = cardCategoryStyle();\r\n    const { element, setList, category, categorys } = props;\r\n    const { profile } = props.user;\r\n    const { isMobileApp } = props.app;\r\n    //addCard\r\n    let [name, setName] = useState(element?element.name:'');\r\n    let handleName =  (event) => {\r\n        setName(event.target.value)\r\n    };\r\n    let [selectCategory, setSelectCategory] = useState(element?element.category:{});\r\n    let handleSelectCategory =  (event) => {\r\n        setSelectCategory({_id: event.target.value, name: event.target.name})\r\n    };\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    console.log(element)\r\n    return (\r\n        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n            {\r\n                profile.role === 'admin' && (!element||element._id!=='all')?\r\n                    <>\r\n                    <CardActionArea>\r\n                        <CardContent>\r\n                            <TextField\r\n                                label='Имя'\r\n                                value={name}\r\n                                className={isMobileApp?classes.inputM:classes.inputD}\r\n                                onChange={handleName}\r\n                                inputProps={{\r\n                                    'aria-label': 'description',\r\n                                }}\r\n                            />\r\n                            <br/>\r\n                            <br/>\r\n                            <FormControl className={isMobileApp?classes.inputM:classes.inputD}>\r\n                                <InputLabel>Категория</InputLabel>\r\n                                <Select\r\n                                    value={selectCategory._id}\r\n                                    onChange={handleSelectCategory}\r\n                                >\r\n                                    {categorys?categorys.map((element)=>\r\n                                        <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                    ):null}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        {\r\n                            element!==undefined?\r\n                                <>\r\n                        <Button onClick={async()=>{\r\n                            let editElement = {_id: element._id}\r\n                            if(name.length>0&&name!==element.name)editElement.name = name\r\n                            if(selectCategory._id!==undefined&&selectCategory._id!==element.category._id)editElement.category = selectCategory._id\r\n                            const action = async() => {\r\n                                setList((await setSubCategory(editElement, category)).subCategorys)\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            showMiniDialog(true)\r\n                        }} size='small' color='primary'>\r\n                            Сохранить\r\n                        </Button>\r\n                        <Button onClick={async()=>{\r\n                            const action = async() => {\r\n                                setList((await onoffSubCategory([element._id], category)).subCategorys)\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            showMiniDialog(true)\r\n                        }} size='small' color='primary'>\r\n                            {element.status==='active'?'Отключить':'Включить'}\r\n                        </Button>\r\n                        <Link href='/items/[id]' as={`/items/${element._id}`}>\r\n                            <Button size='small' color='primary'>\r\n                                Перейти\r\n                            </Button>\r\n                        </Link>\r\n                                </>:\r\n                                <Button onClick={async()=> {\r\n                                    if (name.length > 0) {\r\n                                        setName('')\r\n                                        const action = async() => {\r\n                                            let subCategorys = (await addSubCategory({name: name}, selectCategory._id)).subCategorys\r\n                                            setList(subCategorys)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    } else {\r\n                                        showSnackBar('Заполните все поля')\r\n                                    }\r\n                                }} size='small' color='primary'>\r\n                                    Добавить\r\n                                </Button>}\r\n                    </CardActions>\r\n                    </>\r\n                    :\r\n                    element!==undefined?\r\n                        <CardActionArea>\r\n                            <Link href='/items/[id]' as={`/items/${element._id}`}>\r\n                                <div className={classes.line}>\r\n                                    <h3 className={isMobileApp?classes.inputM:classes.inputD}>\r\n                                        {element.name}\r\n                                    </h3>\r\n                                </div>\r\n                            </Link>\r\n                        </CardActionArea>\r\n                        :null\r\n            }\r\n            </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCategory)"],"mappings":"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","sourceRoot":""}