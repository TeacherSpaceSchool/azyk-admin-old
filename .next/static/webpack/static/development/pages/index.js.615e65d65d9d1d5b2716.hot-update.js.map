{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.615e65d65d9d1d5b2716.hot-update.js","sources":["webpack:///./components/category/CardCategory.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport cardCategoryStyle from '../../src/styleMUI/category/cardCategory'\r\nimport { connect } from 'react-redux'\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { onoffCategory, addCategory, setCategory, deleteCategory } from '../../src/gql/category'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from 'next/link';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport Confirmation from '../dialog/Confirmation'\r\n\r\n\r\nconst CardCategory = React.memo((props) => {\r\n    const classes = cardCategoryStyle();\r\n    const { element, setList } = props;\r\n    const { profile } = props.user;\r\n    const { isMobileApp } = props.app;\r\n    //addCard\r\n    let [preview, setPreview] = useState(element?element.image:'/static/add.png');\r\n    let [image, setImage] = useState(undefined);\r\n    let handleChangeImage = ((event) => {\r\n        if(event.target.files[0].size/1024/1024<20){\r\n            setImage(event.target.files[0])\r\n            setPreview(URL.createObjectURL(event.target.files[0]))\r\n        } else {\r\n            showSnackBar('Файл слишком большой')\r\n        }\r\n    })\r\n    let [name, setName] = useState(element?element.name:'');\r\n    let handleName =  (event) => {\r\n        setName(event.target.value)\r\n    };\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    return (\r\n        <div>\r\n            {\r\n                name!=='Не задано'&&setList!=='all'&&profile.role === 'admin' ?\r\n                    <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n                        <CardActionArea>\r\n                        <CardContent>\r\n                            <div className={classes.line}>\r\n                                <label htmlFor={element?element._id:'add'}>\r\n                                    <img\r\n                                        className={classes.media}\r\n                                        src={preview}\r\n                                        alt={'Изменить'}\r\n                                    />\r\n                                </label>\r\n                               <TextField\r\n                                   label='Имя'\r\n                                   value={name}\r\n                                   className={isMobileApp?classes.inputM:classes.inputD}\r\n                                   onChange={handleName}\r\n                                   inputProps={{\r\n                                       'aria-label': 'description',\r\n                                   }}\r\n                               />\r\n                            </div>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                        <CardActions>\r\n                            {\r\n                                element!==undefined?\r\n                                <>\r\n                                <Button onClick={async()=>{\r\n                                        let editElement = {_id: element._id}\r\n                                        if(name.length>0&&name!==element.name)editElement.name = name\r\n                                        if(image!==undefined)editElement.image = image\r\n                                        const action = async() => {\r\n                                            setList((await setCategory(editElement)).categorys)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                        Сохранить\r\n                                    </Button>\r\n                                    <Button onClick={async()=>{\r\n                                        const action = async() => {\r\n                                            setList((await onoffCategory([element._id])).categorys)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                        {element.status==='active'?'Отключить':'Включить'}\r\n                                    </Button>\r\n                                    <Button size='small' color='primary' onClick={()=>{\r\n                                        const action = async() => {\r\n                                            setList((await deleteCategory([element._id])).categorys)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }}>\r\n                                        Удалить\r\n                                    </Button>\r\n                            <Link href='/subcategory/[id]' as={`/subcategory/${element._id}`}>\r\n                                <Button size='small' color='primary'>\r\n                                    Перейти\r\n                                </Button>\r\n                            </Link>\r\n                        </>:\r\n                        <Button onClick={async()=> {\r\n                            if (image !== undefined && name.length > 0) {\r\n                                setImage(undefined)\r\n                                setPreview('/static/add.png')\r\n                                setName('')\r\n                                const action = async() => {\r\n                                    setList((await addCategory({image: image, name: name})).categorys)\r\n                                }\r\n                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                showMiniDialog(true)\r\n                            } else\r\n                                showSnackBar('Заполните все поля')\r\n\r\n                        }\r\n                        } size='small' color='primary'>\r\n                            Добавить\r\n                        </Button>}\r\n                        </CardActions>\r\n                        <input\r\n                            accept='image/*'\r\n                            style={{ display: 'none' }}\r\n                            id={element?element._id:'add'}\r\n                            type='file'\r\n                            onChange={handleChangeImage}\r\n                        />\r\n                    </Card>\r\n\r\n                    :\r\n                    name!=='Не задано'?\r\n                        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n                            <CardActionArea>\r\n                            <CardContent>\r\n                                <Link href='/subcategory/[id]' as={`/subcategory/${element._id}`}>\r\n                                    <div className={classes.line}>\r\n                                        <label htmlFor='contained-button-file'>\r\n                                            <img\r\n                                                className={classes.media}\r\n                                                src={element.image}\r\n                                                alt={element.name}\r\n                                            />\r\n                                        </label>\r\n                                        <h3 className={isMobileApp?classes.inputM:classes.inputD}>\r\n                                            {element.name}\r\n                                        </h3>\r\n                                    </div>\r\n                                </Link>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                        </Card>\r\n                        :\r\n                        name==='Не задано'&&profile.role === 'admin'?\r\n                            <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n                                <CardActionArea>\r\n                                <CardContent>\r\n                                    <Link href='/subcategory/[id]' as={`/subcategory/${element._id}`}>\r\n                                        <div className={classes.line}>\r\n                                            <label htmlFor='contained-button-file'>\r\n                                                <img\r\n                                                    className={classes.media}\r\n                                                    src={'/static/add.png'}\r\n                                                    alt={element.name}\r\n                                                />\r\n                                            </label>\r\n                                            <h3 className={isMobileApp?classes.inputM:classes.inputD}>\r\n                                                {element.name}\r\n                                            </h3>\r\n                                        </div>\r\n                                    </Link>\r\n                                </CardContent>\r\n                            </CardActionArea>\r\n                            </Card>\r\n                            :null\r\n            }\r\n            </div>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCategory)"],"mappings":"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","sourceRoot":""}