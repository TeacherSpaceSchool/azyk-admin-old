{"version":3,"file":"static/webpack/static\\development\\pages\\routes.js.73271ffe869d69b70c4e.hot-update.js","sources":["webpack:///./components/route/CardRoute.js"],"sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport cardRouteStyle from '../../src/styleMUI/route/cardRoute'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport { deleteRoute } from '../../src/gql/route'\r\nimport Link from 'next/link';\r\nimport { pdDDMMYY } from '../../src/lib'\r\nimport Confirmation from '../dialog/Confirmation'\r\n\r\nconst CardOrder = React.memo((props) => {\r\n    const classes = cardRouteStyle();\r\n    const { element, setList } = props;\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const statusColor = {\r\n        'создан': 'orange',\r\n        'выполняется': 'blue',\r\n        'выполнен': 'green',\r\n    }\r\n    return (\r\n        <Card className={classes.card}>\r\n            <Link href='/route/[id]' as={`/route/${element!==undefined?element._id:'new'}`}>\r\n                <CardActionArea>\r\n                    <CardContent className={classes.column}>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Номер:&nbsp;</div>\r\n                            <div className={classes.value}>{element.number}</div>\r\n                            <div className={classes.status} style={{background: statusColor[element.status]}}>{element.status}</div>\r\n                        </div>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Дата:&nbsp;</div>\r\n                            <div className={classes.value}>{pdDDMMYY(new Date(element.dateStart))}</div>\r\n                        </div>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Компания:&nbsp;</div>\r\n                            <div className={classes.value}>{element.employment.organization.name}</div>\r\n                        </div>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Экспедитор:&nbsp;</div>\r\n                            <div className={classes.value}>{element.employment.name}</div>\r\n                        </div>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Заказы:&nbsp;</div>\r\n                            <div className={classes.column}>\r\n                                {element.invoices.map((invoice, idx)=> <div key={idx} className={classes.value}>{invoice.number}</div>)}\r\n                            </div>\r\n                        </div>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Link>\r\n            <CardActions>\r\n                {\r\n                    status==='создан'?\r\n                        <Button onClick={async()=>{\r\n                            const action = async() => {\r\n                                setList((await deleteRoute([element._id])).routes)\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            showMiniDialog(true)\r\n                        }} size='small' color='primary'>\r\n                            Удалить\r\n                        </Button>\r\n                        :\r\n                        null\r\n                }\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrder)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AANA;AAeA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;A","sourceRoot":""}