{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.401c1a71357cfdc5512b.hot-update.js","sources":["webpack:///./layouts/App.js","webpack:///./redux/actions/user.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getAds } from '../src/gql/ads'\nimport AppBar from '../components/app/AppBar'\nimport Dialog from '../components/app/Dialog'\nimport SnackBar from '../components/app/SnackBar'\nimport Drawer from '../components/app/Drawer'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { addFavoriteItem } from '../src/gql/items'\nimport { addBasket } from '../src/gql/basket'\nimport * as userActions from '../redux/actions/user'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport '../scss/app.scss'\n\nexport const mainWindow = React.createRef();\n\nconst App = React.memo(props => {\n    const { setProfile } = props.userActions;\n    const { profile, authenticated } = props.user;\n    let { sorts, filters, getList, pageName } = props;\n    let [ads, setAds] = useState({});\n    useEffect( ()=>{\n        if(authenticated&&!profile.role)\n            setProfile()\n    },[authenticated,])\n    useEffect( ()=>{\n        (async ()=>{\n            if(authenticated){\n                if(localStorage.favorites&&localStorage.favorites!=='[]') {\n                    let favorites = JSON.parse(localStorage.favorites)\n                    favorites = favorites.map(element => element._id)\n                    await addFavoriteItem(favorites)\n                    localStorage.favorites = JSON.stringify([])\n                    if (getList !== undefined)\n                        await getList()\n                }\n                if(localStorage.basket&&localStorage.basket!=='[]') {\n                    let basket = JSON.parse(localStorage.basket)\n                    for(let i=0; i<basket.length; i++){\n                        await addBasket({item: basket[i].item._id, count: basket[i].count})\n                    }\n                    localStorage.basket = '[]'\n                    if (getList !== undefined)\n                        await getList()\n                }\n            }\n            setAds((await getAds()).ads)\n        })()\n    },[])\n    const { load } = props.app;\n    /*const { data: { data }, loading } = useSubscription(\n        BASKET_SUBSCRIPTION\n    );\n    console.log(data, loading)*/\n    return(\n        <div ref={mainWindow} className='App'>\n                <AppBar pageName={pageName} sorts={sorts} filters={filters}/>\n                <Drawer />\n                <div className='App-body'>\n                    {\n                        ads&&ads.url?\n                            <a href={ads.url}>\n                                <img\n                                    src={ads.image}\n                                    alt={ads.title}\n                                    className='marketImg'\n                                />\n                            </a>\n                            :\n                            null\n                    }\n                    {props.children}\n                </div>\n                <Dialog />\n                <SnackBar/>\n            {load?\n                <div className='load'>\n                    <CircularProgress/>\n                </div>\n                :\n                null\n            }\n        </div>\n    )\n});\n\nfunction mapStateToProps (state) {\n    return {\n        user: state.user,\n        app: state.app,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        userActions: bindActionCreators(userActions, dispatch),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    AUTHENTICATED,\r\n    UNAUTHENTICATED,\r\n    SET_PROFILE,\r\n    SET_AUTH,\r\n    ERROR_AUTHENTICATED\r\n} from '../constants/user'\r\nimport {\r\n    SHOW_MINI_DIALOG\r\n} from '../constants/mini_dialog'\r\nimport Cookies from 'js-cookie';\r\nimport { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../../src/singleton/client';\r\nimport Router from 'next/router'\r\nimport { SingletonStore } from '../../src/singleton/store';\r\n\r\nexport function signup(payload) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient()\r\n            let result = await client.mutate({\r\n                variables: payload,\r\n                mutation : gql`\r\n                    mutation ($phone: String!, $password: String!) {\r\n                        signupuser(phone: $phone, password: $password) {\r\n                            data,\r\n                        }\r\n                    }`})\r\n            if(result.data.signupuser.data==='Проверьте данные')\r\n                await dispatch({\r\n                    type: ERROR_AUTHENTICATED,\r\n                    payload: true\r\n                })\r\n            else {\r\n                await Router.push('/')\r\n                await dispatch({\r\n                    type: SHOW_MINI_DIALOG,\r\n                    payload: false\r\n                })\r\n                await dispatch({type: AUTHENTICATED});\r\n                window.location.reload()\r\n            }\r\n        } catch(error) {\r\n            dispatch({\r\n                type: ERROR_AUTHENTICATED,\r\n                payload: true\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function signin(payload) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient();\r\n            let result = await client.mutate({\r\n                variables: payload,\r\n                mutation : gql`\r\n                    mutation ($phone: String!, $password: String!) {\r\n                        signinuser(phone: $phone, password: $password) {\r\n                            data,\r\n                        }\r\n                    }`})\r\n            if(result.data.signinuser.data==='Проверьте данные')\r\n                await dispatch({\r\n                    type: ERROR_AUTHENTICATED,\r\n                    payload: true\r\n                })\r\n            else {\r\n                await Router.push('/')\r\n                await dispatch({\r\n                    type: SHOW_MINI_DIALOG,\r\n                    payload: false\r\n                })\r\n                await dispatch({type: AUTHENTICATED});\r\n                window.location.reload()\r\n            }\r\n        } catch(error) {\r\n            console.log(error)\r\n            await dispatch({\r\n                type: ERROR_AUTHENTICATED,\r\n                payload: true\r\n            })\r\n        }\r\n    };\r\n}\r\n\r\nexport function checkAuthenticated() {\r\n    return async (dispatch) => {\r\n        try {\r\n            if (Cookies.get('jwt')) {\r\n                dispatch ({type: AUTHENTICATED});\r\n            } else {\r\n                dispatch ({type: UNAUTHENTICATED});\r\n            }\r\n        } catch (error) {\r\n            dispatch ({type: UNAUTHENTICATED});\r\n        }\r\n    };\r\n}\r\n\r\nexport function setAuthenticated(auth) {\r\n    return {\r\n        type: SET_AUTH,\r\n        payload: auth\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    return async (dispatch) => {\r\n        Router.push('/')\r\n        Cookies.remove('jwt');\r\n        dispatch({\r\n            type: UNAUTHENTICATED,\r\n        })\r\n        //setTimeout(()=>window.location.reload(),100)\r\n\r\n\r\n    }\r\n}\r\n\r\nexport function setProfile() {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient()\r\n            let result = await client\r\n                .query({\r\n                    query: gql`\r\n                    query {\r\n                        getStatus {\r\n                           role\r\n                           status\r\n                           phone\r\n                           organization\r\n                           _id\r\n                          }\r\n                    }`\r\n                })\r\n            await dispatch({\r\n                type: SET_PROFILE,\r\n                payload: result.data.getStatus\r\n            })\r\n        } catch(error) {\r\n            console.error(error)\r\n        }\r\n    };\r\n}\r\n\r\nexport async function getProfile() {\r\n    try {\r\n        const client = new SingletonApolloClient().getClient()\r\n        let result = await client\r\n            .query({\r\n                query: gql`\r\n                   query {\r\n                       getStatus {\r\n                          role\r\n                          status\r\n                          phone\r\n                          organization\r\n                          _id\r\n                         }\r\n                   }`\r\n            })\r\n        return result.data.getStatus\r\n    } catch(error) {\r\n        console.error(error)\r\n    }\r\n}"],"mappings":"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","sourceRoot":""}