{"version":3,"file":"static/webpack/static\\development\\pages\\basket.js.63ef32003e22abe6353e.hot-update.js","sources":["webpack:///./components/dialog/BuyBasket.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { addOrders } from '../../src/gql/order'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport dialogContentStyle from '../../src/styleMUI/dialogContent'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Router from 'next/router'\r\nimport Confirmation from './Confirmation'\r\n\r\nconst BuyBasket =  React.memo(\r\n    (props) =>{\r\n        const { isMobileApp } = props.app;\r\n        const { client, allPrice } = props;\r\n        const { showMiniDialog, setMiniDialog } = props.mini_dialogActions;\r\n        const { showSnackBar } = props.snackbarActions;\r\n        const { classes } = props;\r\n        const width = isMobileApp? '100%' : 500\r\n        let [address, setAddress] = useState([]);\r\n        let [coment, setComent] = useState('');\r\n        let handleComent =  (event) => {\r\n            setComent(event.target.value)\r\n        };\r\n        let [paymentMethod, setPaymentMethod] = useState('');\r\n        let paymentMethods = [\r\n            'Наличные'\r\n        ]\r\n        let handlePaymentMethod =  (event) => {\r\n            setPaymentMethod(event.target.value)\r\n        };\r\n        return (\r\n            <div className={classes.main}>\r\n                <FormControl component='fieldset' style={{width: width}}>\r\n                    <FormLabel component='legend'>Адреса доставки</FormLabel>\r\n                    <FormGroup>\r\n                        {\r\n                            client.address.map((element, idx) => (\r\n                                <FormControlLabel\r\n                                    key={idx}\r\n                                    onChange={(e)=>{\r\n                                        if(e.target.checked)\r\n                                            address.push(element)\r\n                                        else {\r\n                                            address.splice(address.indexOf(element), 1)\r\n                                        }\r\n                                        setAddress([...address])\r\n                                    }}\r\n                                    control={<Checkbox value={idx} />}\r\n                                    label={element[0]}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </FormGroup>\r\n                </FormControl>\r\n                <div className={classes.row}>\r\n                    <a href={`/client/${client.user._id}`} target='_blank'>\r\n                        Добавить адрес\r\n                    </a>\r\n                </div>\r\n                <br/>\r\n                <Input\r\n                    style={{width: width}}\r\n                    placeholder='Коментарий'\r\n                    value={coment}\r\n                    className={isMobileApp?classes.inputM:classes.inputD}\r\n                    onChange={handleComent}\r\n                    inputProps={{\r\n                        'aria-label': 'description',\r\n                    }}\r\n                />\r\n                <br/>\r\n                <FormControl style={{width: width}} className={isMobileApp?classes.inputM:classes.inputD}>\r\n                    <InputLabel>Способ оплаты</InputLabel>\r\n                    <Select value={paymentMethod} onChange={handlePaymentMethod}>\r\n                        {paymentMethods.map((element)=>\r\n                            <MenuItem key={element} value={element} >{element}</MenuItem>\r\n                        )}\r\n                    </Select>\r\n                </FormControl>\r\n                <br/>\r\n                <div style={{width: width}} className={classes.itogo}><b>Итого:</b>{` ${allPrice} сом`}</div>\r\n                <br/>\r\n                <div>\r\n                    <Button variant='contained' color='primary' onClick={async()=>{\r\n                        if(paymentMethod.length>0&&address.length>0){\r\n                            const action = async() => {\r\n                                await addOrders({info: coment, paymentMethod: paymentMethod, address: address})\r\n                                Router.push('/orders')\r\n                                showMiniDialog(false);\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                        } else\r\n                            showSnackBar('Заполните все поля')\r\n                    }} className={classes.button}>\r\n                        Купить\r\n                    </Button>\r\n                    <Button variant='contained' color='secondary' onClick={()=>{showMiniDialog(false);}} className={classes.button}>\r\n                        Закрыть\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        mini_dialog: state.mini_dialog,\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nBuyBasket.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(BuyBasket));"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAkaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAIA;;;;A","sourceRoot":""}