{"version":3,"file":"static/webpack/static\\development\\pages\\blog.js.fffe375cb18dd712b026.hot-update.js","sources":["webpack:///./components/blog/CardBlog.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport cardPageListStyle from '../../src/styleMUI/blog/cardBlog'\r\nimport { connect } from 'react-redux'\r\nimport { pdDDMMYYYY } from '../../src/lib'\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { deleteBlog, addBlog, setBlog } from '../../src/gql/blog'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport Confirmation from '../dialog/Confirmation'\r\n\r\nconst CardBlog = React.memo((props) => {\r\n    const classes = cardPageListStyle();\r\n    const { element, setList } = props;\r\n    const { profile } = props.user;\r\n    const { isMobileApp } = props.app;\r\n    //addCard\r\n    let [preview, setPreview] = useState(element?element.image:'/static/add.png');\r\n    let [image, setImage] = useState(undefined);\r\n    let handleChangeImage = ((event) => {\r\n        setImage(event.target.files[0])\r\n        setPreview(URL.createObjectURL(event.target.files[0]))\r\n    })\r\n    let [title, setTitle] = useState(element?element.title:'');\r\n    let handleTitle =  (event) => {\r\n        setTitle(event.target.value)\r\n    };\r\n    let [text, setText] = useState(element?element.text:'');\r\n    let handleText =  (event) => {\r\n        setText(event.target.value)\r\n    };\r\n    let date = pdDDMMYYYY(element?new Date(element.updatedAt):new Date())\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    let [all, setAll] = useState(false);\r\n    return (\r\n        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n            {\r\n                profile.role === 'admin' ?\r\n                    <>\r\n                    <CardHeader\r\n                        subheader={date}\r\n                    />\r\n                    <CardActionArea>\r\n                        <label htmlFor={element?element._id:'add'}>\r\n                            <img\r\n                                className={isMobileApp?classes.mediaM:classes.mediaD}\r\n                                src={preview}\r\n                                alt={'Изменить'}\r\n                            />\r\n                        </label>\r\n                        <CardContent>\r\n                            <TextField\r\n                                label='Имя'\r\n                                value={title}\r\n                                className={isMobileApp?classes.inputM:classes.inputD}\r\n                                onChange={handleTitle}\r\n                                inputProps={{\r\n                                    'aria-label': 'description',\r\n                                }}\r\n                            />\r\n                            <br/>\r\n                            <br/>\r\n                            <TextField\r\n                                label='Текст'\r\n                                value={text}\r\n                                className={isMobileApp?classes.inputM:classes.inputD}\r\n                                onChange={handleText}\r\n                                inputProps={{\r\n                                    'aria-label': 'description',\r\n                                }}\r\n                            />\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        {\r\n                            element!==undefined?\r\n                                <>\r\n                                <Button onClick={async()=>{\r\n                            let editElement = {_id: element._id}\r\n                            if(title.length>0&&title!==element.title)editElement.title = title\r\n                            if(text.length>0&&text!==element.text)editElement.text = text\r\n                            if(image!==undefined)editElement.image = image\r\n                            const action = async() => {\r\n                                setList((await setBlog(editElement)).blogs)\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            showMiniDialog(true)\r\n                        }} size='small' color='primary'>\r\n                            Сохранить\r\n                            </Button>\r\n                                <Button onClick={async()=>{\r\n                                const action = async() => {\r\n                                    setList((await deleteBlog([element._id])).blogs)\r\n                                }\r\n                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                showMiniDialog(true)\r\n                            }} size='small' color='primary'>\r\n                                Удалить\r\n                            </Button>\r\n                                </>\r\n                                :\r\n                                <Button onClick={async()=> {\r\n                                    if (image !== undefined && text.length > 0 && title.length > 0) {\r\n                                        setImage(undefined)\r\n                                        setPreview('/static/add.png')\r\n                                        setTitle('')\r\n                                        setText('')\r\n                                        const action = async() => {\r\n                                            setList((await addBlog({image: image, text: text, title: title})).blogs)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    } else {\r\n                                        showSnackBar('Заполните все поля')\r\n                                    }\r\n                                }\r\n                                } size='small' color='primary'>\r\n                                    Добавить\r\n                                </Button>\r\n                        }\r\n                    </CardActions>\r\n                    <input\r\n                        accept='image/*'\r\n                        style={{ display: 'none' }}\r\n                        id={element?element._id:'add'}\r\n                        type='file'\r\n                        onChange={handleChangeImage}\r\n                    />\r\n                    </>\r\n                    :\r\n                    element!==undefined?\r\n                        <>\r\n                        <CardActionArea>\r\n                            <img\r\n                                className={isMobileApp?classes.mediaM:classes.mediaD}\r\n                                src={element.image}\r\n                                alt={element.title}\r\n                            />\r\n                            <div className={classes.shapka}>\r\n                                <div className={classes.title}>{element.title}</div>\r\n                                <div className={classes.date}>{date}</div>\r\n                            </div>\r\n                            {all?\r\n                                <div style={{fontSize: '1rem', margin: 20, whiteSpace: 'pre-wrap'}}>\r\n                                    {element.text}\r\n                                </div>:null}\r\n                            <Button onClick={async()=> {\r\n                                setAll(!all)\r\n                            }} size='small' color='primary'>\r\n                                {all?'Свернуть':'Посмотреть полностью'}\r\n                            </Button>\r\n                        </CardActionArea>\r\n                        </>\r\n                        :null\r\n            }\r\n            </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardBlog)"],"mappings":"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","sourceRoot":""}