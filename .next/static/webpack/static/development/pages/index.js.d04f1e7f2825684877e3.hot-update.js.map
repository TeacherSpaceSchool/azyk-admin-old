{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.d04f1e7f2825684877e3.hot-update.js","sources":["webpack:///./components/category/CardCategory.js","webpack:///./layouts/App.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport cardCategoryStyle from '../../src/styleMUI/category/cardCategory'\r\nimport { connect } from 'react-redux'\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { onoffCategory, addCategory, setCategory, deleteCategory } from '../../src/gql/category'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from 'next/link';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport dynamic from 'next/dynamic'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\n\r\nconst Confirmation = dynamic(\r\n    () => import('../dialog/Confirmation')\r\n)\r\n\r\nconst CardCategory = React.memo((props) => {\r\n    const classes = cardCategoryStyle();\r\n    const { element, setList } = props;\r\n    const { profile } = props.user;\r\n    const { isMobileApp } = props.app;\r\n    //addCard\r\n    let [preview, setPreview] = useState(element?element.image:'/static/add.png');\r\n    let [image, setImage] = useState(undefined);\r\n    let handleChangeImage = ((event) => {\r\n        setImage(event.target.files[0])\r\n        setPreview(URL.createObjectURL(event.target.files[0]))\r\n    })\r\n    let [name, setName] = useState(element?element.name:'');\r\n    let handleName =  (event) => {\r\n        setName(event.target.value)\r\n    };\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    return (\r\n        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n            {\r\n                name!=='Не задано'&&setList!=='all'&&profile.role === 'admin' ?\r\n                    <>\r\n                    <CardActionArea>\r\n                        <CardContent>\r\n                            <div className={classes.line}>\r\n                                <label htmlFor={element?element._id:'add'}>\r\n                                    <LazyLoadImage\r\n                                        effect='blur'\r\n                                        className={classes.media}\r\n                                        src={preview}\r\n                                        alt={'Изменить'}\r\n                                        placeholderSrc='/static/add.png'\r\n                                    />\r\n                                </label>\r\n                               <TextField\r\n                                   label='Имя'\r\n                                   value={name}\r\n                                   className={isMobileApp?classes.inputM:classes.inputD}\r\n                                   onChange={handleName}\r\n                                   inputProps={{\r\n                                       'aria-label': 'description',\r\n                                   }}\r\n                               />\r\n                            </div>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        {\r\n                            element!==undefined?\r\n                            <>\r\n                            <Button onClick={async()=>{\r\n                                    let editElement = {_id: element._id}\r\n                                    if(name.length>0&&name!==element.name)editElement.name = name\r\n                                    if(image!==undefined)editElement.image = image\r\n                                    const action = async() => {\r\n                                        setList((await setCategory(editElement)).categorys)\r\n                                    }\r\n                                    setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                    showMiniDialog(true)\r\n                                }} size='small' color='primary'>\r\n                                    Сохранить\r\n                                </Button>\r\n                                <Button onClick={async()=>{\r\n                                    const action = async() => {\r\n                                        setList((await onoffCategory([element._id])).categorys)\r\n                                    }\r\n                                    setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                    showMiniDialog(true)\r\n                                }} size='small' color='primary'>\r\n                                    {element.status==='active'?'Отключить':'Включить'}\r\n                                </Button>\r\n                                <Button size='small' color='primary' onClick={()=>{\r\n                                    const action = async() => {\r\n                                        setList((await deleteCategory([element._id])).categorys)\r\n                                    }\r\n                                    setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                    showMiniDialog(true)\r\n                                }}>\r\n                                    Удалить\r\n                                </Button>\r\n                        <Link href='/subcategory/[id]' as={`/subcategory/${element._id}`}>\r\n                            <Button size='small' color='primary'>\r\n                                Перейти\r\n                            </Button>\r\n                        </Link>\r\n                    </>:\r\n                    <Button onClick={async()=> {\r\n                        if (image !== undefined && name.length > 0) {\r\n                            setImage(undefined)\r\n                            setPreview('/static/add.png')\r\n                            setName('')\r\n                            const action = async() => {\r\n                                setList((await addCategory({image: image, name: name})).categorys)\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            showMiniDialog(true)\r\n                        } else\r\n                            showSnackBar('Заполните все поля')\r\n\r\n                    }\r\n                    } size='small' color='primary'>\r\n                        Добавить\r\n                    </Button>}\r\n                    </CardActions>\r\n                    <input\r\n                        accept='image/*'\r\n                        style={{ display: 'none' }}\r\n                        id={element?element._id:'add'}\r\n                        type='file'\r\n                        onChange={handleChangeImage}\r\n                    />\r\n                    </>\r\n\r\n                    :\r\n                    name!=='Не задано'?\r\n                        <CardActionArea>\r\n                            <Link href='/subcategory/[id]' as={`/subcategory/${element._id}`}>\r\n                                <div className={classes.line}>\r\n                                    <label htmlFor='contained-button-file'>\r\n                                        <LazyLoadImage\r\n                                            effect='blur'\r\n                                            className={classes.media}\r\n                                            src={element.image}\r\n                                            alt={element.name}\r\n                                            placeholderSrc='/static/add.png'\r\n                                        />\r\n                                    </label>\r\n                                    <h3 className={isMobileApp?classes.inputM:classes.inputD}>\r\n                                        {element.name}\r\n                                    </h3>\r\n                                </div>\r\n                            </Link>\r\n                        </CardActionArea>\r\n                        :\r\n                        name==='Не задано'&&profile.role === 'admin'?\r\n                            <CardActionArea>\r\n                                <Link href='/subcategory/[id]' as={`/subcategory/${element._id}`}>\r\n                                    <div className={classes.line}>\r\n                                        <label htmlFor='contained-button-file'>\r\n                                            <LazyLoadImage\r\n                                                effect='blur'\r\n                                                className={classes.media}\r\n                                                src={element.image}\r\n                                                alt={element.name}\r\n                                                placeholderSrc='/static/add.png'\r\n                                            />\r\n                                        </label>\r\n                                        <h3 className={isMobileApp?classes.inputM:classes.inputD}>\r\n                                            {element.name}\r\n                                        </h3>\r\n                                    </div>\r\n                                </Link>\r\n                            </CardActionArea>\r\n                            :null\r\n            }\r\n            </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCategory)","import React, { useEffect, useState } from 'react';\nimport { getAds } from '../src/gql/ads'\nimport AppBar from '../components/app/AppBar'\nimport Dialog from '../components/app/Dialog'\nimport SnackBar from '../components/app/SnackBar'\nimport Drawer from '../components/app/Drawer'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { addFavoriteItem } from '../src/gql/items'\nimport { addBasket } from '../src/gql/basket'\nimport * as userActions from '../redux/actions/user'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport '../scss/app.scss'\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nexport const mainWindow = React.createRef();\n\nconst App = React.memo(props => {\n    const { setProfile } = props.userActions;\n    const { profile, authenticated } = props.user;\n    let { sorts, filters, getList, pageName } = props;\n    let [ads, setAds] = useState({});\n    useEffect( ()=>{\n        if(authenticated&&(!profile||!profile.role))\n            setProfile()\n    },[])\n    useEffect( ()=>{\n        (async ()=>{\n            if(authenticated){\n                if(localStorage.favorites&&localStorage.favorites!=='[]') {\n                    let favorites = JSON.parse(localStorage.favorites)\n                    favorites = favorites.map(element => element._id)\n                    await addFavoriteItem(favorites)\n                    localStorage.favorites = JSON.stringify([])\n                    if (getList !== undefined)\n                        await getList()\n                }\n                if(localStorage.basket&&localStorage.basket!=='[]') {\n                    let basket = JSON.parse(localStorage.basket)\n                    for(let i=0; i<basket.length; i++){\n                        await addBasket({item: basket[i].item._id, count: basket[i].count})\n                    }\n                    localStorage.basket = '[]'\n                    if (getList !== undefined)\n                        await getList()\n                }\n            }\n            setAds((await getAds()).ads)\n        })()\n    },[])\n    const { load } = props.app;\n    /*const { data: { data }, loading } = useSubscription(\n        BASKET_SUBSCRIPTION\n    );\n    console.log(data, loading)*/\n    return(\n        <div ref={mainWindow} className='App'>\n                <AppBar pageName={pageName} sorts={sorts} filters={filters}/>\n                <Drawer />\n                <div className='App-body'>\n                    {\n                        ads&&ads.url?\n                            <a href={ads.url}>\n                                <LazyLoadImage\n                                    placeholderSrc='/static/add.png'\n                                    src={ads.image}\n                                    alt={ads.title}\n                                    className='marketImg'\n                                />\n                            </a>\n                            :\n                            null\n                    }\n                    {props.children}\n                </div>\n                <Dialog />\n                <SnackBar/>\n            {load?\n                <div className='load'>\n                    <CircularProgress/>\n                </div>\n                :\n                null\n            }\n        </div>\n    )\n});\n\nfunction mapStateToProps (state) {\n    return {\n        user: state.user,\n        app: state.app,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        userActions: bindActionCreators(userActions, dispatch),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"],"mappings":"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","sourceRoot":""}