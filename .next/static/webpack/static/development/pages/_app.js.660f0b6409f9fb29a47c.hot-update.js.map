{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.660f0b6409f9fb29a47c.hot-update.js","sources":["webpack:///./src/singleton/client.js"],"sourcesContent":["/* eslint-disable no-extra-boolean-cast */\r\nimport { urlGQL, urlGQLws } from '../../redux/constants/other';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport fetch from 'node-fetch';\r\nimport { getJWT } from '../lib'\r\nimport { setContext } from 'apollo-link-context';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink, split  } from 'apollo-link';\r\nimport { createUploadLink } from 'apollo-upload-client'\r\n//import { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\n//import * as ws from 'ws';\r\nimport { SingletonStore } from '../singleton/store';\r\nimport {\r\n    showSnackBar\r\n} from '../../redux/actions/snackbar'\r\nexport class SingletonApolloClient {\r\n    constructor(req) {\r\n        if (!!SingletonApolloClient.instance) {\r\n            return SingletonApolloClient.instance;\r\n        }\r\n        SingletonApolloClient.instance = this;\r\n        const uploadLink = createUploadLink({\r\n            uri: urlGQL,\r\n            fetch: fetch,\r\n            credentials: 'include'\r\n        });\r\n        const authLink = setContext((_, { headers }) => {\r\n            return {\r\n                headers: {\r\n                    ...headers,\r\n                    authorization: this.jwt ? `Bearer ${this.jwt}` : '',\r\n                }\r\n            }\r\n        });\r\n        const linkError = onError((ctx) => {\r\n            if (ctx.graphQLErrors)\r\n                ctx.graphQLErrors.map(({ message, locations, path }) =>{\r\n                    new SingletonStore().getStore().dispatch(showSnackBar('Ошибка'))\r\n                    console.log(\r\n                        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n                    )\r\n                });\r\n            if (ctx.networkError) console.log(`[Network error]: ${ctx.networkError}`);\r\n        });\r\n        /*const wsLink = new WebSocketLink({\r\n            uri: urlGQLws,\r\n            options: {\r\n                reconnect: true\r\n            },\r\n            webSocketImpl: process.browser?WebSocket:ws\r\n        });*/\r\n        const mainLink = /*split(\r\n            ({ query }) => {\r\n                const definition = getMainDefinition(query);\r\n                return (\r\n                    definition.kind === 'OperationDefinition' &&\r\n                    definition.operation === 'subscription'\r\n                );\r\n            },\r\n            wsLink,*/\r\n            uploadLink/*,\r\n        );*/\r\n        const link = ApolloLink.from([\r\n            linkError,\r\n            authLink,\r\n            mainLink\r\n        ]);\r\n        this.client = new ApolloClient({\r\n            link: link,\r\n            cache: new InMemoryCache(),\r\n            defaultOptions: {\r\n                watchQuery: {\r\n                    fetchPolicy: 'cache-and-network',\r\n                    errorPolicy: 'ignore',\r\n                },\r\n                query: {\r\n                    fetchPolicy: 'network-only',\r\n                    errorPolicy: 'all',\r\n                },\r\n                mutate: {\r\n                    errorPolicy: 'all',\r\n                },\r\n            },\r\n\r\n        });\r\n        this.jwt = getJWT(req?req.headers.cookie:document.cookie)\r\n\r\n        return this;\r\n    }\r\n\r\n    getClient() {\r\n        return this.client;\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;AAOA;AAAA;;;;;;;;;AASA;AAAA;;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AATA;AAHA;AAkBA;AAEA;AACA;AACA;AA1EA;AAAA;AAAA;AA4EA;AACA;AA7EA;AACA;AADA;AAAA;;;;A","sourceRoot":""}