{"version":3,"file":"static/webpack/static\\development\\pages\\employment\\[id].js.1c328e1c3320bf8e40da.hot-update.js","sources":["webpack:///./pages/employment/.js","webpack:///./src/styleMUI/employment/employment.js"],"sourcesContent":["import Head from 'next/head';\r\nimport React, { useState } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport {getEmployment, setEmployments, onoffEmployment, addEmployment, deleteEmployment} from '../../src/gql/employment'\r\nimport organizationStyle from '../../src/styleMUI/employment/employment'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { useRouter } from 'next/router'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { getOrganizations } from '../../src/gql/organization'\r\nimport Router from 'next/router'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\n\r\nconst Client = React.memo((props) => {\r\n    const { profile } = props.user;\r\n    const classes = organizationStyle();\r\n    const { data } = props;\r\n    const { isMobileApp } = props.app;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    let [status, setStatus] = useState(data.employment!==null?data.employment.user.status:'');\r\n    let [name, setName] = useState(data.employment!==null?data.employment.name:'');\r\n    let [email, setEmail] = useState(data.employment!==null?data.employment.email:'');\r\n    let [phone, setPhone] = useState(data.employment!==null?data.employment.user.phone:'');\r\n    let [organization, setOrganization] = useState(data.employment!==null?data.employment.organization:{});\r\n    let handleOrganization =  (event) => {\r\n        setOrganization({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [role, setRole] = useState(data.employment!==null?data.employment.user.role:'');\r\n    let handleRole =  (event) => {\r\n        setRole(event.target.value)\r\n    };\r\n    let [password, setPassword] = useState('');\r\n    let handlePassword =  (event) => {\r\n        setPassword(event.target.value)\r\n    };\r\n    let [hide, setHide] = useState('password');\r\n    let handleHide =  () => {\r\n        setHide(!hide)\r\n    };\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const router = useRouter()\r\n    const { logout } = props.userActions;\r\n    let roles = ['организация', 'менеджер', 'экспедитор']\r\n    return (\r\n        <App filters={data.filterSubCategory} sorts={data.sortSubCategory} pageName={data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'}</title>\r\n                <meta name='description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:title' content={data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'} />\r\n                <meta property='og:description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:type' content='website' />\r\n                <meta property='og:image' content={`http://${process.env.URL}/static/512x512.png`} />\r\n                <meta property=\"og:url\" content={`http://${process.env.URL}/employment/${router.query.id}`} />\r\n                <link rel='canonical' href={`http://${process.env.URL}/employment/${router.query.id}`}/>\r\n            </Head>\r\n            <Card className={classes.page}>\r\n                <CardContent className={isMobileApp?classes.column:classes.row} style={isMobileApp?{}:{justifyContent: 'start', alignItems: 'flex-start'}}>\r\n                {\r\n                            data.employment!==null?\r\n                                profile.role==='admin'||profile.role==='организация'||profile._id===data.employment.user._id?\r\n                                    <>\r\n                                    <div>\r\n                                            <TextField\r\n                                                label='Имя'\r\n                                                value={name}\r\n                                                className={classes.input}\r\n                                                onChange={(event)=>{setName(event.target.value)}}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                }}\r\n                                            />\r\n                                            <Input\r\n                                                placeholder={router.query.id==='new'?'Пароль':'Новый пароль'}\r\n                                                type={hide ? 'password' : 'text' }\r\n                                                value={password}\r\n                                                onChange={handlePassword}\r\n                                                className={classes.input}\r\n                                                endAdornment={\r\n                                                    <InputAdornment position='end'>\r\n                                                        <IconButton aria-label='Toggle password visibility' onClick={handleHide}>\r\n                                                            {hide ? <VisibilityOff />:<Visibility />  }\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n                                        <TextField\r\n                                            label='email'\r\n                                            value={email}\r\n                                            className={classes.input}\r\n                                            onChange={(event)=>{setEmail(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        <TextField\r\n                                            label='Телефон. Формат: +996555780861'\r\n                                            value={phone}\r\n                                            className={classes.input}\r\n                                            onChange={(event)=>{setPhone(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        {router.query.id==='new'&&profile.role==='admin'?\r\n                                            <FormControl className={classes.input}>\r\n                                                <InputLabel>Организация</InputLabel>\r\n                                                <Select value={organization._id}onChange={handleOrganization}>\r\n                                                    {data.organizations.map((element)=>\r\n                                                        <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                                    )}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                            :\r\n                                            router.query.id!=='new'?\r\n                                                <TextField\r\n                                                    label='Организация'\r\n                                                    value={organization.name}\r\n                                                    className={classes.input}\r\n                                                    inputProps={{\r\n                                                        'aria-label': 'description',\r\n                                                        readOnly: true,\r\n                                                    }}\r\n                                                />\r\n                                                :null\r\n                                        }\r\n                                        <FormControl className={classes.input}>\r\n                                            <InputLabel>Роль</InputLabel>\r\n                                            <Select\r\n                                                value={role}\r\n                                                onChange={handleRole}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                    readOnly: profile._id===data.employment.user._id||!['admin', 'организация'].includes(profile.role),\r\n                                                }}\r\n                                            >\r\n                                                {roles.map((element)=>{\r\n                                                    //if(element!=='организация'||profile.role=='admin')\r\n                                                        return <MenuItem key={element} value={element}>{element}</MenuItem>\r\n                                                })\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        <div className={classes.row}>\r\n                                            {\r\n                                                router.query.id==='new'?\r\n                                                    <Button onClick={async()=>{\r\n                                                        if (name.length>0&&email.length>0&&password.length>0&&phone.length>0&&role.length>0&&organization._id!==undefined) {\r\n                                                            const action = async() => {\r\n                                                                await addEmployment({\r\n                                                                    name: name,\r\n                                                                    email: email,\r\n                                                                    phone: phone,\r\n                                                                    password: password,\r\n                                                                    role: role,\r\n                                                                    organization: organization._id,\r\n                                                                })\r\n                                                                Router.push('/employments')\r\n                                                            }\r\n                                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                            showMiniDialog(true)\r\n                                                        } else {\r\n                                                            showSnackBar('Заполните все поля')\r\n                                                        }\r\n                                                    }} size='small' color='primary'>\r\n                                                        Добавить\r\n                                                    </Button>\r\n                                                    :\r\n                                                    <>\r\n                                                    <Button onClick={async()=>{\r\n                                                        let editElement = {_id: data.employment._id}\r\n                                                        if(name.length>0&&name!==data.employment.name)editElement.name = name\r\n                                                        if(phone.length>0&&phone!==data.employment.phone)editElement.phone = phone\r\n                                                        if(email.length>0&&email!==data.employment.email)editElement.email = email\r\n                                                        if(password.length>0)editElement.newPass = password\r\n                                                        if(role.length>0&&role!==data.employment.role)editElement.role = role\r\n                                                        const action = async() => {\r\n                                                            await setEmployments(editElement)\r\n                                                        }\r\n                                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                        showMiniDialog(true)\r\n                                                    }} size='small' color='primary'>\r\n                                                        Сохранить\r\n                                                    </Button>\r\n\r\n                                                    {\r\n                                                        profile._id!==data.employment.user._id&&['admin', 'организация'].includes(profile.role)?\r\n                                                            <>\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    await onoffEmployment([data.employment._id])\r\n                                                                    setStatus(status==='active'?'deactive':'active')\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                {status==='active'?'Отключить':'Включить'}\r\n                                                            </Button>\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    await deleteEmployment([data.employment._id])\r\n                                                                    Router.push('/employments')\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                Удалить\r\n                                                            </Button>\r\n                                                            </>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    {\r\n                                                        profile._id===data.employment.user._id?\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    logout(true)\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                Выйти\r\n                                                            </Button>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    </>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    </>\r\n                                    :\r\n                                    'Ничего не найдено'\r\n                                :\r\n                                'Ничего не найдено'\r\n                        }\r\n                </CardContent>\r\n                </Card>\r\n        </App>\r\n    )\r\n})\r\n\r\nClient.getInitialProps = async function(ctx) {\r\n    if(!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role))\r\n        if(ctx.res) {\r\n            ctx.res.writeHead(302, {\r\n                Location: '/'\r\n            })\r\n            ctx.res.end()\r\n        } else\r\n            Router.push('/')\r\n    return {\r\n        data: {\r\n            ...ctx.query.id!=='new'?await getEmployment({_id: ctx.query.id}):{employment:{name: '',email: '',user: {phone: '',status: '',role: '',},organization: {_id: ''},}},\r\n            ...await getOrganizations({search: '', sort: 'name', filter: ''})\r\n        }\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);","import { makeStyles } from '@material-ui/core/styles';\r\nexport default makeStyles({\r\n    page: {\r\n        margin: '20px'\r\n    },\r\n    row:{\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    column:{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    input: {\r\n        marginBottom: 10,\r\n        width: '100%',\r\n    },\r\n\r\n})"],"mappings":"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","sourceRoot":""}