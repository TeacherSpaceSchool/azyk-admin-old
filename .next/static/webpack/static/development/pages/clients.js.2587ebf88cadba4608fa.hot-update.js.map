{"version":3,"file":"static/webpack/static\\development\\pages\\clients.js.2587ebf88cadba4608fa.hot-update.js","sources":["webpack:///./components/client/CardClient.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport cardOrganizationStyle from '../../src/styleMUI/client/cardClient'\r\nimport { connect } from 'react-redux'\r\nimport Link from 'next/link';\r\nimport Button from '@material-ui/core/Button';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport { onoffClient } from '../../src/gql/client'\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\n\r\nconst CardOrganization = React.memo((props) => {\r\n    const classes = cardOrganizationStyle();\r\n    const { element } = props;\r\n    const { isMobileApp } = props.app;\r\n    const { profile } = props.user;\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    let [status, setStatus] = useState(element.user.status);\r\n    return (\r\n        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n            <CardActionArea>\r\n                <Link href='/client/[id]' as={`/client/${element.user._id}`}>\r\n                    <CardContent className={classes.line}>\r\n                        <label htmlFor='contained-button-file'>\r\n                            <img\r\n                                className={classes.media}\r\n                                src={element.image}\r\n                                alt={element.name}\r\n                            />\r\n                        </label>\r\n                        <div>\r\n                            <div className={classes.row}>\r\n                                <div className={classes.nameField}>\r\n                                    Имя:&nbsp;\r\n                                </div>\r\n                                <div className={classes.value}>\r\n                                    {element.name}\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.row}>\r\n                                <div className={classes.nameField}>\r\n                                    Телефон:&nbsp;\r\n                                </div>\r\n                                <div className={classes.value}>\r\n                                    {element.user.phone}\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.row}>\r\n                                <div className={classes.nameField}>\r\n                                    Адрес:&nbsp;\r\n                                </div>\r\n                                <div>\r\n                                    {element.address.map((addres, idx)=>\r\n                                        <div key={idx} className={classes.value}>\r\n                                            {addres[0]}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </CardContent>\r\n                </Link>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                {\r\n                    profile.role === 'admin' ?\r\n                        <Button onClick={async()=>{\r\n                            const action = async() => {\r\n                                await onoffClient([element._id])\r\n                                setStatus(status==='active'?'deactive':'active')\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            showMiniDialog(true)\r\n                        }} size='small' color='primary'>\r\n                            {status==='active'?'Отключить':'Включить'}\r\n                        </Button>\r\n                        :\r\n                        null\r\n                }\r\n            </CardActions>\r\n            </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        app: state.app,\r\n        user: state.user\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrganization)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}