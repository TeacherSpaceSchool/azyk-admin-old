{"version":3,"file":"static/webpack/static\\development\\pages\\basket.js.9cb3a009757822af3c09.hot-update.js","sources":["webpack:///./components/dialog/Sign.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport { validPhone } from '../../redux/constants/other'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport classNames from 'classnames';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport dialogContentStyle from '../../src/styleMUI/dialogContent'\r\n\r\nconst Sign =  React.memo(\r\n    (props) =>{\r\n        let [loginEnter, setLoginEnter] = useState('');\r\n        let [passEnter, setPassEnter] = useState('');\r\n        let [errorPhone, setErrorPhone] = useState(false);\r\n        let [errorPass, setErrorPass] = useState(false);\r\n        let [errorPassRepeat, setErrorPassRepeat] = useState(false);\r\n        let handlePassEnter =  (event) => {\r\n            setPassEnter(event.target.value)\r\n        };\r\n        let handleLoginEnter =  (event) => {\r\n            setLoginEnter(event.target.value)\r\n        };\r\n        let [loginReg, setLoginReg] = useState('');\r\n        let [passReg, setPassReg] = useState('');\r\n        let [passRepeatReg, setPassRepeatReg] = useState('');\r\n        let handlePassReg =  (event) => {\r\n            setPassReg(event.target.value)\r\n            if(event.target.value!==passRepeatReg){\r\n                setErrorPassRepeat(true)\r\n            }\r\n            else {\r\n                setErrorPassRepeat(false)\r\n            }\r\n            if(event.target.value.length<8){\r\n                setErrorPass(true)\r\n            }\r\n            else {\r\n                setErrorPass(false)\r\n            }\r\n        };\r\n        let handlePassRepeatReg =  (event) => {\r\n            setPassRepeatReg(event.target.value)\r\n            if(event.target.value!==passReg){\r\n                setErrorPassRepeat(true)\r\n            }\r\n            else {\r\n                setErrorPassRepeat(false)\r\n            }\r\n        };\r\n        let handleLoginReg =  (event) => {\r\n            setLoginReg(event.target.value)\r\n            if(!validPhone(event.target.value)){\r\n                setErrorPhone(true)\r\n            }\r\n            else {\r\n                setErrorPhone(false)\r\n            }\r\n        };\r\n\r\n        let [type, setType] = useState('enter');\r\n        let [hide, setHide] = useState('password');\r\n        let handleHide =  () => {\r\n            setHide(!hide)\r\n        };\r\n        const { error } = props.user;\r\n        const { isMobileApp } = props.app;\r\n        const { showMiniDialog } = props.mini_dialogActions;\r\n        const { signin, signup } = props.userActions;\r\n        const { classes } = props;\r\n        const width = isMobileApp? (window.innerWidth-144) : 500\r\n        return (\r\n            <div className={classes.main}>\r\n            {type==='enter'?\r\n                <>\r\n                <TextField\r\n                    style={{width: width}}\r\n                    id='standard-search'\r\n                    label='Телефон. Формат: +996555780861'\r\n                    type='login'\r\n                    className={classes.textField}\r\n                    margin='normal'\r\n                    value={loginEnter}\r\n                    onChange={handleLoginEnter}\r\n                />\r\n                <br/>\r\n                <FormControl style={{width: width}} className={classNames(classes.margin, classes.textField)}>\r\n                    <InputLabel htmlFor=\"adornment-password\">Пароль</InputLabel>\r\n                    <Input\r\n                        id=\"adornment-password\"\r\n                        type={hide ? 'password' : 'text' }\r\n                        value={passEnter}\r\n                        onChange={handlePassEnter}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton aria-label=\"Toggle password visibility\" onClick={handleHide}>\r\n                                    {hide ? <VisibilityOff />:<Visibility />  }\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                </FormControl>\r\n                <br/>\r\n                {error?\r\n                    <div style={{width: width}} className={classes.error_message}>Неверный логин или пароль</div>\r\n                    :\r\n                    null\r\n                }\r\n                <div>\r\n                    <div style={{width: width}} className={classes.message} onClick={()=>{setType('reg')}}>Зарегестрироваться</div>\r\n                    <div style={{width: width}}>Если забыли пароль то свяжитесь с нашими специалистами.</div>\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                        if(loginEnter.length>0&&passEnter.length>0)\r\n                            signin({phone: loginEnter, password: passEnter})\r\n                    }} className={classes.button}>\r\n                        Войти\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={()=>{showMiniDialog(false);}} className={classes.button}>\r\n                        Закрыть\r\n                    </Button>\r\n                </div>\r\n                </>\r\n            :\r\n                <>\r\n                <TextField\r\n                    id='standard-search'\r\n                    label='Телефон. Формат: +996555780861'\r\n                    type='login'\r\n                    className={classes.textField}\r\n                    margin='normal'\r\n                    value={loginReg}\r\n                    onChange={handleLoginReg}\r\n                    style={{width: width}}\r\n                />\r\n                <br/>\r\n                <FormControl style={{width: width}} className={classNames(classes.margin, classes.textField)}>\r\n                    <InputLabel htmlFor=\"adornment-password\">Придумайте пароль</InputLabel>\r\n                    <Input\r\n                        id=\"adornment-password\"\r\n                        type={hide ? 'password' : 'text' }\r\n                        value={passReg}\r\n                        onChange={handlePassReg}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton aria-label=\"Toggle password visibility\" onClick={handleHide}>\r\n                                    {hide ? <VisibilityOff />:<Visibility />  }\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                </FormControl>\r\n                <br/>\r\n                <FormControl style={{width: width}} className={classNames(classes.margin, classes.textField)}>\r\n                    <InputLabel htmlFor=\"adornment-password\">Повторите пароль</InputLabel>\r\n                    <Input\r\n                        id=\"adornment-password\"\r\n                        type={hide ? 'password' : 'text' }\r\n                        value={passRepeatReg}\r\n                        onChange={handlePassRepeatReg}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton aria-label=\"Toggle password visibility\" onClick={handleHide}>\r\n                                    {hide ? <VisibilityOff />:<Visibility />  }\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                </FormControl>\r\n                <br/>\r\n                {error?\r\n                    <div style={{width: width}} className={classes.error_message}>Неверный логин или пароль</div>\r\n                    :\r\n                    null\r\n                }\r\n                {errorPhone?\r\n                    <div style={{width: width}} className={classes.error_message}>Проверьте телефон. Пример: +996555780861.</div>\r\n                    :\r\n                    null\r\n                }\r\n                {errorPass?\r\n                    <div style={{width: width}} className={classes.error_message}>Недостаточная длина пароля</div>\r\n                    :\r\n                    null\r\n                }\r\n                {errorPassRepeat?\r\n                    <div style={{width: width}} className={classes.error_message}>Пароли не совпадают</div>\r\n                    :\r\n                    null\r\n                }\r\n                <br/>\r\n                <div>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={()=>{if(!errorPass&&!errorPassRepeat&&!errorPhone)signup({phone: loginReg, password: passReg})}} className={classes.button}>\r\n                        Зарегестрироваться\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={()=>{showMiniDialog(false);}} className={classes.button}>\r\n                        Закрыть\r\n                    </Button>\r\n                </div>\r\n                </>\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        mini_dialog: state.mini_dialog,\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n    }\r\n}\r\n\r\nSign.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Sign));"],"mappings":"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","sourceRoot":""}