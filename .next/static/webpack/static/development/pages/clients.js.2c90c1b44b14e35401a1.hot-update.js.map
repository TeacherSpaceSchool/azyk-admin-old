{"version":3,"file":"static/webpack/static\\development\\pages\\clients.js.2c90c1b44b14e35401a1.hot-update.js","sources":["webpack:///./src/gql/client.js"],"sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getClients = async({search: search, sort: sort, filter: filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        clients(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            image\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            address\r\n                            info\r\n                            reiting\r\n                            birthday\r\n                            type\r\n                            city\r\n                            patent \r\n                            passport \r\n                            certificate\r\n                            user \r\n                                {_id role status phone}\r\n                          }\r\n                          sortClient {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterClient {\r\n                           name\r\n                           value\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getClient = async({_id: _id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        client(_id: $_id) {\r\n                            _id\r\n                            image\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            address\r\n                            info\r\n                            reiting\r\n                            birthday\r\n                            city\r\n                            type\r\n                            patent \r\n                            passport \r\n                            certificate\r\n                            user \r\n                                {_id role status phone}\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const onoffClient = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        onoffClient(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getClients(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setClient = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $phone: String, $city: String, $type: String, $image: Upload, $patent: Upload, $passport: Upload, $certificate: Upload, $birthday: Date, $name: String, $email: String, $address: [[String]], $info: String, $newPass: String) {\r\n                        setClient(_id: $_id, phone: $phone, city: $city, image: $image,, patent: $patent, passport: $passport, certificate: $certificate, type: $type, birthday: $birthday, name: $name, email: $email, address: $address, info: $info, newPass: $newPass) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getClients(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AACA;AALA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAsCA;AACA;AAvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA0CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAKA;AAAA;AAAA;AACA;AAFA;AACA;AALA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AA8BA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAIA;AAAA;AAAA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAIA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAWA;AAXA;AACA;AADA;AAAA;AAAA;AAcA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}