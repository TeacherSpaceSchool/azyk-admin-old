{"version":3,"file":"static/webpack/static\\development\\pages\\route\\[id].js.e9733f15cb36bfe188bf.hot-update.js","sources":["webpack:///./components/order/CardOrder.js"],"sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport cardOrderStyle from '../../src/styleMUI/orders/cardOrder'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport { pdDDMMYYHHMM } from '../../src/lib'\r\nimport Order from '../dialog/Order'\r\n\r\nconst CardOrder = React.memo((props) => {\r\n    const classes = cardOrderStyle();\r\n    const { element, setList, route, getInvoices } = props;\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const statusColor = {\r\n        'обработка': 'orange',\r\n        'принят': 'blue',\r\n        'выполнен': 'green',\r\n        'отмена': 'red'\r\n    }\r\n    return (\r\n        <Card className={classes.card} onClick={()=>{setMiniDialog('Заказ', <Order getInvoices={getInvoices} route={route} element={element} setList={setList}/>); showMiniDialog(true)}}>\r\n            <CardActionArea>\r\n                <CardContent className={classes.column}>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.number}>{element.number}</div>&nbsp;\r\n                        <div className={classes.status} style={{background: statusColor[element.orders[0].status]}}>{\r\n                            element.orders[0].status==='принят'&&(element.confirmationForwarder||element.confirmationClient)?\r\n                                element.confirmationClient?\r\n                                    'подтвержден клиентом'\r\n                                    :\r\n                                    element.confirmationForwarder?\r\n                                        'доставлен поставщиком'\r\n                                        :\r\n                                        element.orders[0].status\r\n                                :\r\n                                element.orders[0].status\r\n                        }</div>\r\n                    </div>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.nameField}>Дата:&nbsp;</div>\r\n                        <div className={classes.value}>{pdDDMMYYHHMM(new Date(element.updatedAt))}</div>\r\n                    </div>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.nameField}>Адрес:&nbsp;</div>\r\n                        <div className={classes.value}>{element.address[0]}</div>\r\n                    </div>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.nameField}>Получатель:&nbsp;</div>\r\n                        <div className={classes.value}>{element.client.name}</div>\r\n                    </div>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.nameField}>Поставщик:&nbsp;</div>\r\n                        <div className={classes.value}>{element.orders[0].item.organization.name}</div>\r\n                    </div>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.nameField}>Сумма:&nbsp;</div>\r\n                        <div className={classes.value}>{element.allPrice}&nbsp;сом</div>\r\n                    </div>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrder)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;A","sourceRoot":""}