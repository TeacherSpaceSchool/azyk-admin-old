{"version":3,"file":"static/webpack/static\\development\\pages\\route\\[id].js.795c8878e6f74312a06e.hot-update.js","sources":["webpack:///./components/dialog/Order.js","webpack:///./pages/route/.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { cancelOrders, approveOrders, setOrder, setInvoice } from '../../src/gql/order'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport Button from '@material-ui/core/Button';\r\nimport dialogContentStyle from '../../src/styleMUI/dialogContent'\r\nimport { pdDDMMYYHHMM, pdDDMMYYHHMMCancel } from '../../src/lib'\r\nimport Confirmation from './Confirmation'\r\nimport Geo from '../../components/dialog/Geo'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nconst Order =  React.memo(\r\n    (props) =>{\r\n        const { isMobileApp } = props.app;\r\n        const { profile } = props.user;\r\n        const { showMiniDialog, setMiniDialog } = props.mini_dialogActions;\r\n        const { classes, element, setList, route, getInvoices } = props;\r\n        let [orders, setOrders] = useState(element.orders);\r\n        let [allPrice, setAllPrice] = useState(element.allPrice);\r\n        let [taken, setTaken] = useState(element.taken);\r\n        let [confirmationForwarder, setConfirmationForwarder] = useState(element.confirmationForwarder);\r\n        let [confirmationClient, setConfirmationClient] = useState(element.confirmationClient);\r\n        let [cancelForwarder, setCancelForwarder] = useState(element.cancelForwarder!=undefined&&element.cancelForwarder);\r\n        let [cancelClient, setCancelClient] = useState(element.cancelClient!=undefined&&element.cancelClient);\r\n        const width = isMobileApp? (window.innerWidth-112) : 500;\r\n        const { showSnackBar } = props.snackbarActions;\r\n        let canculateAllPrice = ()=>{\r\n            allPrice=0\r\n            for(let i=0; i<orders.length; i++){\r\n                allPrice+=orders[i].allPrice\r\n            }\r\n            if(element.usedBonus&&element.usedBonus>0)\r\n                allPrice -= element.usedBonus\r\n            setAllPrice(allPrice)\r\n        }\r\n        let increment = (idx)=>{\r\n            orders[idx].count+=1\r\n            orders[idx].allPrice = orders[idx].count * (orders[idx].item.stock===0||orders[idx].item.stock===undefined?orders[idx].item.price:orders[idx].item.stock)\r\n            setOrders([...orders])\r\n            canculateAllPrice()\r\n        }\r\n        let decrement = (idx)=>{\r\n            if(orders[idx].count>1) {\r\n                orders[idx].count -= 1\r\n                orders[idx].allPrice = orders[idx].count * (orders[idx].item.stock===0||orders[idx].item.stock===undefined?orders[idx].item.price:orders[idx].item.stock)\r\n                setOrders([...orders])\r\n                canculateAllPrice()\r\n            }\r\n        }\r\n        let remove = (idx)=>{\r\n            if(orders.length>1) {\r\n                orders.splice(idx, 1)\r\n                setOrders([...orders])\r\n                canculateAllPrice()\r\n            } else\r\n                showSnackBar('Товары не могут отсутствовать в заказе')\r\n        }\r\n        return (\r\n            <div className={classes.column} style={{width: width}}>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Заказ №:&nbsp;</div>\r\n                    <div className={classes.value}>{element.number}</div>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Статус:&nbsp;</div>\r\n                    <div className={classes.value}>{\r\n                            element.orders[0].status==='принят'&&(element.confirmationForwarder||element.confirmationClient)?\r\n                                element.confirmationClient?\r\n                                    'подтвержден клиентом'\r\n                                    :\r\n                                    element.confirmationForwarder?\r\n                                        'доставлен поставщиком'\r\n                                        :\r\n                                        element.orders[0].status\r\n                                :\r\n                                element.orders[0].status\r\n                    }</div>\r\n                </div>\r\n                {\r\n                    element.agent&&element.agent.name?\r\n                        <a href={`/employment/${element.agent._id}`} target='_blank'>\r\n                            <div className={classes.row}>\r\n                                <div className={classes.nameField}>Агент: &nbsp;</div>\r\n                                <div className={classes.value}>{element.agent.name}</div>\r\n                            </div>\r\n                        </a>\r\n                        :\r\n                        null\r\n                }\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Адрес: &nbsp;</div>\r\n                    <div className={classes.value}>{element.address[0]}</div>\r\n                </div>\r\n                <div className={classes.geo} style={{color: element.address[1]?'#ffb300':'red'}} onClick={()=>{\r\n                    if(element.address[1]) {\r\n                        setMiniDialog('Геолокация', <Geo geo={element.address[1]}/>, true)\r\n                        showMiniDialog(true)\r\n                    }\r\n                }}>\r\n                    {\r\n                        element.address[1]?\r\n                            'Посмотреть геолокацию'\r\n                            :\r\n                            'Геолокация не задана'\r\n                    }\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Время заказа: &nbsp;</div>\r\n                    <div className={classes.value}>{pdDDMMYYHHMM(new Date(element.createdAt))}</div>\r\n                </div>\r\n                {\r\n                    element.dateDelivery?\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Время доставки:&nbsp;</div>\r\n                            <div className={classes.value}>{pdDDMMYYHHMM(new Date(element.dateDelivery))}</div>\r\n                        </div>\r\n                        :\r\n                        null\r\n                }\r\n                <a href={`/client/${element.client._id}`} target='_blank'>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.nameField}>Получатель:&nbsp;</div>\r\n                        <div className={classes.value}>{element.client.name}</div>\r\n                    </div>\r\n                </a>\r\n                <a href={`/organization/${element.orders[0].item.organization._id}`} target='_blank'>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.nameField}>Поставщик:&nbsp;</div>\r\n                        <div className={classes.value}>{element.orders[0].item.organization.name}</div>\r\n                    </div>\r\n                </a>\r\n                {\r\n                    element.usedBonus&&element.usedBonus>0?\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Использованный бонус:&nbsp;</div>\r\n                            <div className={classes.value}>{element.usedBonus}&nbsp;сом</div>\r\n                        </div>\r\n                        :\r\n                        null\r\n                }\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Сумма:&nbsp;</div>\r\n                    <div className={classes.value}>{allPrice}&nbsp;сом</div>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Способ оплаты:&nbsp;</div>\r\n                    <div className={classes.value}>{element.paymentMethod}</div>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <div className={classes.nameField}>Информация:&nbsp;</div>\r\n                    <div className={classes.value}>{element.info}</div>\r\n                </div>\r\n                <br/>\r\n                <div className={classes.column}>\r\n                    <b>Товары:</b>\r\n                    {\r\n                        orders.map((order, idx) => {\r\n                            if(\r\n                                element.orders[0].status==='обработка'&&\r\n                                (\r\n                                    profile.role==='client'||\r\n                                    ['менеджер', 'организация', 'агент'].includes(profile.role)||\r\n                                    profile.role==='admin'\r\n                                )\r\n                            )\r\n                                return(\r\n                                    <div key={idx} className={classes.column}>\r\n                                        <div className={classes.row}>\r\n                                            <div className={classes.nameField}>Товар:&nbsp;</div>\r\n                                            <a href={`/item/${order.item._id}`} target='_blank'>\r\n                                                <div className={classes.value}>{order.item.name}</div>\r\n                                            </a>\r\n                                            <IconButton onClick={()=>{\r\n                                                remove(idx)\r\n                                            }} color='primary' className={classes.button} aria-label='удалить'>\r\n                                                <CancelIcon style={{height: 20, width: 20}}/>\r\n                                            </IconButton>\r\n                                        </div>\r\n                                        <div className={classes.row}>\r\n                                            <div className={classes.nameField}>Количество:&nbsp;</div>\r\n                                            <div className={classes.counterbtn} onClick={()=>{decrement(idx)}}>-</div>\r\n                                            <div className={classes.value}>{order.count}&nbsp;шт</div>\r\n                                            <div className={classes.counterbtn} onClick={()=>{increment(idx)}}>+</div>\r\n                                        </div>\r\n                                        <div className={classes.row}>\r\n                                            <div className={classes.nameField}>Общая стоимость:&nbsp;</div>\r\n                                            <div className={classes.value}>{order.allPrice}&nbsp;сом</div>\r\n                                        </div>\r\n                                        <br/>\r\n                                    </div>\r\n                                )\r\n                            else\r\n                                return(\r\n                                    <div key={idx} className={classes.column}>\r\n                                        <a href={`/item/${order.item._id}`} target='_blank'>\r\n                                            <div className={classes.row}>\r\n                                                <div className={classes.nameField}>Товар:&nbsp;</div>\r\n                                                <div className={classes.value}>{order.item.name}</div>\r\n                                            </div>\r\n                                        </a>\r\n                                        <div className={classes.row}>\r\n                                            <div className={classes.nameField}>Количество:&nbsp;</div>\r\n                                            <div className={classes.value}>{order.count}&nbsp;шт</div>\r\n                                        </div>\r\n                                        <div className={classes.row}>\r\n                                            <div className={classes.nameField}>Общая стоимость:&nbsp;</div>\r\n                                            <div className={classes.value}>{order.allPrice}&nbsp;сом</div>\r\n                                        </div>\r\n                                        <br/>\r\n                                    </div>\r\n                                )\r\n                        })\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <FormControlLabel\r\n                        disabled={(!['менеджер', 'организация', 'admin'].includes(profile.role)||!['обработка','принят'].includes(element.orders[0].status))}\r\n                        control={\r\n                            <Checkbox\r\n                                checked={taken}\r\n                                onChange={()=>{\r\n                                    setTaken(!taken);\r\n                                }}\r\n                                color='primary'\r\n                            />\r\n                        }\r\n                        label='Заказ принят'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <FormControlLabel\r\n                        disabled={(!['менеджер', 'организация', 'admin', 'экспедитор'].includes(profile.role)||'принят'!==element.orders[0].status)}\r\n                        control={\r\n                            <Checkbox\r\n                                checked={confirmationForwarder}\r\n                                onChange={()=>{\r\n                                    setConfirmationForwarder(!confirmationForwarder);\r\n                                }}\r\n                                color='primary'\r\n                            />\r\n                        }\r\n                        label='Заказ доставлен'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <FormControlLabel\r\n                        disabled={\r\n                            (!['client', 'admin'].includes(profile.role)||'принят'!==element.orders[0].status)||\r\n                            ('экспедитор'===profile.role&&!element.client.user)\r\n                        }\r\n                        control={\r\n                            <Checkbox\r\n                                checked={confirmationClient}\r\n                                onChange={()=>{\r\n                                    setConfirmationClient(!confirmationClient);\r\n                                }}\r\n                                color='primary'\r\n                            />\r\n                        }\r\n                        label='Заказ получен'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <FormControlLabel\r\n                        disabled={(\r\n                            !['client', 'организация', 'менеджер', 'admin', 'агент'].includes(profile.role)||!['отмена','обработка'].includes(element.orders[0].status)\r\n                        )}\r\n                        control={\r\n                            <Checkbox\r\n                                checked={\r\n                                    element.cancelClient!=undefined||element.cancelForwarder!=undefined?\r\n                                        element.cancelClient!=undefined?\r\n                                            cancelClient\r\n                                            :\r\n                                            cancelForwarder\r\n                                        :\r\n                                        'client'===profile.role?\r\n                                            cancelClient\r\n                                            :\r\n                                            cancelForwarder\r\n                                }\r\n                                onChange={()=>{\r\n                                    if('client'===profile.role) setCancelClient(!cancelClient);\r\n                                    else if('admin'===profile.role){\r\n                                        if(element.cancelClient!=undefined)\r\n                                            setCancelClient(!cancelClient)\r\n                                        else\r\n                                            setCancelForwarder(!cancelForwarder)\r\n                                    }\r\n                                    else setCancelForwarder(!cancelForwarder);\r\n                                }}\r\n                                color='secondary'\r\n                            />\r\n                        }\r\n                        label={\r\n                            !element.cancelClient&&!element.cancelForwarder?\r\n                                'Заказ отменен'\r\n                                :\r\n                                `Заказ отменен. Востановить заказ до ${element.cancelClient?pdDDMMYYHHMMCancel(new Date(element.cancelClient)):pdDDMMYYHHMMCancel(new Date(element.cancelForwarder))}`\r\n                        }\r\n                    />\r\n                </div>\r\n                {/*\r\n                    {\r\n                        (\r\n                            (profile.role==='client'&&'принят'===element.orders[0].status&&!element.confirmationClient)\r\n                            ||\r\n                            (['менеджер', 'организация'].includes(profile.role)&&'принят'===element.orders[0].status&&!element.confirmationForwarder)\r\n                            ||\r\n                            profile.role==='admin'\r\n                        )?\r\n                            <Button variant='contained' color='primary' onClick={()=>{\r\n                                const action = async() => {\r\n                                    let invoices = (await approveOrders({route: route, invoices: [element._id]})).invoices\r\n                                    if(setList)\r\n                                        setList(invoices)\r\n                                    if(getInvoices)\r\n                                        getInvoices()\r\n                                }\r\n                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            }} className={classes.button}>\r\n                                Заказ выполнен\r\n                            </Button>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        (profile.role==='client'&&element.orders[0].status==='обработка')\r\n                        ||(['менеджер', 'организация'].includes(profile.role)&&['обработка', 'принят'].includes(element.orders[0].status)&&!element.confirmationForwarder\r\n                        ||profile.role==='admin')?\r\n                            <Button variant='contained' color='primary' onClick={()=>{\r\n                                let _id = element.orders.map(order=>order._id)\r\n                                const action = async() => {\r\n                                    let invoices = (await cancelOrders({_id: _id, invoice: element._id})).invoices\r\n                                    if(setList)\r\n                                        setList(invoices)\r\n                                    if(getInvoices)\r\n                                        getInvoices()\r\n                                }\r\n                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            }} className={classes.button}>\r\n                                Отменить заказ\r\n                            </Button>\r\n                            :\r\n                            null\r\n                    }\r\n                    */}\r\n                    <div>\r\n                {\r\n                    ((profile.role==='client'||['менеджер', 'организация', 'агент', 'экспедитор'].includes(profile.role)||profile.role==='admin'))?\r\n                        <Button variant='contained' color='primary' onClick={()=>{\r\n                            const action = async() => {\r\n\r\n                                console.log(element._id)\r\n                                let invoice = {invoice: element._id}\r\n                                if(element.taken!==taken)invoice.taken=taken\r\n                                if(element.confirmationClient!==confirmationClient)invoice.confirmationClient=confirmationClient\r\n                                if(element.confirmationForwarder!==confirmationForwarder)invoice.confirmationForwarder=confirmationForwarder\r\n                                if(element.cancelClient!==cancelClient)invoice.cancelClient=cancelClient\r\n                                if(element.cancelForwarder!==cancelForwarder)invoice.cancelForwarder=cancelForwarder\r\n                                await setInvoice(invoice)\r\n\r\n                                let sendOrders;\r\n                                if(element.orders[0].status!=='обработка') sendOrders = []\r\n                                else sendOrders = orders.map((order)=>{return {_id: order._id, count: order.count, allPrice: order.allPrice, status: order.status}})\r\n\r\n                                let invoices = (await setOrder({orders: sendOrders, invoice: element._id})).invoices\r\n                                if(setList)\r\n                                    setList(invoices)\r\n                                if(getInvoices)\r\n                                    getInvoices()\r\n                                showMiniDialog(false);\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                        }} className={classes.button}>\r\n                            Сохранить\r\n                        </Button>\r\n                        :\r\n                        null\r\n                }\r\n                    <Button variant='contained' color='secondary' onClick={()=>{showMiniDialog(false);}} className={classes.button}>\r\n                        Закрыть\r\n                    </Button>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        mini_dialog: state.mini_dialog,\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nOrder.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Order));","import Head from 'next/head';\r\nimport React, { useState, useEffect } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport { getOrganizations } from '../../src/gql/organization'\r\nimport { getOrdersForRouting } from '../../src/gql/order'\r\nimport { getRoute, setRoute, deleteRoute, addRoute } from '../../src/gql/route'\r\nimport { getEcspeditors } from '../../src/gql/employment'\r\nimport routeStyle from '../../src/styleMUI/route/route'\r\nimport { useRouter } from 'next/router'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CardOrder from '../../components/order/CardOrder';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Router from 'next/router'\r\nimport { pdDatePicker } from '../../src/lib'\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\nimport GeoRoute from '../../components/dialog/GeoRoute'\r\nimport { urlMain } from '../../redux/constants/other'\r\n\r\n\r\nconst Route = React.memo((props) => {\r\n    const { profile } = props.user;\r\n    const classes = routeStyle();\r\n    const { data } = props;\r\n    const router = useRouter()\r\n    const { isMobileApp } = props.app;\r\n    let [dateStart, setDateStart] = useState(data.route?pdDatePicker(new Date(data.route.dateStart)):null);\r\n    let [dateEnd, setDateEnd] = useState(data.route?data.route.dateEnd:null);\r\n    let [employment, setEmployment] = useState(data.route?data.route.employment:{});\r\n    let handleEmployment =  (event) => {\r\n        setEmployment({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [organization, setOrganization] = useState(router.query.id==='new'||!data.route?{}:data.route.employment.organization);\r\n    let handleOrganization =  (event) => {\r\n        setOrganization({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [invoices, setInvoices] = useState(data.route?data.route.invoices:[]);\r\n    let [cancelInvoices, setCancelInvoices] = useState([]);\r\n    let [allInvoices, setAllInvoices] = useState([]);\r\n    let [unselectedInvoices, setUnselectedInvoices] = useState([]);\r\n    let [selectType, setSelectType] = useState('Все');\r\n    let [employments, setEmployments] = useState([]);\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(data.route) {\r\n                if (['организация', 'менеджер'].includes(profile.role) && router.query.id === 'new') {\r\n                    let organization = data.organizations.filter(element => element._id === profile.organization)\r\n                    setOrganization(organization[0])\r\n                }\r\n            }\r\n        })()\r\n    },[profile])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(data.route&&['организация', 'менеджер', 'admin'].includes(profile.role)) {\r\n                setUnselectedInvoices((await getOrdersForRouting()).invoicesForRouting)\r\n            }\r\n        })()\r\n    },[])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(data.route) {\r\n                if (router.query.id === 'new')\r\n                    setEmployment({})\r\n                setEmployments((await getEcspeditors({_id: organization._id})).ecspeditors)\r\n            }\r\n        })()\r\n    },[organization])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(data.route) {\r\n                let allInvoices\r\n                if (selectType == 'Все')\r\n                    allInvoices = [...invoices, ...unselectedInvoices]\r\n                else if (selectType == 'Свободные')\r\n                    allInvoices = [...unselectedInvoices]\r\n                else if (selectType == 'Выбраные')\r\n                    allInvoices = [...invoices]\r\n                allInvoices.sort((a, b) => {\r\n                    a.createdAt = new Date(a.createdAt)\r\n                    b.createdAt = new Date(b.createdAt)\r\n                    if (a.createdAt > b.createdAt) return -1;\r\n                    if (a.createdAt < b.createdAt) return 1;\r\n                    return 0;\r\n                })\r\n                setAllInvoices([...allInvoices])\r\n            }\r\n        })()\r\n    },[selectType, unselectedInvoices, invoices])\r\n    const statusColor = {\r\n        'создан': 'orange',\r\n        'выполняется': 'blue',\r\n        'выполнен': 'green',\r\n    }\r\n    let getInvoices = async ()=>{\r\n        if(data.route){\r\n            setUnselectedInvoices((await getOrdersForRouting()).invoicesForRouting)\r\n            setCancelInvoices([])\r\n            setInvoices((await getRoute({_id: data.route._id})).route.invoices)\r\n        }\r\n    }\r\n    const breakGeoRoute = (invoices.filter((element)=>!element.address[1])).length>0\r\n    return (\r\n        <App pageName={data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'}</title>\r\n                <meta name='description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:title' content={data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'} />\r\n                <meta property='og:description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:type' content='website' />\r\n                <meta property='og:image' content={`${urlMain}/static/512x512.png`} />\r\n                <meta property=\"og:url\" content={`${urlMain}/route/${router.query.id}`} />\r\n                <link rel='canonical' href={`${urlMain}/route/${router.query.id}`}/>\r\n            </Head>\r\n            <Card className={isMobileApp?classes.pageM:classes.pageD}>\r\n                {data.route?\r\n                    <>\r\n                    {router.query.id==='new'?null:<div className={classes.status} style={{background: statusColor[data.route.status]}}>{data.route.status}</div>}\r\n                    <CardContent className={classes.column}>\r\n                        {data.route?\r\n                            <>\r\n                            {router.query.id==='new'?null:<div className={classes.number}>{data.route.number}</div>}\r\n                            {(router.query.id==='new'||data.route.status==='создан')&&profile.role==='admin'?\r\n                                <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                    <InputLabel>Организация</InputLabel>\r\n                                    <Select value={organization._id}onChange={handleOrganization}>\r\n                                        {data.organizations.map((element)=>\r\n                                            <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                        )}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                :\r\n                                <TextField\r\n                                    label='Организация'\r\n                                    value={organization.name}\r\n                                    className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                    inputProps={{\r\n                                        'aria-label': 'description',\r\n                                        readOnly: true,\r\n                                    }}\r\n                                />\r\n                            }\r\n                            <br/>\r\n                            {\r\n                                (router.query.id==='new'||data.route.status==='создан')&&['admin', 'организация', 'менеджер'].includes(profile.role)?\r\n                                    <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                        <InputLabel>Экспедитор</InputLabel>\r\n                                        <Select value={employment._id} onChange={handleEmployment}>\r\n                                            {employments.map((element)=>\r\n                                                <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                            )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    :\r\n                                    <TextField\r\n                                        label='Экспедитор'\r\n                                        value={employment.name}\r\n                                        className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                        inputProps={{\r\n                                            'aria-label': 'description',\r\n                                            readOnly: true,\r\n                                        }}\r\n                                    />\r\n                            }\r\n                            <br/>\r\n                            <TextField\r\n                                className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                label='Дата'\r\n                                type='date'\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                value={dateStart}\r\n                                inputProps={{\r\n                                    'aria-label': 'description',\r\n                                    readOnly: !(router.query.id==='new'||data.route.status==='создан'),\r\n                                }}\r\n                                onChange={ event => setDateStart(event.target.value) }\r\n                            />\r\n                            <br/>\r\n                            <div style={{color: breakGeoRoute?'red':'#ffb300'}} onClick={()=>{\r\n                                setMiniDialog('Маршрут', <GeoRoute invoices={invoices}/>, true)\r\n                                showMiniDialog(true)\r\n                            }} className={classes.geo}>{breakGeoRoute?'Маршрут неполный':'Просмотреть маршрут'}</div>\r\n                            <br/>\r\n                            <div style={{ justifyContent: 'center' }} className={classes.row}>\r\n                                <div style={{background: selectType==='Все'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Все')}} className={classes.selectType}>\r\n                                    Все\r\n                                </div>\r\n                                <div style={{background: selectType==='Свободные'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Свободные')}} className={classes.selectType}>\r\n                                    Свободные\r\n                                </div>\r\n                                <div style={{background: selectType==='Выбраные'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Выбраные')}} className={classes.selectType}>\r\n                                    Выбраные\r\n                                </div>\r\n                            </div>\r\n                            <br/>\r\n                            <div className={classes.listInvoices} style={{zoom: isMobileApp?0.83:1}}>\r\n                                {allInvoices?allInvoices.map((element, idx)=> {\r\n                                    return (\r\n                                        <div key={idx} className={classes.row}>\r\n                                            {['обработка', 'принят'].includes(element.orders[0].status)/*&&!element.confirmationForwarder*/?\r\n                                                <Checkbox checked={invoices.includes(element)} onChange={() => {\r\n                                                    if (!invoices.includes(element)) {\r\n                                                        invoices.push(element)\r\n                                                        unselectedInvoices.splice(unselectedInvoices.indexOf(element), 1)\r\n                                                        cancelInvoices.splice(cancelInvoices.indexOf(element), 1)\r\n                                                    } else {\r\n                                                        invoices.splice(invoices.indexOf(element), 1)\r\n                                                        unselectedInvoices.push(element)\r\n                                                        cancelInvoices.push(element)\r\n                                                    }\r\n                                                    setInvoices([...invoices])\r\n                                                }}\r\n                                                />:null}\r\n                                            <CardOrder getInvoices={getInvoices} route={data.route._id} element={element}/>\r\n                                        </div>\r\n                                    )\r\n                                }):null}\r\n                            </div>\r\n                            <div className={isMobileApp?classes.bottomRouteM:classes.bottomRouteD}>\r\n                                {\r\n                                    router.query.id==='new'?\r\n                                        <Button onClick={async()=>{\r\n                                            if (dateStart&&employment._id&&organization._id) {\r\n                                                const action = async() => {\r\n                                                    if (employment._id!==undefined&&dateStart) {\r\n                                                        invoices = invoices.map(element=>element._id)\r\n                                                        await addRoute({\r\n                                                            invoices: invoices,\r\n                                                            employment: employment._id,\r\n                                                            dateStart: new Date(dateStart)\r\n                                                        })\r\n                                                        Router.push('/routes')\r\n                                                    }\r\n                                                }\r\n                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                showMiniDialog(true)\r\n                                            } else {\r\n                                                showSnackBar('Заполните все поля')\r\n                                            }\r\n                                        }} size='small' color='primary'>\r\n                                            Добавить\r\n                                        </Button>\r\n                                        :\r\n                                        <>\r\n                                        <Button onClick={async()=>{\r\n                                            const action = async() => {\r\n\r\n                                                let editElement = {_id: data.route._id}\r\n                                                if(employment._id!==data.route.employment._id&&data.route.status==='создан')editElement.employment = employment._id;\r\n                                                if(dateStart&&data.route.status==='создан')editElement.dateStart = new Date(dateStart);\r\n                                                editElement.invoices = invoices.map(element=>element._id);\r\n                                                if(cancelInvoices.length>0)editElement.cancelInvoices = cancelInvoices.map(element=>element._id);\r\n                                                await setRoute(editElement)\r\n                                                getInvoices()\r\n                                            }\r\n                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                            showMiniDialog(true)\r\n                                        }} size='small' color='primary'>\r\n                                            Сохранить\r\n                                        </Button>\r\n                                        {['организация', 'менеджер', 'admin'].includes(profile.role)&&data.route.status==='создан'?\r\n                                            <>\r\n                                            <Button onClick={async()=>{\r\n                                                const action = async() => {\r\n                                                    await deleteRoute([data.route._id])\r\n                                                    Router.push('/routes')\r\n                                                }\r\n                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                showMiniDialog(true)\r\n                                            }} size='small' color='primary'>\r\n                                                Удалить\r\n                                            </Button>\r\n                                            </>\r\n                                            :\r\n                                            null\r\n                                        }\r\n                                        </>\r\n                                }\r\n                            </div>\r\n                            </>\r\n                            :'Ничего не найдено'}\r\n                        <br/>\r\n                    </CardContent>\r\n                    </>\r\n                    :\r\n                    <CardContent className={classes.column}>\r\n                        Ничего не найдено\r\n                    </CardContent>\r\n                }\r\n            </Card>\r\n        </App>\r\n    )\r\n})\r\n\r\nRoute.getInitialProps = async function(ctx) {\r\n    if(!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role))\r\n        if(ctx.res) {\r\n            ctx.res.writeHead(302, {\r\n                Location: '/'\r\n            })\r\n            ctx.res.end()\r\n        } else\r\n                Router.push('/')\r\n    return {\r\n        data: {\r\n            ...ctx.query.id!=='new'?await getRoute({_id: ctx.query.id}):{route: {invoices: [], employment: {}, status: '', dateStart: null, dateEnd: null, number: ''}},\r\n            ...await getOrganizations({search: '', sort: 'name', filter: ''}),\r\n        }\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        app: state.app,\r\n        user: state.user,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Route);"],"mappings":"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","sourceRoot":""}