{"version":3,"file":"static/webpack/static\\development\\pages\\ads.js.cfabcbd9e62cc56b100d.hot-update.js","sources":["webpack:///./src/gql/ads.js"],"sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\nimport { readDataGQL } from './index';\r\n\r\nexport const getAds = async()=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                query: gql`\r\n                    query {\r\n                        ads {\r\n                            _id\r\n                            image\r\n                            url\r\n                            title\r\n                            createdAt\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getAdss = async({search: search, sort: sort, filter: filter})=>{\r\n    try{\r\n        /*const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        adss(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            image\r\n                            url\r\n                            title\r\n                            createdAt\r\n                          }\r\n                          sortAds {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterAds {\r\n                           name\r\n                           value\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data*/\r\n        let res =  await readDataGQL(\r\n            {search: search, sort: sort, filter: filter},\r\n            gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        adss(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            image\r\n                            url\r\n                            title\r\n                            createdAt\r\n                          }\r\n                    }`\r\n            )\r\n        console.log(res)\r\n        return res\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteAds = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteAds(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getAdss(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addAds = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($image: Upload!, $url: String!, $title: String!) {\r\n                        addAds(image: $image, url: $url, title: $title) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getAdss(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setAds = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $image: Upload, $url: String, $title: String) {\r\n                        setAds(_id: $_id, image: $image, url: $url, title: $title) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getAdss(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAKA;AADA;AACA;AALA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAkBA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AACA;AA5BA;AA0BA;AAaA;AAvCA;AACA;AADA;AAAA;AAAA;AA0CA;AACA;AA3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA8CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAIA;AAAA;AAAA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAIA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAWA;AAXA;AACA;AADA;AAAA;AAAA;AAcA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAIA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAWA;AAXA;AACA;AADA;AAAA;AAAA;AAcA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}