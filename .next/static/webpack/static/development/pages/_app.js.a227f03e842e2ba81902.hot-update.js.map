{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.a227f03e842e2ba81902.hot-update.js","sources":["webpack:///./pages/_app.js","webpack:///./redux/actions/user.js","webpack:///./src/getClientGQL.js"],"sourcesContent":["import React from 'react';\r\nimport App  from 'next/app';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport theme from '../src/theme';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport configureStore from '../redux/configureStore'\r\nimport { Provider } from 'react-redux';\r\nimport { SingletonApolloClient } from '../src/singleton/client'\r\nimport { SingletonStore } from '../src/singleton/store'\r\nimport { getProfile } from '../redux/actions/user'\r\nimport { checkMobile, checkAuth } from '../src/lib'\r\nimport { getClientGQL } from '../src/getClientGQL'\r\n\r\nexport default withRedux(configureStore, { debug: false })(\r\n    class MyApp extends App {\r\n        static componentDidMount() {\r\n            // Remove the server-side injected CSS.\r\n            const jssStyles = document.querySelector('#jss-server-side');\r\n            if (jssStyles) {\r\n                jssStyles.parentNode.removeChild(jssStyles);\r\n            }\r\n        }\r\n        static async getInitialProps({ Component, ctx }) {\r\n            new SingletonApolloClient(ctx.req)\r\n            if(ctx.req){\r\n                ctx.store.getState().app.isMobileApp = checkMobile(ctx.req.headers['user-agent'])\r\n                ctx.store.getState().user.authenticated = checkAuth(ctx.req.headers.cookie)\r\n                console.log(ctx.req.headers.cookie)\r\n                if(ctx.store.getState().user.authenticated) {\r\n                    ctx.store.getState().user.profile = await getProfile(await getClientGQL())\r\n                }\r\n            }\r\n            ctx.store.getState().app.search = ''\r\n            ctx.store.getState().app.sort = '-createdAt'\r\n            ctx.store.getState().app.filter = ''\r\n            ctx.store.getState().app.date = ''\r\n            ctx.store.getState().app.load = false\r\n            ctx.store.getState().mini_dialog.show = false\r\n            ctx.store.getState().pagination.work = false\r\n            return {\r\n                pageProps: {\r\n                    ...(Component.getInitialProps\r\n                        ? await Component.getInitialProps(ctx)\r\n                        : {}),\r\n                }\r\n            };\r\n        }\r\n\r\n        render() {\r\n            const { Component, pageProps, store } = this.props;\r\n            new SingletonStore(store)\r\n            return (\r\n                <React.Fragment>\r\n                    <ThemeProvider theme={theme}>\r\n                        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n                        <CssBaseline />\r\n                        <Provider store={store}>\r\n                                <Component {...pageProps} />\r\n                        </Provider>\r\n                    </ThemeProvider>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n)\r\n","import {\r\n    AUTHENTICATED,\r\n    UNAUTHENTICATED,\r\n    SET_PROFILE,\r\n    SET_AUTH,\r\n    ERROR_AUTHENTICATED\r\n} from '../constants/user'\r\nimport {\r\n    SHOW_MINI_DIALOG\r\n} from '../constants/mini_dialog'\r\nimport {\r\n    SET_COUNT_BASKET\r\n} from '../constants/app'\r\nimport Cookies from 'js-cookie';\r\nimport { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../../src/singleton/client';\r\nimport Router from 'next/router';\r\n\r\nexport function signup(payload) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient()\r\n            let result = await client.mutate({\r\n                variables: payload,\r\n                mutation : gql`\r\n                    mutation ($login: String!, $password: String!) {\r\n                        signupuser(login: $login, password: $password) {\r\n                           role\r\n                           status\r\n                           login\r\n                           organization\r\n                           _id\r\n                        }\r\n                    }`})\r\n            if(result.data.signupuser.role==='Проверьте данные')\r\n                await dispatch({\r\n                    type: ERROR_AUTHENTICATED,\r\n                    payload: true\r\n                })\r\n            else {\r\n                await dispatch({\r\n                    type: SHOW_MINI_DIALOG,\r\n                    payload: false\r\n                })\r\n                //await Router.push('/')\r\n                /*\r\n                await dispatch({type: AUTHENTICATED});\r\n                await dispatch({\r\n                    type: SET_PROFILE,\r\n                    payload: result.data.signupuser\r\n                })*/\r\n                window.location.reload()\r\n            }\r\n        } catch(error) {\r\n            dispatch({\r\n                type: ERROR_AUTHENTICATED,\r\n                payload: true\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function signin(payload) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient();\r\n            let result = await client.mutate({\r\n                variables: payload,\r\n                mutation : gql`\r\n                    mutation ($login: String!, $password: String!) {\r\n                        signinuser(login: $login, password: $password) {\r\n                           role\r\n                           status\r\n                           login\r\n                           organization\r\n                           _id\r\n                        }\r\n                    }`})\r\n            if(result.data.signinuser.role==='Проверьте данные')\r\n                await dispatch({\r\n                    type: ERROR_AUTHENTICATED,\r\n                    payload: true\r\n                })\r\n            else {\r\n                await dispatch({\r\n                    type: SHOW_MINI_DIALOG,\r\n                    payload: false\r\n                })\r\n                //await Router.push('/')\r\n                window.location.reload()\r\n\r\n                /*await dispatch({type: AUTHENTICATED});\r\n                await dispatch({\r\n                    type: SET_PROFILE,\r\n                    payload: result.data.signinuser\r\n                })*/\r\n            }\r\n        } catch(error) {\r\n            console.error(error)\r\n            await dispatch({\r\n                type: ERROR_AUTHENTICATED,\r\n                payload: true\r\n            })\r\n        }\r\n    };\r\n}\r\n\r\nexport function checkAuthenticated() {\r\n    return async (dispatch) => {\r\n        try {\r\n            if (Cookies.get('jwt')) {\r\n                dispatch ({type: AUTHENTICATED});\r\n            } else {\r\n                dispatch ({type: UNAUTHENTICATED});\r\n            }\r\n        } catch (error) {\r\n            dispatch ({type: UNAUTHENTICATED});\r\n        }\r\n    };\r\n}\r\n\r\nexport function setAuthenticated(auth) {\r\n    return {\r\n        type: SET_AUTH,\r\n        payload: auth\r\n    }\r\n}\r\n\r\nexport function logout(reload) {\r\n    return async (dispatch) => {\r\n        await dispatch({\r\n            type: UNAUTHENTICATED,\r\n        })\r\n        if(reload)\r\n            await Router.push('/')\r\n        await Cookies.remove('jwt');\r\n        await dispatch({\r\n            type: SET_COUNT_BASKET,\r\n            payload: 0\r\n        })\r\n        await dispatch({\r\n            type: SET_PROFILE,\r\n            payload: {}\r\n        })\r\n        //setTimeout(()=>window.location.reload(),100)\r\n\r\n\r\n    }\r\n}\r\n\r\nexport function setProfile() {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient()\r\n            let result = await client\r\n                .query({\r\n                    query: gql`\r\n                    query {\r\n                        getStatus {\r\n                           role\r\n                           status\r\n                           login\r\n                           organization\r\n                           _id\r\n                          }\r\n                    }`\r\n                })\r\n            await dispatch({\r\n                type: SET_PROFILE,\r\n                payload: result.data.getStatus\r\n            })\r\n        } catch(error) {\r\n            console.error(error)\r\n        }\r\n    };\r\n}\r\n\r\nexport async function getProfile(client) {\r\n    try {\r\n        client = client? client : new SingletonApolloClient().getClient()\r\n        let result = await client\r\n            .query({\r\n                query: gql`\r\n                   query {\r\n                       getStatus {\r\n                          role\r\n                          status\r\n                          login\r\n                          organization\r\n                          _id\r\n                         }\r\n                   }`\r\n            })\r\n        console.log(result.data.getStatus)\r\n        return result.data.getStatus\r\n    } catch(error) {\r\n        console.error(error)\r\n    }\r\n}","/* eslint-disable no-extra-boolean-cast */\r\nimport { urlGQL } from '../redux/constants/other';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport fetch from 'node-fetch';\r\nimport { getJWT } from './lib'\r\nimport { setContext } from 'apollo-link-context';\r\nimport { ApolloLink  } from 'apollo-link';\r\nimport { createUploadLink } from 'apollo-upload-client'\r\n\r\nexport const getClientGQL = (req) => {\r\n        const uploadLink = createUploadLink({\r\n            uri: urlGQL,\r\n            fetch: fetch,\r\n            credentials: 'include'\r\n        });\r\n        const authLink = setContext((_, { headers }) => {\r\n            return {\r\n                headers: {\r\n                    ...headers,\r\n                    authorization: getJWT(req?req.headers.cookie:document.cookie) ? `Bearer ${getJWT(req?req.headers.cookie:document.cookie)}` : '',\r\n                }\r\n            }\r\n        });\r\n        const link = ApolloLink.from([\r\n            authLink,\r\n            uploadLink\r\n        ]);\r\n        const client = new ApolloClient({\r\n            ssrMode: true,\r\n            link: link,\r\n            cache: new InMemoryCache(),\r\n            defaultOptions: {\r\n                watchQuery: {\r\n                    fetchPolicy: 'cache-and-network',\r\n                    errorPolicy: 'ignore',\r\n                },\r\n                query: {\r\n                    fetchPolicy: 'network-only',\r\n                    errorPolicy: 'all',\r\n                },\r\n                mutate: {\r\n                    errorPolicy: 'all',\r\n                },\r\n            },\r\n\r\n        });\r\n        return client\r\n    }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAmCA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAjDA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAgBA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA2BA;AA3BA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAOA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAIA;AACA;AAFA;AACA;AAJA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAiBA;AACA;AAFA;AACA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AACA;AAFA;AACA;AAtBA;AAyBA;AACA;AAAA;;;;;;AAMA;AACA;AAjCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAmCA;AACA;AACA;AAFA;AACA;AApCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAyCA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAIA;AACA;AAFA;AACA;AAJA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAiBA;AACA;AAFA;AACA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AACA;AAFA;AACA;AAtBA;AAyBA;AACA;AAEA;;;;;;AA5BA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAmCA;AAnCA;AAAA;AAqCA;AACA;AAFA;AACA;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AA0CA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AAFA;AACA;AARA;AAAA;AAAA;AAYA;AACA;AAFA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAKA;AADA;AACA;AALA;AAGA;AAHA;AAAA;AAiBA;AACA;AAFA;AACA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAwBA;AAEA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAKA;AADA;AACA;AALA;AAGA;AAaA;AAhBA;AACA;AADA;AAAA;AAAA;AAmBA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AATA;AAJA;AAmBA;AACA;;;;A","sourceRoot":""}