{"version":3,"file":"static/webpack/static\\development\\pages\\client\\[id].js.217da05f132275ad4ebb.hot-update.js","sources":["webpack:///./pages/client/.js"],"sourcesContent":["import Head from 'next/head';\r\nimport React, { useState } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport { getClient } from '../../src/gql/client'\r\nimport clientStyle from '../../src/styleMUI/client/client'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport { onoffClient, setClient } from '../../src/gql/client'\r\nimport Add from '@material-ui/icons/Done';\r\nimport Remove from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport { urlMain } from '../../redux/constants/other'\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\nimport Geo from '../../components/dialog/Geo'\r\nimport { useRouter } from 'next/router'\r\nimport { pdDatePicker } from '../../src/lib'\r\n\r\nconst Client = React.memo((props) => {\r\n    const { profile } = props.user;\r\n    const classes = clientStyle();\r\n    const { data } = props;\r\n    const { isMobileApp } = props.app;\r\n    let [status, setStatus] = useState(data.client!==null?data.client.user.status:'');\r\n    let [name, setName] = useState(data.client!==null?data.client.name:'');\r\n    let [email, setEmail] = useState(data.client!==null?data.client.email:'');\r\n    let [phone, setPhone] = useState(data.client!==null?data.client.user.phone:'');\r\n\r\n    //привести к геолокации\r\n    if(!Array.isArray(data.client.address[0])) data.client.address.map((addres)=>[addres])\r\n\r\n    let [address, setAddress] = useState(data.client!==null?data.client.address:[]);\r\n    let [birthday, setBirthday] = useState(data.route?pdDatePicker(new Date(data.client.birthday)):null);\r\n\r\n    let [newAddress, setNewAddress] = useState('');\r\n    let addAddress = ()=>{\r\n        address = [...address, [newAddress]]\r\n        setAddress(address)\r\n        setNewAddress('')\r\n    };\r\n    let editAddress = (event, idx)=>{\r\n        address[idx][0] = event.target.value\r\n        setAddress([...address])\r\n    };\r\n    let deleteAddress = (idx)=>{\r\n        address.splice(idx, 1);\r\n        setAddress([...address])\r\n    };\r\n    let setAddressGeo = (geo, idx)=>{\r\n        address[idx][1] = geo\r\n        setAddress([...address])\r\n    };\r\n\r\n    let [info, setInfo] = useState(data.client!==null?data.client.info:'');\r\n    let [preview, setPreview] = useState(data.client!==null?data.client.image:'');\r\n    let [image, setImage] = useState(undefined);\r\n    let handleChangeImage = ((event) => {\r\n        setImage(event.target.files[0])\r\n        setPreview(URL.createObjectURL(event.target.files[0]))\r\n    })\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { logout } = props.userActions;\r\n    let [newPass, setNewPass] = useState('');\r\n    let handleNewPass =  (event) => {\r\n        setNewPass(event.target.value)\r\n    };\r\n    let [hide, setHide] = useState('password');\r\n    let handleHide =  () => {\r\n        setHide(!hide)\r\n    };\r\n    const router = useRouter()\r\n    return (\r\n        <App filters={data.filterSubCategory} sorts={data.sortSubCategory} pageName={data.client!==null?data.client.name:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.client!==null?data.client.name:'Ничего не найдено'}</title>\r\n                <meta name='description' content={info}/>\r\n                <meta property='og:title' content={data.client!==null?data.client.name:'Ничего не найдено'} />\r\n                <meta property='og:description' content={info} />\r\n                <meta property='og:type' content='website' />\r\n                <meta property='og:image' content={preview} />\r\n                <meta property=\"og:url\" content={`${urlMain}/client/${router.query.id}`} />\r\n                <link rel='canonical' href={`${urlMain}/client/${router.query.id}`}/>\r\n            </Head>\r\n            <Card className={classes.page}>\r\n                <CardContent className={isMobileApp?classes.column:classes.row} style={isMobileApp?{}:{justifyContent: 'start', alignItems: 'flex-start'}}>\r\n                    {data.client!==null?\r\n                            profile.role==='admin'||profile._id===data.client.user._id?\r\n                                <>\r\n                                <label htmlFor='contained-button-file'>\r\n                                    <img\r\n                                        className={classes.media}\r\n                                        src={preview}\r\n                                        alt={'Добавить'}\r\n                                    />\r\n                                </label>\r\n                                <div>\r\n                                        <TextField\r\n                                            label='Имя'\r\n                                            value={name}\r\n                                            className={classes.input}\r\n                                            onChange={(event)=>{setName(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        <Input\r\n                                            placeholder='Новый пароль'\r\n                                            type={hide ? 'password' : 'text' }\r\n                                            value={newPass}\r\n                                            onChange={handleNewPass}\r\n                                            className={classes.input}\r\n                                            endAdornment={\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton aria-label=\"Toggle password visibility\" onClick={handleHide}>\r\n                                                        {hide ? <VisibilityOff />:<Visibility />  }\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            }\r\n                                        />\r\n                                    <TextField\r\n                                        className={classes.input}\r\n                                        label='Дата'\r\n                                        type='date'\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        value={birthday}\r\n                                        inputProps={{\r\n                                            'aria-label': 'description',\r\n                                        }}\r\n                                        onChange={ event => setBirthday(event.target.value) }\r\n                                    />\r\n\r\n                                    <FormControl className={classes.input}>\r\n                                        <InputLabel>Добавить адрес</InputLabel>\r\n                                        <Input\r\n                                            value={newAddress}\r\n                                            onChange={(event)=>{setNewAddress(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                            endAdornment={\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        onClick={()=>{\r\n                                                            addAddress()\r\n                                                        }}\r\n                                                        aria-label='toggle password visibility'\r\n                                                    >\r\n                                                        <Add/>\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            }\r\n                                    />\r\n                                    </FormControl>\r\n                                    {address?address.map((element, idx)=>\r\n                                        <>\r\n                                        <FormControl key={idx} className={classes.input}>\r\n                                            <InputLabel>Адрес</InputLabel>\r\n                                            <Input\r\n                                                placeholder='Адрес'\r\n                                                value={element[0]}\r\n                                                className={classes.input}\r\n                                                onChange={(event)=>{editAddress(event, idx)}}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                }}\r\n                                                endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                            onClick={()=>{\r\n                                                                deleteAddress(idx)\r\n                                                            }}\r\n                                                            aria-label='toggle password visibility'\r\n                                                        >\r\n                                                            <Remove/>\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n                                        </FormControl>\r\n                                        <div className={classes.geo} style={{color: element[1]?'#ffb300':'red'}} onClick={()=>{\r\n                                            setMiniDialog('Геолокация', <Geo change={true} geo={element[1]} setAddressGeo={setAddressGeo} idx={idx}/>, true)\r\n                                            showMiniDialog(true)\r\n                                        }}>\r\n                                            {\r\n                                                element[1]?\r\n                                                    'Изменить геолокацию'\r\n                                                    :\r\n                                                    'Задайте геолокацию'\r\n                                            }\r\n                                        </div>\r\n                                        </>\r\n                                    ):null}\r\n\r\n                                    <TextField\r\n                                        label='email'\r\n                                        value={email}\r\n                                        className={classes.input}\r\n                                        onChange={(event)=>{setEmail(event.target.value)}}\r\n                                        inputProps={{\r\n                                            'aria-label': 'description',\r\n                                        }}\r\n                                    />\r\n                                    <TextField\r\n                                        label='Телефон. Формат: +996555780861'\r\n                                        value={phone}\r\n                                        className={classes.input}\r\n                                        onChange={(event)=>{setPhone(event.target.value)}}\r\n                                        inputProps={{\r\n                                            'aria-label': 'description',\r\n                                        }}\r\n                                    />\r\n                                    <TextField\r\n                                        multiline={true}\r\n                                        label='Информация'\r\n                                        value={info}\r\n                                        className={classes.input}\r\n                                        onChange={(event)=>{setInfo(event.target.value)}}\r\n                                        inputProps={{\r\n                                            'aria-label': 'description',\r\n                                        }}\r\n                                    />\r\n                                    <div className={classes.row}>\r\n                                        <Button onClick={async()=>{\r\n                                            let editElement = {_id: data.client.user._id}\r\n                                            if(image!==undefined)editElement.image = image\r\n                                            if(name.length>0&&name!==data.client.name)editElement.name = name\r\n                                            if(address.length>0&&address!==data.client.address)editElement.address = address\r\n                                            if(email.length>0&&email!==data.client.email)editElement.email = email\r\n                                            if(phone.length>0&&phone!==data.client.phone)editElement.phone = phone\r\n                                            if(info.length>0&&info!==data.client.info)editElement.info = info\r\n                                            if(birthday&&birthday!==data.client.birthday)editElement.birthday = birthday\r\n                                            if(newPass.length>0)editElement.newPass = newPass\r\n                                            const action = async() => {\r\n                                                await setClient(editElement)\r\n                                            }\r\n                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                            showMiniDialog(true)\r\n                                        }} size='small' color='primary'>\r\n                                            Сохранить\r\n                                        </Button>\r\n                                        {profile.role==='admin'?\r\n                                            <Button onClick={async()=>{\r\n                                                const action = async() => {\r\n                                                    await onoffClient([data.client._id])\r\n                                                    setStatus(status==='active'?'deactive':'active')\r\n                                                }\r\n                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                showMiniDialog(true)\r\n                                            }} size='small' color='primary'>\r\n                                                {status==='active'?'Отключить':'Включить'}\r\n                                            </Button>\r\n                                            :\r\n                                            <Button onClick={()=>{\r\n                                                const action = async() => {\r\n                                                    logout(true)\r\n                                                }\r\n                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                showMiniDialog(true)\r\n                                            }} size='small' color='primary'>\r\n                                                Выйти\r\n                                            </Button>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                                </>\r\n                                :\r\n                                <>\r\n                                <img\r\n                                    className={classes.media}\r\n                                    src={preview}\r\n                                    alt={name}\r\n                                />\r\n                                <div>\r\n                                    <div className={classes.name}>\r\n                                        {name}\r\n                                    </div>\r\n                                    <div className={classes.row}>\r\n                                        <div className={classes.nameField}>\r\n                                            Адрес:&nbsp;\r\n                                        </div>\r\n                                        <div className={classes.column}>\r\n                                            {address?address.map((element, idx)=>\r\n                                                <>\r\n                                                <div className={classes.value} key={idx}>\r\n                                                    {element[0]}\r\n                                                </div>\r\n                                                <div className={classes.geo} style={{color: element[1]?'#ffb300':'red'}} onClick={()=>{\r\n                                                    setMiniDialog('Геолокация', <Geo geo={element[1]}/>, true)\r\n                                                    showMiniDialog(true)\r\n                                                }}>\r\n                                                    {\r\n                                                        element[1]?\r\n                                                            'Посмотреть геолокацию'\r\n                                                            :\r\n                                                            'Геолокация не задана'\r\n                                                    }\r\n                                                </div>\r\n                                                </>\r\n                                            ):null}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={classes.row}>\r\n                                        <div className={classes.nameField}>\r\n                                            E-mail:&nbsp;\r\n                                        </div>\r\n                                        <div className={classes.value}>\r\n                                            {email}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={classes.row}>\r\n                                        <div className={classes.nameField}>\r\n                                            Телефон:&nbsp;\r\n                                        </div>\r\n                                        <div className={classes.value}>\r\n                                            {phone}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={classes.info}>\r\n                                        {info}\r\n                                    </div>\r\n                                </div>\r\n                                </>\r\n                            :\r\n                            'Ничего не найдено'\r\n                            }\r\n                        </CardContent>\r\n                </Card>\r\n            <input\r\n                accept='image/*'\r\n                style={{ display: 'none' }}\r\n                id='contained-button-file'\r\n                type='file'\r\n                onChange={handleChangeImage}\r\n            />\r\n        </App>\r\n    )\r\n})\r\n\r\nClient.getInitialProps = async function(ctx) {\r\n    return {\r\n        data: await getClient({_id: ctx.query.id})\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);"],"mappings":"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","sourceRoot":""}