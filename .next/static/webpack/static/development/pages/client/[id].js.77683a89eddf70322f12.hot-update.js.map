{"version":3,"file":"static/webpack/static\\development\\pages\\client\\[id].js.77683a89eddf70322f12.hot-update.js","sources":["webpack:///./components/dialog/Geo.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport dialogContentStyle from '../../src/styleMUI/dialogContent'\r\nimport { Map, YMaps, Placemark } from 'react-yandex-maps';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport GpsFixed from '@material-ui/icons/GpsFixed';\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\n\r\nconst Geo =  React.memo(\r\n    (props) =>{\r\n        const { showSnackBar } = props.snackbarActions;\r\n        const { isMobileApp } = props.app;\r\n        const { showMiniDialog, setMiniDialog } = props.mini_dialogActions;\r\n        const { classes, geo, name } = props;\r\n        const width = isMobileApp? (window.innerWidth-126) : 500;\r\n        let [newGeo, setNewGeo] = useState(geo?geo:'42.8700000, 74.5900000');\r\n        let getGeo = () => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition((position)=>{\r\n                    setNewGeo(position.coords.latitude+', '+position.coords.longitude)\r\n                });\r\n            } else {\r\n                showSnackBar('Геолокация не поддерживается')\r\n            }\r\n        }\r\n        let dragend = (e) => {\r\n            let geo = e.get('target').geometry.getCoordinates()\r\n            setNewGeo(geo[0]+', '+geo[1])\r\n        }\r\n        console.log(newGeo)\r\n        return (\r\n            <YMaps>\r\n                <div className={classes.column} style={{width: width}}>\r\n                    <Map height={window.innerHeight-128} width={window.innerWidth-60} defaultState={{ center: [42.8700000, 74.5900000], zoom: 12 }} >\r\n                        <Placemark\r\n                            onDragEnd={dragend}\r\n                            options={{draggable: true, iconColor: '#ffb300'}} properties={{iconCaption: name}} geometry={newGeo.split(', ')} />\r\n                    </Map>\r\n                </div>\r\n                <Fab color='primary' aria-label='Найти геолокацию' className={classes.fab} onClick={getGeo}>\r\n                    <GpsFixed/>\r\n                </Fab>\r\n            </YMaps>\r\n        );\r\n    }\r\n)\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        mini_dialog: state.mini_dialog,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\r\n    }\r\n}\r\n\r\nGeo.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Geo));"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AANA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AADA;AAIA;;;;A","sourceRoot":""}