{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\pages\\\\employment\\\\[id].js\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getEmployment, setEmployments, onoffEmployment, addEmployment, deleteEmployment } from '../../src/gql/employment';\nimport organizationStyle from '../../src/styleMUI/employment/employment';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { useRouter } from 'next/router';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { getOrganizations } from '../../src/gql/organization';\nimport Router from 'next/router';\nimport * as userActions from '../../redux/actions/user';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Confirmation from '../../components/dialog/Confirmation';\nvar Client = React.memo(function (props) {\n  var profile = props.user.profile;\n  var classes = organizationStyle();\n  var data = props.data;\n  var isMobileApp = props.app.isMobileApp;\n  var showSnackBar = props.snackbarActions.showSnackBar;\n\n  var _useState = useState(data.employment !== null ? data.employment.user.status : ''),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  var _useState2 = useState(data.employment !== null ? data.employment.name : ''),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(data.employment !== null ? data.employment.email : ''),\n      email = _useState3[0],\n      setEmail = _useState3[1];\n\n  var _useState4 = useState(data.employment !== null ? data.employment.user.phone : ''),\n      phone = _useState4[0],\n      setPhone = _useState4[1];\n\n  var _useState5 = useState(data.employment !== null ? data.employment.organization : {}),\n      organization = _useState5[0],\n      setOrganization = _useState5[1];\n\n  var handleOrganization = function handleOrganization(event) {\n    setOrganization({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  var _useState6 = useState(data.employment !== null ? data.employment.user.role : ''),\n      role = _useState6[0],\n      setRole = _useState6[1];\n\n  var handleRole = function handleRole(event) {\n    setRole(event.target.value);\n  };\n\n  var _useState7 = useState(''),\n      password = _useState7[0],\n      setPassword = _useState7[1];\n\n  var handlePassword = function handlePassword(event) {\n    setPassword(event.target.value);\n  };\n\n  var _useState8 = useState('password'),\n      hide = _useState8[0],\n      setHide = _useState8[1];\n\n  var handleHide = function handleHide() {\n    setHide(!hide);\n  };\n\n  var _props$mini_dialogAct = props.mini_dialogActions,\n      setMiniDialog = _props$mini_dialogAct.setMiniDialog,\n      showMiniDialog = _props$mini_dialogAct.showMiniDialog;\n  var router = useRouter();\n  var logout = props.userActions.logout;\n  var roles = ['организация', 'менеджер', 'экспедитор'];\n  return __jsx(App, {\n    filters: data.filterSubCategory,\n    sorts: data.sortSubCategory,\n    pageName: data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено')), __jsx(Card, {\n    className: classes.page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(CardActions, {\n    className: isMobileApp ? classes.column : classes.row,\n    style: isMobileApp ? {} : {\n      justifyContent: 'start',\n      alignItems: 'flex-start'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, data.employment !== null ? profile.role === 'admin' || profile.role === 'организация' || profile._id === data.employment.user._id ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    onChange: function onChange(event) {\n      setName(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), __jsx(Input, {\n    placeholder: router.query.id === 'new' ? 'Пароль' : 'Новый пароль',\n    type: hide ? 'password' : 'text',\n    value: password,\n    onChange: handlePassword,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(IconButton, {\n      \"aria-label\": \"Toggle password visibility\",\n      onClick: handleHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, hide ? __jsx(VisibilityOff, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }) : __jsx(Visibility, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"email\",\n    value: email,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    onChange: function onChange(event) {\n      setEmail(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\",\n    value: phone,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    onChange: function onChange(event) {\n      setPhone(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), router.query.id === 'new' && profile.role === 'admin' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Select, {\n    value: organization._id,\n    onChange: handleOrganization,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, data.organizations.map(function (element) {\n    return __jsx(MenuItem, {\n      key: element._id,\n      value: element._id,\n      ola: element.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, element.name);\n  }))) : router.query.id !== 'new' ? __jsx(TextField, {\n    label: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n    value: organization.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }) : null, __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"\\u0420\\u043E\\u043B\\u044C\"), __jsx(Select, {\n    value: role,\n    onChange: handleRole,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: profile._id === data.employment.user._id || !['admin', 'организация'].includes(profile.role)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, roles.map(function (element) {\n    //if(element!=='организация'||profile.role=='admin')\n    return __jsx(MenuItem, {\n      key: element,\n      value: element,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, element);\n  }))), __jsx(\"div\", {\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (name.length > 0 && email.length > 0 && password.length > 0 && phone.length > 0 && role.length > 0 && organization._id !== undefined) {\n                action =\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee() {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return addEmployment({\n                              name: name,\n                              email: email,\n                              phone: phone,\n                              password: password,\n                              role: role,\n                              organization: organization._id\n                            });\n\n                          case 2:\n                            Router.push('/employments');\n\n                          case 3:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function action() {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n\n                setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                  action: action,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 167\n                  },\n                  __self: this\n                }));\n                showMiniDialog(true);\n              } else {\n                showSnackBar('Заполните все поля');\n              }\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    })),\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var editElement, action;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              editElement = {\n                _id: data.employment._id\n              };\n              if (name.length > 0 && name !== data.employment.name) editElement.name = name;\n              if (phone.length > 0 && phone !== data.employment.phone) editElement.phone = phone;\n              if (email.length > 0 && email !== data.employment.email) editElement.email = email;\n              if (password.length > 0) editElement.newPass = password;\n              if (role.length > 0 && role !== data.employment.role) editElement.role = role;\n\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref4 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return setEmployments(editElement);\n\n                        case 2:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function action() {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 187\n                },\n                __self: this\n              }));\n              showMiniDialog(true);\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    })),\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), profile._id !== data.employment.user._id && ['admin', 'организация'].includes(profile.role) ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref6 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee5() {\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return onoffEmployment([data.employment._id]);\n\n                        case 2:\n                          setStatus(status === 'active' ? 'deactive' : 'active');\n\n                        case 3:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function action() {\n                  return _ref6.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 201\n                },\n                __self: this\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    })),\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, status === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref8 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee7() {\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return deleteEmployment([data.employment._id]);\n\n                        case 2:\n                          Router.push('/employments');\n\n                        case 3:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                return function action() {\n                  return _ref8.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 211\n                },\n                __self: this\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    })),\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null, profile._id === data.employment.user._id ? __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee10() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref10 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee9() {\n                  return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          logout();\n\n                        case 1:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }));\n\n                return function action() {\n                  return _ref10.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 226\n                },\n                __self: this\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    })),\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"\\u0412\\u044B\\u0439\\u0442\\u0438\") : null)))) : 'Ничего не найдено' : 'Ничего не найдено')));\n});\n\nClient.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref11 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee11(ctx) {\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            if (!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role)) if (ctx.res) {\n              ctx.res.writeHead(302, {\n                Location: '/'\n              });\n              ctx.res.end();\n            } else Router.push('/');\n            _context11.t0 = _objectSpread;\n            _context11.t1 = {};\n\n            if (!(ctx.query.id !== 'new')) {\n              _context11.next = 9;\n              break;\n            }\n\n            _context11.next = 6;\n            return getEmployment({\n              _id: ctx.query.id\n            });\n\n          case 6:\n            _context11.t2 = _context11.sent;\n            _context11.next = 10;\n            break;\n\n          case 9:\n            _context11.t2 = {\n              employment: {\n                name: '',\n                email: '',\n                user: {\n                  phone: '',\n                  status: '',\n                  role: ''\n                },\n                organization: {\n                  _id: ''\n                }\n              }\n            };\n\n          case 10:\n            _context11.t3 = _context11.t2;\n            _context11.next = 13;\n            return getOrganizations({\n              search: '',\n              sort: 'name',\n              filter: ''\n            });\n\n          case 13:\n            _context11.t4 = _context11.sent;\n            _context11.t5 = (0, _context11.t0)(_context11.t1, _context11.t3, _context11.t4);\n            return _context11.abrupt(\"return\", {\n              data: _context11.t5\n            });\n\n          case 16:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n\n  return function (_x) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\pages\\employment\\[id].js"],"names":["Head","React","useState","App","connect","getEmployment","setEmployments","onoffEmployment","addEmployment","deleteEmployment","organizationStyle","Card","CardActions","Input","Button","bindActionCreators","mini_dialogActions","IconButton","InputAdornment","Visibility","VisibilityOff","useRouter","InputLabel","MenuItem","FormControl","Select","getOrganizations","Router","userActions","snackbarActions","TextField","Confirmation","Client","memo","props","profile","user","classes","data","isMobileApp","app","showSnackBar","employment","status","setStatus","name","setName","email","setEmail","phone","setPhone","organization","setOrganization","handleOrganization","event","_id","target","value","role","setRole","handleRole","password","setPassword","handlePassword","hide","setHide","handleHide","setMiniDialog","showMiniDialog","router","logout","roles","filterSubCategory","sortSubCategory","query","id","page","column","row","justifyContent","alignItems","inputM","inputDF","organizations","map","element","readOnly","includes","length","undefined","action","push","editElement","newPass","getInitialProps","ctx","store","getState","res","writeHead","Location","end","search","sort","filter","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import Head from 'next/head';\r\nimport React, { useState } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport {getEmployment, setEmployments, onoffEmployment, addEmployment, deleteEmployment} from '../../src/gql/employment'\r\nimport organizationStyle from '../../src/styleMUI/employment/employment'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { useRouter } from 'next/router'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { getOrganizations } from '../../src/gql/organization'\r\nimport Router from 'next/router'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\n\r\nconst Client = React.memo((props) => {\r\n    const { profile } = props.user;\r\n    const classes = organizationStyle();\r\n    const { data } = props;\r\n    const { isMobileApp } = props.app;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    let [status, setStatus] = useState(data.employment!==null?data.employment.user.status:'');\r\n    let [name, setName] = useState(data.employment!==null?data.employment.name:'');\r\n    let [email, setEmail] = useState(data.employment!==null?data.employment.email:'');\r\n    let [phone, setPhone] = useState(data.employment!==null?data.employment.user.phone:'');\r\n    let [organization, setOrganization] = useState(data.employment!==null?data.employment.organization:{});\r\n    let handleOrganization =  (event) => {\r\n        setOrganization({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [role, setRole] = useState(data.employment!==null?data.employment.user.role:'');\r\n    let handleRole =  (event) => {\r\n        setRole(event.target.value)\r\n    };\r\n    let [password, setPassword] = useState('');\r\n    let handlePassword =  (event) => {\r\n        setPassword(event.target.value)\r\n    };\r\n    let [hide, setHide] = useState('password');\r\n    let handleHide =  () => {\r\n        setHide(!hide)\r\n    };\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const router = useRouter()\r\n    const { logout } = props.userActions;\r\n    let roles = ['организация', 'менеджер', 'экспедитор']\r\n    return (\r\n        <App filters={data.filterSubCategory} sorts={data.sortSubCategory} pageName={data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'}</title>\r\n            </Head>\r\n            <Card className={classes.page}>\r\n                <CardActions className={isMobileApp?classes.column:classes.row} style={isMobileApp?{}:{justifyContent: 'start', alignItems: 'flex-start'}}>\r\n                {\r\n                            data.employment!==null?\r\n                                profile.role==='admin'||profile.role==='организация'||profile._id===data.employment.user._id?\r\n                                    <>\r\n                                    <div>\r\n                                            <TextField\r\n                                                label='Имя'\r\n                                                value={name}\r\n                                                className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                                onChange={(event)=>{setName(event.target.value)}}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                }}\r\n                                            />\r\n                                            <Input\r\n                                                placeholder={router.query.id==='new'?'Пароль':'Новый пароль'}\r\n                                                type={hide ? 'password' : 'text' }\r\n                                                value={password}\r\n                                                onChange={handlePassword}\r\n                                                className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                                endAdornment={\r\n                                                    <InputAdornment position='end'>\r\n                                                        <IconButton aria-label='Toggle password visibility' onClick={handleHide}>\r\n                                                            {hide ? <VisibilityOff />:<Visibility />  }\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n                                        <TextField\r\n                                            label='email'\r\n                                            value={email}\r\n                                            className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                            onChange={(event)=>{setEmail(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        <TextField\r\n                                            label='Телефон'\r\n                                            value={phone}\r\n                                            className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                            onChange={(event)=>{setPhone(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        {router.query.id==='new'&&profile.role==='admin'?\r\n                                            <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                                <InputLabel>Организация</InputLabel>\r\n                                                <Select value={organization._id}onChange={handleOrganization}>\r\n                                                    {data.organizations.map((element)=>\r\n                                                        <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                                    )}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                            :\r\n                                            router.query.id!=='new'?\r\n                                                <TextField\r\n                                                    label='Организация'\r\n                                                    value={organization.name}\r\n                                                    className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                                    inputProps={{\r\n                                                        'aria-label': 'description',\r\n                                                        readOnly: true,\r\n                                                    }}\r\n                                                />\r\n                                                :null\r\n                                        }\r\n                                        <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                            <InputLabel>Роль</InputLabel>\r\n                                            <Select\r\n                                                value={role}\r\n                                                onChange={handleRole}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                    readOnly: profile._id===data.employment.user._id||!['admin', 'организация'].includes(profile.role),\r\n                                                }}\r\n                                            >\r\n                                                {roles.map((element)=>{\r\n                                                    //if(element!=='организация'||profile.role=='admin')\r\n                                                        return <MenuItem key={element} value={element}>{element}</MenuItem>\r\n                                                })\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        <div className={classes.row}>\r\n                                            {\r\n                                                router.query.id==='new'?\r\n                                                    <Button onClick={async()=>{\r\n                                                        if (name.length>0&&email.length>0&&password.length>0&&phone.length>0&&role.length>0&&organization._id!==undefined) {\r\n                                                            const action = async() => {\r\n                                                                await addEmployment({\r\n                                                                    name: name,\r\n                                                                    email: email,\r\n                                                                    phone: phone,\r\n                                                                    password: password,\r\n                                                                    role: role,\r\n                                                                    organization: organization._id,\r\n                                                                })\r\n                                                                Router.push('/employments')\r\n                                                            }\r\n                                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                            showMiniDialog(true)\r\n                                                        } else {\r\n                                                            showSnackBar('Заполните все поля')\r\n                                                        }\r\n                                                    }} size='small' color='primary'>\r\n                                                        Добавить\r\n                                                    </Button>\r\n                                                    :\r\n                                                    <>\r\n                                                    <Button onClick={async()=>{\r\n                                                        let editElement = {_id: data.employment._id}\r\n                                                        if(name.length>0&&name!==data.employment.name)editElement.name = name\r\n                                                        if(phone.length>0&&phone!==data.employment.phone)editElement.phone = phone\r\n                                                        if(email.length>0&&email!==data.employment.email)editElement.email = email\r\n                                                        if(password.length>0)editElement.newPass = password\r\n                                                        if(role.length>0&&role!==data.employment.role)editElement.role = role\r\n                                                        const action = async() => {\r\n                                                            await setEmployments(editElement)\r\n                                                        }\r\n                                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                        showMiniDialog(true)\r\n                                                    }} size='small' color='primary'>\r\n                                                        Сохранить\r\n                                                    </Button>\r\n\r\n                                                    {\r\n                                                        profile._id!==data.employment.user._id&&['admin', 'организация'].includes(profile.role)?\r\n                                                            <>\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    await onoffEmployment([data.employment._id])\r\n                                                                    setStatus(status==='active'?'deactive':'active')\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                {status==='active'?'Отключить':'Включить'}\r\n                                                            </Button>\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    await deleteEmployment([data.employment._id])\r\n                                                                    Router.push('/employments')\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                Удалить\r\n                                                            </Button>\r\n                                                            </>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    {\r\n                                                        profile._id===data.employment.user._id?\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    logout()\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                Выйти\r\n                                                            </Button>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    </>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    </>\r\n                                    :\r\n                                    'Ничего не найдено'\r\n                                :\r\n                                'Ничего не найдено'\r\n                        }\r\n                </CardActions>\r\n                </Card>\r\n        </App>\r\n    )\r\n})\r\n\r\nClient.getInitialProps = async function(ctx) {\r\n    if(!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role))\r\n        if(ctx.res) {\r\n            ctx.res.writeHead(302, {\r\n                Location: '/'\r\n            })\r\n            ctx.res.end()\r\n        } else\r\n            Router.push('/')\r\n    return {\r\n        data: {\r\n            ...ctx.query.id!=='new'?await getEmployment({_id: ctx.query.id}):{employment:{name: '',email: '',user: {phone: '',status: '',role: '',},organization: {_id: ''},}},\r\n            ...await getOrganizations({search: '', sort: 'name', filter: ''})\r\n        }\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);"]},"metadata":{},"sourceType":"module"}