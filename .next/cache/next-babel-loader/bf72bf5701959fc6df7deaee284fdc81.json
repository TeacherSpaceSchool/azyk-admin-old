{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: [ID]!, $orders: [Order]!) {\\n                        setOrder(_id: $_id, orders: $orders) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($invoices: [ID]!, $route: ID) {\\n                        approveOrders(invoices: $invoices, route: $route) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: [ID]!) {\\n                        cancelOrders(_id: $_id) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($info: String, $paymentMethod: String, $address: [[String]]) {\\n                        addOrders(info: $info, paymentMethod: $paymentMethod, address: $address) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($_id: ID!) {\\n                        invoice(_id: $_id) {\\n                            _id\\n                            createdAt\\n                            orders \\n                                { \\n                                    _id\\n                                    createdAt\\n                                    item\\n                                        {\\n                                            image\\n                                            _id\\n                                            name    \\n                                            stock \\n                                            price\\n                                            organization\\n                                                {_id name}\\n                                        }\\n                                    count\\n                                    allPrice\\n                                    status\\n                                 }\\n                            client \\n                                { \\n                                    _id\\n                                    name\\n                                    email\\n                                    user \\n                                        {phone} \\n                                }\\n                            allPrice\\n                            info\\n                            address\\n                            paymentMethod\\n                            number\\n                            confirmationForwarder\\n                            confirmationClient\\n                            dateDelivery\\n                        }\\n                    }\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($search: String!, $sort: String!, $filter: String!) {\\n                        invoices(search: $search, sort: $sort, filter: $filter) {\\n                            _id\\n                            createdAt\\n                            orders \\n                                { \\n                                    _id\\n                                    createdAt\\n                                    item\\n                                        {\\n                                            image\\n                                            _id\\n                                            name    \\n                                            stock \\n                                            price\\n                                            organization\\n                                                {_id name}\\n                                        }\\n                                    count\\n                                    allPrice\\n                                    status\\n                                 }\\n                            client \\n                                { \\n                                    _id\\n                                    name\\n                                    email\\n                                    user \\n                                        {_id phone} \\n                                }\\n                            allPrice\\n                            info\\n                            address\\n                            paymentMethod\\n                            number\\n                            confirmationForwarder\\n                            confirmationClient\\n                            dateDelivery\\n                        }\\n                        sortInvoice {\\n                            name\\n                            field\\n                        }\\n                        filterInvoice {\\n                           name\\n                           value\\n                        }\\n                    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport var getOrders =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var search, sort, filter, client, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            search = _ref.search, sort = _ref.sort, filter = _ref.filter;\n            _context.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context.next = 5;\n            return client.query({\n              variables: {\n                search: search,\n                sort: sort,\n                filter: filter\n              },\n              query: gql(_templateObject())\n            });\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function getOrders(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getOrder =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(_ref3) {\n    var _id, client, res;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _id = _ref3._id;\n            _context2.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context2.next = 5;\n            return client.query({\n              variables: {\n                _id: _id\n              },\n              query: gql(_templateObject2())\n            });\n\n          case 5:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.data);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.error(_context2.t0);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 9]]);\n  }));\n\n  return function getOrder(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var addOrders =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context3.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject3())\n            });\n\n          case 4:\n            _context3.next = 9;\n            break;\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(_context3.t0);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n\n  return function addOrders(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var cancelOrders =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context4.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject4())\n            });\n\n          case 4:\n            _context4.next = 6;\n            return getOrders(new SingletonStore().getStore().getState().app);\n\n          case 6:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.error(_context4.t0);\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 9]]);\n  }));\n\n  return function cancelOrders(_x4) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var approveOrders =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context5.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject5())\n            });\n\n          case 4:\n            _context5.next = 6;\n            return getOrders(new SingletonStore().getStore().getState().app);\n\n          case 6:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.error(_context5.t0);\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 9]]);\n  }));\n\n  return function approveOrders(_x5) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var setOrder =\n/*#__PURE__*/\nfunction () {\n  var _ref8 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context6.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject6())\n            });\n\n          case 4:\n            _context6.next = 6;\n            return getOrders(new SingletonStore().getStore().getState().app);\n\n          case 6:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 9:\n            _context6.prev = 9;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.error(_context6.t0);\n\n          case 12:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[0, 9]]);\n  }));\n\n  return function setOrder(_x6) {\n    return _ref8.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\order.js"],"names":["gql","SingletonApolloClient","SingletonStore","getOrders","search","sort","filter","client","getClient","query","variables","res","data","console","error","getOrder","_id","addOrders","element","mutate","mutation","cancelOrders","getStore","getState","app","approveOrders","setOrder"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getOrders = async({search, sort, filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        invoices(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            createdAt\r\n                            orders \r\n                                { \r\n                                    _id\r\n                                    createdAt\r\n                                    item\r\n                                        {\r\n                                            image\r\n                                            _id\r\n                                            name    \r\n                                            stock \r\n                                            price\r\n                                            organization\r\n                                                {_id name}\r\n                                        }\r\n                                    count\r\n                                    allPrice\r\n                                    status\r\n                                 }\r\n                            client \r\n                                { \r\n                                    _id\r\n                                    name\r\n                                    email\r\n                                    user \r\n                                        {_id phone} \r\n                                }\r\n                            allPrice\r\n                            info\r\n                            address\r\n                            paymentMethod\r\n                            number\r\n                            confirmationForwarder\r\n                            confirmationClient\r\n                            dateDelivery\r\n                        }\r\n                        sortInvoice {\r\n                            name\r\n                            field\r\n                        }\r\n                        filterInvoice {\r\n                           name\r\n                           value\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getOrder = async({_id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        invoice(_id: $_id) {\r\n                            _id\r\n                            createdAt\r\n                            orders \r\n                                { \r\n                                    _id\r\n                                    createdAt\r\n                                    item\r\n                                        {\r\n                                            image\r\n                                            _id\r\n                                            name    \r\n                                            stock \r\n                                            price\r\n                                            organization\r\n                                                {_id name}\r\n                                        }\r\n                                    count\r\n                                    allPrice\r\n                                    status\r\n                                 }\r\n                            client \r\n                                { \r\n                                    _id\r\n                                    name\r\n                                    email\r\n                                    user \r\n                                        {phone} \r\n                                }\r\n                            allPrice\r\n                            info\r\n                            address\r\n                            paymentMethod\r\n                            number\r\n                            confirmationForwarder\r\n                            confirmationClient\r\n                            dateDelivery\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addOrders = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($info: String, $paymentMethod: String, $address: [[String]]) {\r\n                        addOrders(info: $info, paymentMethod: $paymentMethod, address: $address) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const cancelOrders = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        cancelOrders(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getOrders(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const approveOrders = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($invoices: [ID]!, $route: ID) {\r\n                        approveOrders(invoices: $invoices, route: $route) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getOrders(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setOrder = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!, $orders: [Order]!) {\r\n                        setOrder(_id: $_id, orders: $orders) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getOrders(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}