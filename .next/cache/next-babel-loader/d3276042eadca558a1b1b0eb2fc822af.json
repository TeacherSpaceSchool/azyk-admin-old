{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($search: String!, $sort: String!) {\\n                        bonusesClient(search: $search, sort: $sort) {\\n                            _id\\n                            createdAt\\n                            current\\n                            addedBonus\\n                            bonus {\\n                                _id\\n                                target\\n                                bonus\\n                                organization\\n                                    {_id name image}\\n                                }\\n                            client {\\n                                _id\\n                                image\\n                                name\\n                                user \\n                                    {_id}\\n                            }\\n                        }\\n                        sortBonusClient {\\n                            name\\n                            field\\n                        }\\n                    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport var getBonusesClient =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var search, sort, client, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            search = _ref.search, sort = _ref.sort;\n            _context.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context.next = 5;\n            return client.query({\n              variables: {\n                search: search,\n                sort: sort\n              },\n              query: gql(_templateObject())\n            });\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function getBonusesClient(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\bonusclient.js"],"names":["gql","SingletonApolloClient","SingletonStore","getBonusesClient","search","sort","client","getClient","query","variables","res","data","console","error"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,OAAO,IAAMC,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeC,YAAAA,MAAf,QAAOA,MAAP,EAA6BC,IAA7B,QAAuBA,IAAvB;AAAA;AAElBC,YAAAA,MAFkB,GAET,IAAIL,qBAAJ,GAA4BM,SAA5B,EAFS;AAAA;AAAA,mBAGRD,MAAM,CACjBE,KADW,CACL;AACHC,cAAAA,SAAS,EAAE;AAACL,gBAAAA,MAAM,EAAEA,MAAT;AAAiBC,gBAAAA,IAAI,EAAEA;AAAvB,eADR;AAEHG,cAAAA,KAAK,EAAER,GAAF;AAFF,aADK,CAHQ;;AAAA;AAGpBU,YAAAA,GAHoB;AAAA,6CAkCjBA,GAAG,CAACC,IAlCa;;AAAA;AAAA;AAAA;AAoCxBC,YAAAA,OAAO,CAACC,KAAR;;AApCwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBV,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getBonusesClient = async({search: search, sort: sort})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!) {\r\n                        bonusesClient(search: $search, sort: $sort) {\r\n                            _id\r\n                            createdAt\r\n                            current\r\n                            addedBonus\r\n                            bonus {\r\n                                _id\r\n                                target\r\n                                bonus\r\n                                organization\r\n                                    {_id name image}\r\n                                }\r\n                            client {\r\n                                _id\r\n                                image\r\n                                name\r\n                                user \r\n                                    {_id}\r\n                            }\r\n                        }\r\n                        sortBonusClient {\r\n                            name\r\n                            field\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}