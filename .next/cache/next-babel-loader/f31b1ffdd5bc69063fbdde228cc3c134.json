{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($name: String!, $email: String!, $phone: [String]!, $login: String!, $password: String!, $role: String!, $organization: ID!) {\\n                        addEmployment(name: $name, email: $email, phone: $phone, login: $login, password: $password, role: $role, organization: $organization) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: ID!, $name: String, $email: String, $newPass: String, $role: String, $phone: [String], $login: String) {\\n                        setEmployment(_id: $_id, name: $name, email: $email, newPass: $newPass, role: $role, phone: $phone, login: $login) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: [ID]!) {\\n                        deleteEmployment(_id: $_id) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: [ID]!) {\\n                        onoffEmployment(_id: $_id) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($_id: ID) {\\n                        ecspeditors(_id: $_id) {\\n                            _id\\n                            createdAt\\n                            name\\n                            email\\n                            phone\\n                            user \\n                                {_id role status login}\\n                            organization \\n                                {_id name}\\n                        }\\n                    }\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($_id: ID!) {\\n                        employment(_id: $_id) {\\n                            _id\\n                            createdAt\\n                            name\\n                            email\\n                            phone\\n                            user \\n                                {_id role status login}\\n                            organization \\n                                {_id name}\\n                        }\\n                    }\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($search: String!, $sort: String!, $filter: String!) {\\n                        employments(search: $search, sort: $sort, filter: $filter) {\\n                            _id\\n                            createdAt\\n                            name\\n                            email\\n                            phone\\n                            user \\n                                {_id role status login}\\n                            organization \\n                                {_id name}\\n                          }\\n                          sortEmployment {\\n                           name\\n                            field\\n                          }\\n                          filterEmployment {\\n                           name\\n                           value\\n                          }\\n                    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport var getEmployments =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var search, sort, filter, client, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            search = _ref.search, sort = _ref.sort, filter = _ref.filter;\n            _context.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context.next = 5;\n            return client.query({\n              variables: {\n                search: search,\n                sort: sort,\n                filter: filter\n              },\n              query: gql(_templateObject())\n            });\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function getEmployments(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getEmployment =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(_ref3) {\n    var _id, client, res;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _id = _ref3._id;\n            _context2.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context2.next = 5;\n            return client.query({\n              variables: {\n                _id: _id\n              },\n              query: gql(_templateObject2())\n            });\n\n          case 5:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.data);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.error(_context2.t0);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 9]]);\n  }));\n\n  return function getEmployment(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getEcspeditors =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(_ref5) {\n    var _id, client, res;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _id = _ref5._id;\n            _context3.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context3.next = 5;\n            return client.query({\n              variables: {\n                _id: _id\n              },\n              query: gql(_templateObject3())\n            });\n\n          case 5:\n            res = _context3.sent;\n            return _context3.abrupt(\"return\", res.data);\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](1);\n            console.error(_context3.t0);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[1, 9]]);\n  }));\n\n  return function getEcspeditors(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var onoffEmployment =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(ids) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context4.next = 4;\n            return client.mutate({\n              variables: {\n                _id: ids\n              },\n              mutation: gql(_templateObject4())\n            });\n\n          case 4:\n            _context4.next = 6;\n            return getEmployments(new SingletonStore().getStore().getState().app);\n\n          case 6:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.error(_context4.t0);\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 9]]);\n  }));\n\n  return function onoffEmployment(_x4) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var deleteEmployment =\n/*#__PURE__*/\nfunction () {\n  var _ref8 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(ids) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context5.next = 4;\n            return client.mutate({\n              variables: {\n                _id: ids\n              },\n              mutation: gql(_templateObject5())\n            });\n\n          case 4:\n            _context5.next = 6;\n            return getEmployments(new SingletonStore().getStore().getState().app);\n\n          case 6:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.error(_context5.t0);\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 9]]);\n  }));\n\n  return function deleteEmployment(_x5) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var setEmployments =\n/*#__PURE__*/\nfunction () {\n  var _ref9 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(element) {\n    var client, list;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context6.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject6())\n            });\n\n          case 4:\n            _context6.next = 6;\n            return getEmployments(new SingletonStore().getStore().getState().app);\n\n          case 6:\n            list = _context6.sent;\n            return _context6.abrupt(\"return\", list);\n\n          case 10:\n            _context6.prev = 10;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.error(_context6.t0);\n\n          case 13:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[0, 10]]);\n  }));\n\n  return function setEmployments(_x6) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var addEmployment =\n/*#__PURE__*/\nfunction () {\n  var _ref10 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee7(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context7.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject7())\n            });\n\n          case 4:\n            _context7.next = 6;\n            return getEmployments(new SingletonStore().getStore().getState().app);\n\n          case 6:\n            return _context7.abrupt(\"return\", _context7.sent);\n\n          case 9:\n            _context7.prev = 9;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.error(_context7.t0);\n\n          case 12:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[0, 9]]);\n  }));\n\n  return function addEmployment(_x7) {\n    return _ref10.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\employment.js"],"names":["gql","SingletonApolloClient","SingletonStore","getEmployments","search","sort","filter","client","getClient","query","variables","res","data","console","error","getEmployment","_id","getEcspeditors","onoffEmployment","ids","mutate","mutation","getStore","getState","app","deleteEmployment","setEmployments","element","list","addEmployment"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getEmployments = async({search: search, sort: sort, filter: filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        employments(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            phone\r\n                            user \r\n                                {_id role status login}\r\n                            organization \r\n                                {_id name}\r\n                          }\r\n                          sortEmployment {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterEmployment {\r\n                           name\r\n                           value\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getEmployment = async({_id: _id})=> {\r\n    try {\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        employment(_id: $_id) {\r\n                            _id\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            phone\r\n                            user \r\n                                {_id role status login}\r\n                            organization \r\n                                {_id name}\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getEcspeditors = async({_id: _id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID) {\r\n                        ecspeditors(_id: $_id) {\r\n                            _id\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            phone\r\n                            user \r\n                                {_id role status login}\r\n                            organization \r\n                                {_id name}\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const onoffEmployment = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        onoffEmployment(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getEmployments(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteEmployment = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteEmployment(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getEmployments(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setEmployments = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $name: String, $email: String, $newPass: String, $role: String, $phone: [String], $login: String) {\r\n                        setEmployment(_id: $_id, name: $name, email: $email, newPass: $newPass, role: $role, phone: $phone, login: $login) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getEmployments(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addEmployment = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($name: String!, $email: String!, $phone: [String]!, $login: String!, $password: String!, $role: String!, $organization: ID!) {\r\n                        addEmployment(name: $name, email: $email, phone: $phone, login: $login, password: $password, role: $role, organization: $organization) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getEmployments(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}