{"ast":null,"code":"import { AUTHENTICATED, UNAUTHENTICATED, SET_PROFILE, SET_AUTH, ERROR_AUTHENTICATED } from '../constants/user';\nimport { SHOW_MINI_DIALOG } from '../constants/mini_dialog';\nimport { SET_COUNT_BASKET } from '../constants/app';\nimport Cookies from 'js-cookie';\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../../src/singleton/client';\nimport Router from 'next/router';\nexport function signup(payload) {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.mutate({\n        variables: payload,\n        mutation: gql`\n                    mutation ($login: String!, $password: String!) {\n                        signupuser(login: $login, password: $password) {\n                           role\n                           status\n                           login\n                           organization\n                           _id\n                        }\n                    }`\n      });\n      if (result.data.signupuser.role === 'Проверьте данные') await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });else {\n        await dispatch({\n          type: SHOW_MINI_DIALOG,\n          payload: false\n        }); //await Router.push('/')\n\n        /*\r\n        await dispatch({type: AUTHENTICATED});\r\n        await dispatch({\r\n            type: SET_PROFILE,\r\n            payload: result.data.signupuser\r\n        })*/\n\n        window.location.reload();\n      }\n    } catch (error) {\n      dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });\n    }\n  };\n}\nexport function signin(payload) {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.mutate({\n        variables: payload,\n        mutation: gql`\n                    mutation ($login: String!, $password: String!) {\n                        signinuser(login: $login, password: $password) {\n                           role\n                           status\n                           login\n                           organization\n                           _id\n                        }\n                    }`\n      });\n      if (result.data.signinuser.role === 'Проверьте данные') await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });else {\n        await dispatch({\n          type: SHOW_MINI_DIALOG,\n          payload: false\n        }); //await Router.push('/')\n\n        window.location.reload();\n        /*await dispatch({type: AUTHENTICATED});\r\n        await dispatch({\r\n            type: SET_PROFILE,\r\n            payload: result.data.signinuser\r\n        })*/\n      }\n    } catch (error) {\n      console.error(error);\n      await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });\n    }\n  };\n}\nexport function checkAuthenticated() {\n  return async dispatch => {\n    try {\n      if (Cookies.get('jwt')) {\n        dispatch({\n          type: AUTHENTICATED\n        });\n      } else {\n        dispatch({\n          type: UNAUTHENTICATED\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: UNAUTHENTICATED\n      });\n    }\n  };\n}\nexport function setAuthenticated(auth) {\n  return {\n    type: SET_AUTH,\n    payload: auth\n  };\n}\nexport function logout(reload) {\n  return async dispatch => {\n    await dispatch({\n      type: UNAUTHENTICATED\n    });\n    if (reload) await Router.push('/');\n    await Cookies.remove('jwt');\n    await dispatch({\n      type: SET_COUNT_BASKET,\n      payload: 0\n    });\n    await dispatch({\n      type: SET_PROFILE,\n      payload: {}\n    }); //setTimeout(()=>window.location.reload(),100)\n  };\n}\nexport function setProfile() {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.query({\n        query: gql`\n                    query {\n                        getStatus {\n                           role\n                           status\n                           login\n                           organization\n                           _id\n                          }\n                    }`\n      });\n      await dispatch({\n        type: SET_PROFILE,\n        payload: result.data.getStatus\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\nexport async function getProfile() {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let result = await client.query({\n      query: gql`\n                   query {\n                       getStatus {\n                          role\n                          status\n                          login\n                          organization\n                          _id\n                         }\n                   }`\n    });\n    return result.data.getStatus;\n  } catch (error) {\n    console.error(error);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}