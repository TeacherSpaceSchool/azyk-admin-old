{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar regexpUA = /(Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile|iOS|Mobile)/;\nexport var checkMobile = function checkMobile(ua) {\n  return regexpUA.exec(ua) !== null;\n};\nvar regexpAuth = /(\\s)?jwt=(\\S)+(;)?/;\nexport var checkAuth = function checkAuth(auth) {\n  return regexpAuth.exec(auth) !== null;\n};\nexport var getJWT = function getJWT(auth) {\n  var res = regexpAuth.exec(auth);\n  return res !== null ? res[0].trim().replace('jwt=', '') : undefined;\n};\nexport var checkInt = function checkInt(_int) {\n  return isNaN(_parseInt(_int)) ? 0 : _parseInt(_int);\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\lib.js"],"names":["regexpUA","checkMobile","ua","exec","regexpAuth","checkAuth","auth","getJWT","res","trim","replace","undefined","checkInt","int","isNaN"],"mappings":";AAAA,IAAMA,QAAQ,GAAG,sEAAjB;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAM;AAC7B,SAAOF,QAAQ,CAACG,IAAT,CAAcD,EAAd,MAAoB,IAA3B;AACH,CAFM;AAGP,IAAME,UAAU,GAAG,oBAAnB;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAQ;AAC7B,SAAOF,UAAU,CAACD,IAAX,CAAgBG,IAAhB,MAAwB,IAA/B;AACH,CAFM;AAGP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACD,IAAD,EAAQ;AAC1B,MAAIE,GAAG,GAAGJ,UAAU,CAACD,IAAX,CAAgBG,IAAhB,CAAV;AACA,SAAOE,GAAG,KAAG,IAAN,GAAWA,GAAG,CAAC,CAAD,CAAH,CAAOC,IAAP,GAAcC,OAAd,CAAsB,MAAtB,EAA8B,EAA9B,CAAX,GAA6CC,SAApD;AACH,CAHM;AAIP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAS;AAC7B,SAAOC,KAAK,CAAC,UAASD,IAAT,CAAD,CAAL,GAAqB,CAArB,GAAuB,UAASA,IAAT,CAA9B;AACH,CAFM","sourcesContent":["const regexpUA = /(Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile|iOS|Mobile)/\r\nexport const checkMobile = (ua)=>{\r\n    return regexpUA.exec(ua)!==null\r\n}\r\nconst regexpAuth = /(\\s)?jwt=(\\S)+(;)?/\r\nexport const checkAuth = (auth)=>{\r\n    return regexpAuth.exec(auth)!==null\r\n}\r\nexport const getJWT = (auth)=>{\r\n    let res = regexpAuth.exec(auth)\r\n    return res!==null?res[0].trim().replace('jwt=', ''):undefined\r\n}\r\nexport const checkInt = (int) => {\r\n    return isNaN(parseInt(int))?0:parseInt(int)\r\n}"]},"metadata":{},"sourceType":"module"}