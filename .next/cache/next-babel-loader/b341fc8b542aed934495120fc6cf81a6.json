{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState, useEffect } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getOrganizations } from '../../src/gql/organization';\nimport { getOrders } from '../../src/gql/order';\nimport { getRoute, setRoute, deleteRoute, addRoute } from '../../src/gql/route';\nimport { getEcspeditors } from '../../src/gql/employment';\nimport routeStyle from '../../src/styleMUI/route/route';\nimport { useRouter } from 'next/router';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CardOrder from '../../components/order/CardOrder';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Router from 'next/router';\nimport { pdDatePicker } from '../../src/lib';\nimport Confirmation from '../../components/dialog/Confirmation';\nimport GeoRoute from '../../components/dialog/GeoRoute';\nimport { urlMain } from '../../redux/constants/other';\nconst Route = React.memo(props => {\n  const {\n    profile\n  } = props.user;\n  const classes = routeStyle();\n  const {\n    data\n  } = props;\n  const router = useRouter();\n  const {\n    isMobileApp\n  } = props.app;\n  let {\n    0: dateStart,\n    1: setDateStart\n  } = useState(data.route ? pdDatePicker(new Date(data.route.dateStart)) : null);\n  let {\n    0: dateEnd,\n    1: setDateEnd\n  } = useState(data.route ? data.route.dateEnd : null);\n  let {\n    0: employment,\n    1: setEmployment\n  } = useState(data.route ? data.route.employment : {});\n\n  let handleEmployment = event => {\n    setEmployment({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: organization,\n    1: setOrganization\n  } = useState(router.query.id === 'new' || !data.route ? {} : data.route.employment.organization);\n\n  let handleOrganization = event => {\n    setOrganization({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: invoices,\n    1: setInvoices\n  } = useState(data.route ? data.route.invoices : []);\n  let {\n    0: cancelInvoices,\n    1: setCancelInvoices\n  } = useState([]);\n  let {\n    0: allInvoices,\n    1: setAllInvoices\n  } = useState([]);\n  let {\n    0: unselectedInvoices,\n    1: setUnselectedInvoices\n  } = useState([]);\n  let {\n    0: selectType,\n    1: setSelectType\n  } = useState('Все');\n  let {\n    0: employments,\n    1: setEmployments\n  } = useState([]);\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  useEffect(() => {\n    (async () => {\n      if (data.route) {\n        if (['организация', 'менеджер'].includes(profile.role) && router.query.id === 'new') {\n          let organization = data.organizations.filter(element => element._id === profile.organization);\n          setOrganization(organization[0]);\n        }\n      }\n    })();\n  }, [profile]);\n  useEffect(() => {\n    (async () => {\n      if (data.route && ['организация', 'менеджер', 'admin'].includes(profile.role)) {\n        console.log('ok');\n        setUnselectedInvoices((await getOrders({\n          search: '',\n          sort: '-createdAt',\n          filter: 'обработка',\n          date: ''\n        })).invoices);\n      }\n    })();\n  }, []);\n  useEffect(() => {\n    (async () => {\n      if (data.route) {\n        if (router.query.id === 'new') setEmployment({});\n        setEmployments((await getEcspeditors({\n          _id: organization._id\n        })).ecspeditors);\n      }\n    })();\n  }, [organization]);\n  useEffect(() => {\n    (async () => {\n      if (data.route) {\n        let allInvoices;\n        if (selectType == 'Все') allInvoices = [...invoices, ...unselectedInvoices];else if (selectType == 'Свободные') allInvoices = [...unselectedInvoices];else if (selectType == 'Выбраные') allInvoices = [...invoices];\n        allInvoices.sort((a, b) => {\n          a.createdAt = new Date(a.createdAt);\n          b.createdAt = new Date(b.createdAt);\n          if (a.createdAt > b.createdAt) return -1;\n          if (a.createdAt < b.createdAt) return 1;\n          return 0;\n        });\n        setAllInvoices([...allInvoices]);\n      }\n    })();\n  }, [selectType, unselectedInvoices, invoices]);\n  const statusColor = {\n    'создан': 'orange',\n    'выполняется': 'blue',\n    'выполнен': 'green'\n  };\n\n  let getInvoices = async () => {\n    if (data.route) {\n      setUnselectedInvoices((await getOrders({\n        search: '',\n        sort: '-createdAt',\n        filter: 'обработка',\n        date: ''\n      })).invoices);\n      setCancelInvoices([]);\n      setInvoices((await getRoute({\n        _id: data.route._id\n      })).route.invoices);\n    }\n  };\n\n  const breakGeoRoute = invoices.filter(element => !element.address[1]).length > 0;\n  return __jsx(App, {\n    pageName: data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено'\n  }, __jsx(Head, null, __jsx(\"title\", null, data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено'), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\"\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено'\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\"\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: `${urlMain}/static/512x512.png`\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `${urlMain}/route/${router.query.id}`\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: `${urlMain}/route/${router.query.id}`\n  })), __jsx(Card, {\n    className: isMobileApp ? classes.pageM : classes.pageD\n  }, data.route ? __jsx(React.Fragment, null, router.query.id === 'new' ? null : __jsx(\"div\", {\n    className: classes.status,\n    style: {\n      background: statusColor[data.route.status]\n    }\n  }, data.route.status), __jsx(CardContent, {\n    className: classes.column\n  }, data.route ? __jsx(React.Fragment, null, router.query.id === 'new' ? null : __jsx(\"div\", {\n    className: classes.number\n  }, data.route.number), (router.query.id === 'new' || data.route.status === 'создан') && profile.role === 'admin' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF\n  }, __jsx(InputLabel, null, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Select, {\n    value: organization._id,\n    onChange: handleOrganization\n  }, data.organizations.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name\n  }, element.name)))) : __jsx(TextField, {\n    label: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n    value: organization.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    }\n  }), __jsx(\"br\", null), router.query.id === 'new' || data.route.status === 'создан' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF\n  }, __jsx(InputLabel, null, \"\\u042D\\u043A\\u0441\\u043F\\u0435\\u0434\\u0438\\u0442\\u043E\\u0440\"), __jsx(Select, {\n    value: employment._id,\n    onChange: handleEmployment\n  }, employments.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name\n  }, element.name)))) : __jsx(TextField, {\n    label: \"\\u042D\\u043A\\u0441\\u043F\\u0435\\u0434\\u0438\\u0442\\u043E\\u0440\",\n    value: employment.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    }\n  }), __jsx(\"br\", null), __jsx(TextField, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    label: \"\\u0414\\u0430\\u0442\\u0430\",\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: dateStart,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: !(router.query.id === 'new' || data.route.status === 'создан')\n    },\n    onChange: event => setDateStart(event.target.value)\n  }), __jsx(\"br\", null), __jsx(\"div\", {\n    style: {\n      color: breakGeoRoute ? 'red' : '#ffb300'\n    },\n    onClick: () => {\n      setMiniDialog('Маршрут', __jsx(GeoRoute, {\n        invoices: invoices\n      }), true);\n      showMiniDialog(true);\n    },\n    className: classes.geo\n  }, breakGeoRoute ? 'Маршрут неполный' : 'Просмотреть маршрут'), __jsx(\"br\", null), __jsx(\"div\", {\n    style: {\n      justifyContent: 'center'\n    },\n    className: classes.row\n  }, __jsx(\"div\", {\n    style: {\n      background: selectType === 'Все' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Все');\n    },\n    className: classes.selectType\n  }, \"\\u0412\\u0441\\u0435\"), __jsx(\"div\", {\n    style: {\n      background: selectType === 'Свободные' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Свободные');\n    },\n    className: classes.selectType\n  }, \"\\u0421\\u0432\\u043E\\u0431\\u043E\\u0434\\u043D\\u044B\\u0435\"), __jsx(\"div\", {\n    style: {\n      background: selectType === 'Выбраные' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Выбраные');\n    },\n    className: classes.selectType\n  }, \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u043D\\u044B\\u0435\")), __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.listInvoices,\n    style: {\n      zoom: isMobileApp ? 0.83 : 1\n    }\n  }, allInvoices ? allInvoices.map((element, idx) => {\n    return __jsx(\"div\", {\n      key: idx,\n      className: classes.row\n    }, ['обработка', 'принят'].includes(element.orders[0].status)\n    /*&&!element.confirmationForwarder*/\n    ? __jsx(Checkbox, {\n      checked: invoices.includes(element),\n      onChange: () => {\n        if (!invoices.includes(element)) {\n          invoices.push(element);\n          unselectedInvoices.splice(unselectedInvoices.indexOf(element), 1);\n          cancelInvoices.splice(cancelInvoices.indexOf(element), 1);\n        } else {\n          invoices.splice(invoices.indexOf(element), 1);\n          unselectedInvoices.push(element);\n          cancelInvoices.push(element);\n        }\n\n        setInvoices([...invoices]);\n      }\n    }) : null, __jsx(CardOrder, {\n      getInvoices: getInvoices,\n      route: data.route._id,\n      element: element\n    }));\n  }) : null), __jsx(\"div\", {\n    className: isMobileApp ? classes.bottomRouteM : classes.bottomRouteD\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick: async () => {\n      if (dateStart && employment._id && organization._id) {\n        const action = async () => {\n          if (employment._id !== undefined && dateStart) {\n            invoices = invoices.map(element => element._id);\n            await addRoute({\n              invoices: invoices,\n              employment: employment._id,\n              dateStart: new Date(dateStart)\n            });\n            Router.push('/routes');\n          }\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        let editElement = {\n          _id: data.route._id\n        };\n        if (employment._id !== data.route.employment._id && data.route.status === 'создан') editElement.employment = employment._id;\n        if (dateStart && data.route.status === 'создан') editElement.dateStart = new Date(dateStart);\n        editElement.invoices = invoices.map(element => element._id);\n        if (cancelInvoices.length > 0) editElement.cancelInvoices = cancelInvoices.map(element => element._id);\n        await setRoute(editElement);\n        getInvoices();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), ['организация', 'менеджер', 'admin'].includes(profile.role) && data.route.status === 'создан' ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await deleteRoute([data.route._id]);\n        Router.push('/routes');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null))) : 'Ничего не найдено', __jsx(\"br\", null))) : __jsx(CardContent, {\n    className: classes.column\n  }, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\")));\n});\n\nRoute.getInitialProps = async function (ctx) {\n  if (!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role)) if (ctx.res) {\n    ctx.res.writeHead(302, {\n      Location: '/'\n    });\n    ctx.res.end();\n  } else Router.push('/');\n  return {\n    data: _objectSpread({}, ctx.query.id !== 'new' ? await getRoute({\n      _id: ctx.query.id\n    }) : {\n      route: {\n        invoices: [],\n        employment: {},\n        status: '',\n        dateStart: null,\n        dateEnd: null,\n        number: ''\n      }\n    }, (await getOrganizations({\n      search: '',\n      sort: 'name',\n      filter: ''\n    })))\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Route);","map":null,"metadata":{},"sourceType":"module"}