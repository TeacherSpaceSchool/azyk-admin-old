{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: ID!, $target: Int!, $bonus: Int!) {\\n                        setBonus(_id: $_id, target: $target, bonus: $bonus) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($search: String!, $sort: String!) {\\n                        bonuses(search: $search, sort: $sort) {\\n                            _id\\n                            createdAt\\n                            target\\n                            bonus\\n                            organization\\n                                {_id name image}\\n                        }\\n                        sortBonus {\\n                            name\\n                            field\\n                        }\\n                    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport var getBonuses =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var search, sort, client, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            search = _ref.search, sort = _ref.sort;\n            _context.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context.next = 5;\n            return client.query({\n              variables: {\n                search: search,\n                sort: sort\n              },\n              query: gql(_templateObject())\n            });\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function getBonuses(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var setBonus =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(element) {\n    var client, list;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context2.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject2())\n            });\n\n          case 4:\n            _context2.next = 6;\n            return getBonuses(new SingletonStore().getStore().getState().app);\n\n          case 6:\n            list = _context2.sent;\n            return _context2.abrupt(\"return\", list);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 10]]);\n  }));\n\n  return function setBonus(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\bonus.js"],"names":["gql","SingletonApolloClient","SingletonStore","getBonuses","search","sort","client","getClient","query","variables","res","data","console","error","setBonus","element","mutate","mutation","getStore","getState","app","list"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,OAAO,IAAMC,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeC,YAAAA,MAAf,QAAOA,MAAP,EAA6BC,IAA7B,QAAuBA,IAAvB;AAAA;AAEZC,YAAAA,MAFY,GAEH,IAAIL,qBAAJ,GAA4BM,SAA5B,EAFG;AAAA;AAAA,mBAGFD,MAAM,CACjBE,KADW,CACL;AACHC,cAAAA,SAAS,EAAE;AAACL,gBAAAA,MAAM,EAAEA,MAAT;AAAiBC,gBAAAA,IAAI,EAAEA;AAAvB,eADR;AAEHG,cAAAA,KAAK,EAAER,GAAF;AAFF,aADK,CAHE;;AAAA;AAGdU,YAAAA,GAHc;AAAA,6CAsBXA,GAAG,CAACC,IAtBO;;AAAA;AAAA;AAAA;AAwBlBC,YAAAA,OAAO,CAACC,KAAR;;AAxBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVV,UAAU;AAAA;AAAA;AAAA,GAAhB;AA6BP,OAAO,IAAMW,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEVT,YAAAA,MAFU,GAED,IAAIL,qBAAJ,GAA4BM,SAA5B,EAFC;AAAA;AAAA,mBAGVD,MAAM,CAACU,MAAP,CAAc;AAChBP,cAAAA,SAAS,EAAEM,OADK;AAEhBE,cAAAA,QAAQ,EAAGjB,GAAH;AAFQ,aAAd,CAHU;;AAAA;AAAA;AAAA,mBAWCG,UAAU,CAAC,IAAID,cAAJ,GAAqBgB,QAArB,GAAgCC,QAAhC,GAA2CC,GAA5C,CAXX;;AAAA;AAWZC,YAAAA,IAXY;AAAA,8CAYTA,IAZS;;AAAA;AAAA;AAAA;AAchBT,YAAAA,OAAO,CAACC,KAAR;;AAdgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARC,QAAQ;AAAA;AAAA;AAAA,GAAd","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getBonuses = async({search: search, sort: sort})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!) {\r\n                        bonuses(search: $search, sort: $sort) {\r\n                            _id\r\n                            createdAt\r\n                            target\r\n                            bonus\r\n                            organization\r\n                                {_id name image}\r\n                        }\r\n                        sortBonus {\r\n                            name\r\n                            field\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\n\r\nexport const setBonus = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $target: Int!, $bonus: Int!) {\r\n                        setBonus(_id: $_id, target: $target, bonus: $bonus) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getBonuses(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}