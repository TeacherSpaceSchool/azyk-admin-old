{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport cardPageListStyle from '../../src/styleMUI/blog/cardBlog';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport { deleteBlog, addBlog, setBlog } from '../../src/gql/blog';\nimport TextField from '@material-ui/core/TextField';\nimport moment from 'moment';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport dynamic from 'next/dynamic';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nconst Confirmation = dynamic(() => import('../dialog/Confirmation'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../dialog/Confirmation')],\n    modules: ['../dialog/Confirmation']\n  }\n});\nconst CardBlog = React.memo(props => {\n  const classes = cardPageListStyle();\n  const {\n    element,\n    setList\n  } = props;\n  const {\n    profile\n  } = props.user;\n  const {\n    isMobileApp\n  } = props.app; //addCard\n\n  let {\n    0: preview,\n    1: setPreview\n  } = useState(element ? element.image : '/static/add.png');\n  let {\n    0: image,\n    1: setImage\n  } = useState(undefined);\n\n  let handleChangeImage = event => {\n    setImage(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n  };\n\n  let {\n    0: title,\n    1: setTitle\n  } = useState(element ? element.title : '');\n\n  let handleTitle = event => {\n    setTitle(event.target.value);\n  };\n\n  let {\n    0: text,\n    1: setText\n  } = useState(element ? element.text : '');\n\n  let handleText = event => {\n    setText(event.target.value);\n  };\n\n  let date = element ? new Date(element.updatedAt) : new Date();\n  date = moment(date).format('DD.MM.YYYY HH:mm');\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  let {\n    0: all,\n    1: setAll\n  } = useState(false);\n  return __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD\n  }, profile.role === 'admin' ? __jsx(React.Fragment, null, __jsx(CardHeader, {\n    subheader: date\n  }), __jsx(CardActionArea, null, __jsx(\"label\", {\n    htmlFor: element ? element._id : 'add'\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: isMobileApp ? classes.mediaM : classes.mediaD,\n    src: preview,\n    alt: 'Изменить'\n  })), __jsx(CardContent, null, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: title,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: handleTitle,\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"\\u0422\\u0435\\u043A\\u0441\\u0442\",\n    value: text,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: handleText,\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }))), __jsx(CardActions, null, element !== undefined ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: element._id\n      };\n      if (title.length > 0 && title !== element.title) editElement.title = title;\n      if (text.length > 0 && text !== element.text) editElement.text = text;\n      if (image !== undefined) editElement.image = image;\n\n      const action = async () => {\n        setList((await setBlog(editElement)).blogs);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        setList((await deleteBlog([element._id])).blogs);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : __jsx(Button, {\n    onClick: async () => {\n      if (image !== undefined && text.length > 0 && title.length > 0) {\n        setImage(undefined);\n        setPreview('/static/add.png');\n        setTitle('');\n        setText('');\n\n        const action = async () => {\n          setList((await addBlog({\n            image: image,\n            text: text,\n            title: title\n          })).blogs);\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\")), __jsx(\"input\", {\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    id: element ? element._id : 'add',\n    type: \"file\",\n    onChange: handleChangeImage\n  })) : element !== undefined ? __jsx(React.Fragment, null, __jsx(CardActionArea, null, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: isMobileApp ? classes.mediaM : classes.mediaD,\n    src: element.image,\n    alt: element.title\n  }), __jsx(\"div\", {\n    className: classes.shapka\n  }, __jsx(\"div\", {\n    className: classes.title\n  }, element.title), __jsx(\"div\", {\n    className: classes.date\n  }, date)), all ? __jsx(\"div\", {\n    style: {\n      fontSize: '1rem',\n      margin: 20,\n      whiteSpace: 'pre-wrap'\n    }\n  }, element.text) : null, __jsx(Button, {\n    onClick: async () => {\n      setAll(!all);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, all ? 'Свернуть' : 'Посмотреть полностью'))) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardBlog);","map":null,"metadata":{},"sourceType":"module"}