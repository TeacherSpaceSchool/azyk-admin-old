{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\components\\\\ads\\\\CardAds.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport cardAdsStyle from '../../src/styleMUI/ads/cardAds';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport { deleteAds, addAds, setAds } from '../../src/gql/ads';\nimport TextField from '@material-ui/core/TextField';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport Confirmation from '../dialog/Confirmation';\nconst CardAds = React.memo(props => {\n  const classes = cardAdsStyle();\n  const {\n    element,\n    setList\n  } = props;\n  const {\n    profile\n  } = props.user;\n  const {\n    isMobileApp\n  } = props.app; //addCard\n\n  let {\n    0: preview,\n    1: setPreview\n  } = useState(element ? element.image : '/static/add.png');\n  let {\n    0: image,\n    1: setImage\n  } = useState(undefined);\n\n  let handleChangeImage = event => {\n    setImage(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n  };\n\n  let {\n    0: title,\n    1: setTitle\n  } = useState(element ? element.title : '');\n\n  let handleTitle = event => {\n    setTitle(event.target.value);\n  };\n\n  let {\n    0: url,\n    1: setUrl\n  } = useState(element ? element.url : '');\n\n  let handleUrl = event => {\n    setUrl(event.target.value);\n  };\n\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  return __jsx(React.Fragment, null, \" \", profile.role === 'admin' ? __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: element ? element._id : 'add',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    className: isMobileApp ? classes.mediaM : classes.mediaD,\n    src: preview,\n    alt: 'Изменить',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })), __jsx(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: title,\n    className: classes.input,\n    onChange: handleTitle,\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"URL\",\n    value: url,\n    className: classes.input,\n    onChange: handleUrl,\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }))), __jsx(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, element !== undefined ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: element._id\n      };\n      if (title.length > 0 && title !== element.title) editElement.title = title;\n      if (url.length > 0 && url !== element.url) editElement.url = url;\n      if (image !== undefined) editElement.image = image;\n\n      const action = async () => {\n        setList((await setAds(editElement)).adss);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        setList((await deleteAds([element._id])).adss);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : __jsx(Button, {\n    onClick: async () => {\n      if (image !== undefined && url.length > 0 && title.length > 0) {\n        setImage(undefined);\n        setPreview('/static/add.png');\n        setTitle('');\n        setUrl('');\n\n        const action = async () => {\n          setList((await addAds({\n            image: image,\n            url: url,\n            title: title\n          })).adss);\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\")), __jsx(\"input\", {\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    id: element ? element._id : 'add',\n    type: \"file\",\n    onChange: handleChangeImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })) : element !== undefined ? __jsx(\"div\", {\n    className: isMobileApp ? classes.cardM : classes.cardD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    href: element.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    className: isMobileApp ? classes.mediaM : classes.mediaD,\n    alt: element.title,\n    src: element.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardAds);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\ads\\CardAds.js"],"names":["React","useState","Card","CardActionArea","CardContent","cardAdsStyle","connect","Button","CardActions","deleteAds","addAds","setAds","TextField","bindActionCreators","mini_dialogActions","snackbarActions","Confirmation","CardAds","memo","props","classes","element","setList","profile","user","isMobileApp","app","preview","setPreview","image","setImage","undefined","handleChangeImage","event","target","files","URL","createObjectURL","title","setTitle","handleTitle","value","url","setUrl","handleUrl","setMiniDialog","showMiniDialog","showSnackBar","role","cardM","cardD","_id","mediaM","mediaD","input","editElement","length","action","adss","display","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport cardAdsStyle from '../../src/styleMUI/ads/cardAds'\r\nimport { connect } from 'react-redux'\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { deleteAds, addAds, setAds } from '../../src/gql/ads'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport Confirmation from '../dialog/Confirmation'\r\n\r\nconst CardAds = React.memo((props) => {\r\n    const classes = cardAdsStyle();\r\n    const { element, setList } = props;\r\n    const { profile } = props.user;\r\n    const { isMobileApp } = props.app;\r\n    //addCard\r\n    let [preview, setPreview] = useState(element?element.image:'/static/add.png');\r\n    let [image, setImage] = useState(undefined);\r\n    let handleChangeImage = ((event) => {\r\n        setImage(event.target.files[0])\r\n        setPreview(URL.createObjectURL(event.target.files[0]))\r\n    })\r\n    let [title, setTitle] = useState(element?element.title:'');\r\n    let handleTitle =  (event) => {\r\n        setTitle(event.target.value)\r\n    };\r\n    let [url, setUrl] = useState(element?element.url:'');\r\n    let handleUrl =  (event) => {\r\n        setUrl(event.target.value)\r\n    };\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    return (\r\n          <> {\r\n                profile.role === 'admin' ?\r\n                    <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n                        <CardActionArea>\r\n                            <label htmlFor={element?element._id:'add'}>\r\n                                <img\r\n                                    className={isMobileApp?classes.mediaM:classes.mediaD}\r\n                                    src={preview}\r\n                                    alt={'Изменить'}\r\n                                />\r\n                            </label>\r\n                            <CardContent>\r\n                                <TextField\r\n                                    label='Имя'\r\n                                    value={title}\r\n                                    className={classes.input}\r\n                                    onChange={handleTitle}\r\n                                    inputProps={{\r\n                                        'aria-label': 'description',\r\n                                    }}\r\n                                />\r\n                                <br/>\r\n                                <br/>\r\n                                <TextField\r\n                                    label='URL'\r\n                                    value={url}\r\n                                    className={classes.input}\r\n                                    onChange={handleUrl}\r\n                                    inputProps={{\r\n                                        'aria-label': 'description',\r\n                                    }}\r\n                                />\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                        <CardActions>\r\n                            {\r\n                                element!==undefined?\r\n                                    <>\r\n                                    <Button onClick={async()=>{\r\n                                        let editElement = {_id: element._id}\r\n                                        if(title.length>0&&title!==element.title)editElement.title = title\r\n                                        if(url.length>0&&url!==element.url)editElement.url = url\r\n                                        if(image!==undefined)editElement.image = image\r\n                                        const action = async() => {\r\n                                            setList((await setAds(editElement)).adss)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                        Сохранить\r\n                                    </Button>\r\n                                    <Button onClick={async()=>{\r\n                                        const action = async() => {\r\n                                            setList((await deleteAds([element._id])).adss)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                        Удалить\r\n                                    </Button>\r\n                                    </>\r\n                                    :\r\n                                    <Button onClick={async()=> {\r\n                                        if (image !== undefined && url.length > 0 && title.length > 0) {\r\n                                            setImage(undefined)\r\n                                            setPreview('/static/add.png')\r\n                                            setTitle('')\r\n                                            setUrl('')\r\n                                            const action = async() => {\r\n                                                setList((await addAds({image: image, url: url, title: title})).adss)\r\n                                            }\r\n                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                            showMiniDialog(true)\r\n                                        } else {\r\n                                            showSnackBar('Заполните все поля')\r\n                                        }\r\n                                    }\r\n                                    } size='small' color='primary'>\r\n                                        Добавить\r\n                                    </Button>\r\n                            }\r\n                        </CardActions>\r\n                        <input\r\n                            accept='image/*'\r\n                            style={{ display: 'none' }}\r\n                            id={element?element._id:'add'}\r\n                            type='file'\r\n                            onChange={handleChangeImage}\r\n                        />\r\n                    </Card>\r\n                    :\r\n                    element!==undefined?\r\n                        <div className={isMobileApp?classes.cardM:classes.cardD}>\r\n                            <a href={element.url}>\r\n                                <img\r\n                                    className={isMobileApp?classes.mediaM:classes.mediaD}\r\n                                    alt={element.title}\r\n                                    src={element.image}\r\n                                />\r\n                            </a>\r\n                        </div>\r\n                        :null\r\n            }</>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardAds)"]},"metadata":{},"sourceType":"module"}