{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport cardCategoryStyle from '../../src/styleMUI/subcategory/cardSubcategory';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport { onoffSubCategory, addSubCategory, setSubCategory } from '../../src/gql/subcategory';\nimport Link from 'next/link';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Confirmation from '../dialog/Confirmation';\nconst CardCategory = React.memo(props => {\n  const classes = cardCategoryStyle();\n  const {\n    element,\n    setList,\n    category,\n    categorys\n  } = props;\n  const {\n    profile\n  } = props.user;\n  const {\n    isMobileApp\n  } = props.app; //addCard\n\n  let {\n    0: name,\n    1: setName\n  } = useState(element ? element.name : '');\n\n  let handleName = event => {\n    setName(event.target.value);\n  };\n\n  let {\n    0: selectCategory,\n    1: setSelectCategory\n  } = useState(element ? element.category : {});\n\n  let handleSelectCategory = event => {\n    setSelectCategory({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  return __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD\n  }, profile.role === 'admin' && (!element || element._id !== 'all') ? __jsx(React.Fragment, null, __jsx(CardActionArea, null, __jsx(CardContent, null, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: classes.input,\n    onChange: handleName,\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(FormControl, {\n    className: classes.input\n  }, __jsx(InputLabel, null, \"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044F\"), __jsx(Select, {\n    value: selectCategory._id,\n    onChange: handleSelectCategory\n  }, categorys ? categorys.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name\n  }, element.name)) : null)))), __jsx(CardActions, null, element !== undefined ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: element._id\n      };\n      if (name.length > 0 && name !== element.name) editElement.name = name;\n      if (selectCategory._id !== undefined && selectCategory._id !== element.category._id) editElement.category = selectCategory._id;\n\n      const action = async () => {\n        setList((await setSubCategory(editElement, category)).subCategorys);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        setList((await onoffSubCategory([element._id], category)).subCategorys);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, element.status === 'active' ? 'Отключить' : 'Включить'), __jsx(Link, {\n    href: \"/items/[id]\",\n    as: `/items/${element._id}`\n  }, __jsx(Button, {\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u041F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438\"))) : __jsx(Button, {\n    onClick: async () => {\n      if (name.length > 0 && selectCategory._id) {\n        setName('');\n        setSelectCategory({});\n\n        const action = async () => {\n          let subCategorys = (await addSubCategory({\n            name: name\n          }, selectCategory._id)).subCategorys;\n          console.log(subCategorys);\n          setList(subCategorys);\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"))) : element !== undefined ? __jsx(CardActionArea, null, __jsx(Link, {\n    href: \"/items/[id]\",\n    as: `/items/${element._id}`\n  }, __jsx(\"div\", {\n    className: classes.line\n  }, __jsx(\"h3\", {\n    className: classes.input\n  }, element.name)))) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCategory);","map":null,"metadata":{},"sourceType":"module"}