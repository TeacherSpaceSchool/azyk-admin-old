{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as appActions from '../../redux/actions/app';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nimport { pdDatePicker } from '../../src/lib';\nconst SetDate = React.memo(props => {\n  const {\n    classes\n  } = props;\n  let {\n    0: dateChange,\n    1: setDateChange\n  } = useState(pdDatePicker(new Date()));\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    setDate\n  } = props.appActions;\n  const width = isMobileApp ? window.innerWidth - 144 : 500;\n  return __jsx(\"div\", {\n    className: classes.main\n  }, __jsx(TextField, {\n    style: {\n      width: width\n    },\n    className: classes.textField,\n    label: \"\\u0414\\u0430\\u0442\\u0430\",\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: dateChange,\n    inputProps: {\n      'aria-label': 'description'\n    },\n    onChange: event => setDateChange(event.target.value)\n  }), __jsx(\"br\", null), __jsx(\"div\", null, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: async () => {\n      await setDate(new Date(dateChange));\n      showMiniDialog(false);\n    },\n    className: classes.button\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      showMiniDialog(false);\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\")));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    appActions: bindActionCreators(appActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(SetDate));","map":null,"metadata":{},"sourceType":"module"}