{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getEmployments = async ({\n  search: search,\n  sort: sort,\n  filter: filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($search: String!, $sort: String!, $filter: String!) {\n                        employments(search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            createdAt\n                            name\n                            email\n                            phone\n                            user \n                                {_id role status login}\n                            organization \n                                {_id name}\n                          }\n                          sortEmployment {\n                           name\n                            field\n                          }\n                          filterEmployment {\n                           name\n                           value\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getEmployment = async ({\n  _id: _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID!) {\n                        employment(_id: $_id) {\n                            _id\n                            createdAt\n                            name\n                            email\n                            phone\n                            user \n                                {_id role status login}\n                            organization \n                                {_id name}\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getEcspeditors = async ({\n  _id: _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID) {\n                        ecspeditors(_id: $_id) {\n                            _id\n                            createdAt\n                            name\n                            email\n                            phone\n                            user \n                                {_id role status login}\n                            organization \n                                {_id name}\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const onoffEmployment = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        onoffEmployment(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getEmployments(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteEmployment = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteEmployment(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getEmployments(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setEmployments = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: ID!, $name: String, $email: String, $newPass: String, $role: String, $phone: [String], $login: String) {\n                        setEmployment(_id: $_id, name: $name, email: $email, newPass: $newPass, role: $role, phone: $phone, login: $login) {\n                             data\n                        }\n                    }`\n    });\n    let list = await getEmployments(new SingletonStore().getStore().getState().app);\n    return list;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addEmployment = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($name: String!, $email: String!, $phone: [String]!, $login: String!, $password: String!, $role: String!, $organization: ID!) {\n                        addEmployment(name: $name, email: $email, phone: $phone, login: $login, password: $password, role: $role, organization: $organization) {\n                             data\n                        }\n                    }`\n    });\n    return await getEmployments(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}