{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getOrganization } from '../../src/gql/organization';\nimport organizationStyle from '../../src/styleMUI/organization/organization';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { useRouter } from 'next/router';\nimport Router from 'next/router';\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport { onoffOrganization, addOrganization, setOrganization, deleteOrganization } from '../../src/gql/organization';\nimport { getEmployment } from '../../src/gql/employment';\nimport Add from '@material-ui/icons/Done';\nimport Remove from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport Confirmation from '../../components/dialog/Confirmation';\nimport { urlMain } from '../../redux/constants/other';\nimport { checkInt } from '../../src/lib';\nconst Organization = React.memo(props => {\n  const classes = organizationStyle();\n  const {\n    data\n  } = props;\n  const {\n    isMobileApp\n  } = props.app;\n  const router = useRouter();\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  let {\n    0: statusO,\n    1: setStatusO\n  } = useState(data.organization !== null ? data.organization.status : '');\n  let {\n    0: name,\n    1: setName\n  } = useState(data.organization !== null ? data.organization.name : '');\n  let {\n    0: minimumOrder,\n    1: setMinimumOrder\n  } = useState(data.organization !== null ? data.organization.minimumOrder : 0);\n  let {\n    0: address,\n    1: setAddress\n  } = useState(data.organization !== null ? data.organization.address : []);\n  let {\n    0: newAddress,\n    1: setNewAddress\n  } = useState('');\n\n  let addAddress = () => {\n    address = [...address, newAddress];\n    setAddress(address);\n    setNewAddress('');\n  };\n\n  let editAddress = (event, idx) => {\n    address[idx] = event.target.value;\n    setAddress([...address]);\n  };\n\n  let deleteAddress = idx => {\n    address.splice(idx, 1);\n    setAddress([...address]);\n  };\n\n  let {\n    0: email,\n    1: setEmail\n  } = useState(data.organization !== null ? data.organization.email : []);\n  let {\n    0: newEmail,\n    1: setNewEmail\n  } = useState('');\n\n  let addEmail = () => {\n    email = [...email, newEmail];\n    setEmail(email);\n    setNewEmail('');\n  };\n\n  let editEmail = (event, idx) => {\n    email[idx] = event.target.value;\n    setEmail([...email]);\n  };\n\n  let deleteEmail = idx => {\n    email.splice(idx, 1);\n    setEmail([...email]);\n  };\n\n  let {\n    0: phone,\n    1: setPhone\n  } = useState(data.organization !== null ? data.organization.phone : []);\n  let {\n    0: newPhone,\n    1: setNewPhone\n  } = useState('');\n\n  let addPhone = () => {\n    phone = [...phone, newPhone];\n    setPhone(phone);\n    setNewPhone('');\n  };\n\n  let editPhone = (event, idx) => {\n    phone[idx] = event.target.value;\n    setPhone([...phone]);\n  };\n\n  let deletePhone = idx => {\n    phone.splice(idx, 1);\n    setPhone([...phone]);\n  };\n\n  let {\n    0: info,\n    1: setInfo\n  } = useState(data.organization !== null ? data.organization.info : '');\n  let {\n    0: preview,\n    1: setPreview\n  } = useState(data.organization !== null ? data.organization.image : '');\n  let {\n    0: image,\n    1: setImage\n  } = useState(undefined);\n\n  let handleChangeImage = event => {\n    setImage(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n  };\n\n  const {\n    profile\n  } = props.user;\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  return __jsx(App, {\n    filters: data.filterSubCategory,\n    sorts: data.sortSubCategory,\n    pageName: data.organization !== null ? router.query.id === 'new' ? 'Добавить' : data.organization.name : 'Ничего не найдено'\n  }, __jsx(Head, null, __jsx(\"title\", null, data.organization !== null ? router.query.id === 'new' ? 'Добавить' : data.organization.name : 'Ничего не найдено'), __jsx(\"meta\", {\n    name: \"description\",\n    content: info\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: data.organization !== null ? router.query.id === 'new' ? 'Добавить' : data.organization.name : 'Ничего не найдено'\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: info\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: preview\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `${urlMain}/organization/${router.query.id}`\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: `${urlMain}/organization/${router.query.id}`\n  })), __jsx(Card, {\n    className: classes.page\n  }, __jsx(CardActions, {\n    className: isMobileApp ? classes.column : classes.row,\n    style: isMobileApp ? {} : {\n      justifyContent: 'start',\n      alignItems: 'flex-start'\n    }\n  }, data.organization !== null ? profile.role === 'admin' || profile.role === 'организация' && data.employment.organization._id === data.organization._id ? __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: \"contained-button-file\"\n  }, __jsx(\"img\", {\n    className: classes.media1,\n    src: preview,\n    alt: 'Добавить'\n  })), __jsx(\"div\", null, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setName(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u041C\\u0438\\u043D\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u044B\\u0439 \\u0437\\u0430\\u043A\\u0430\\u0437\"), __jsx(Input, {\n    value: minimumOrder,\n    onChange: event => {\n      setMinimumOrder(checkInt(event.target.value));\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  })), address.map((element, idx) => __jsx(FormControl, {\n    key: idx,\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0410\\u0434\\u0440\\u0435\\u0441\", idx + 1), __jsx(Input, {\n    placeholder: \"\\u0410\\u0434\\u0440\\u0435\\u0441\",\n    value: element,\n    onChange: event => {\n      editAddress(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deleteAddress(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  }))), __jsx(Button, {\n    onClick: async () => {\n      addAddress();\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0430\\u0434\\u0440\\u0435\\u0441\"), __jsx(\"br\", null), __jsx(\"br\", null), email.map((element, idx) => __jsx(FormControl, {\n    key: idx,\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"Email\", idx + 1), __jsx(Input, {\n    value: element,\n    onChange: event => {\n      editEmail(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deleteEmail(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  }))), __jsx(Button, {\n    onClick: async () => {\n      addEmail();\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C email\"), __jsx(\"br\", null), __jsx(\"br\", null), phone.map((element, idx) => __jsx(FormControl, {\n    key: idx,\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\", idx + 1), __jsx(Input, {\n    value: element,\n    onChange: event => {\n      editPhone(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deletePhone(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  }))), __jsx(Button, {\n    onClick: async () => {\n      addPhone();\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D. \\u0424\\u043E\\u0440\\u043C\\u0430\\u0442: +996555780861\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(TextField, {\n    multiline: true,\n    label: \"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F\",\n    value: info,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setInfo(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"div\", {\n    className: classes.row\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick: async () => {\n      if (image !== undefined && name.length > 0 && email.length > 0 && address.length > 0 && phone.length > 0 && info.length > 0) {\n        const action = async () => {\n          await addOrganization({\n            image: image,\n            name: name,\n            address: address,\n            email: email,\n            phone: phone,\n            info: info,\n            minimumOrder: minimumOrder\n          });\n          Router.push('/organizations');\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: data.organization._id\n      };\n      if (image !== undefined) editElement.image = image;\n      if (name.length > 0 && name !== data.organization.name) editElement.name = name;\n      if (address.length > 0 && address !== data.organization.address) editElement.address = address;\n      if (email.length > 0 && email !== data.organization.email) editElement.email = email;\n      if (phone.length > 0 && phone !== data.organization.phone) editElement.phone = phone;\n      if (info.length > 0 && info !== data.organization.info) editElement.info = info;\n      if (minimumOrder !== data.organization.minimumOrder) editElement.minimumOrder = minimumOrder;\n\n      const action = async () => {\n        await setOrganization(editElement);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), profile.role === 'admin' ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await onoffOrganization([data.organization._id]);\n        setStatusO(statusO === 'active' ? 'deactive' : 'active');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, statusO === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await deleteOrganization([data.organization._id]);\n        Router.push('/organizations');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null)))) : router.query.id === 'new' ? 'Ничего не найдено' : __jsx(React.Fragment, null, __jsx(\"img\", {\n    className: classes.media1,\n    src: preview,\n    alt: name\n  }), __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.name\n  }, name), __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0410\\u0434\\u0440\\u0435\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.column\n  }, address.map((element, idx) => __jsx(\"div\", {\n    key: idx,\n    className: classes.value\n  }, element)))), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D:\\xA0\"), __jsx(\"div\", {\n    className: classes.column\n  }, phone.map((element, idx) => __jsx(\"a\", {\n    href: `tel:${element}`,\n    key: idx,\n    className: classes.value\n  }, element)))), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"E-mail:\\xA0\"), __jsx(\"div\", {\n    className: classes.column\n  }, email.map((element, idx) => __jsx(\"a\", {\n    href: `mailto:${element}`,\n    key: idx,\n    className: classes.value\n  }, element)))), minimumOrder > 0 ? __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041C\\u0438\\u043D\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u044B\\u0439 \\u0437\\u0430\\u043A\\u0430\\u0437:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, minimumOrder, \"\\xA0\\u0441\\u043E\\u043C\")) : null, __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.info\n  }, info))) : 'Ничего не найдено')), __jsx(\"input\", {\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    id: \"contained-button-file\",\n    type: \"file\",\n    onChange: handleChangeImage\n  }));\n});\n\nOrganization.getInitialProps = async function (ctx) {\n  return {\n    data: _objectSpread({}, ctx.store.getState().user.authenticated && ['организация', 'менеджер'].includes(ctx.store.getState().user.profile.role) ? await getEmployment({\n      _id: ctx.store.getState().user.profile._id\n    }) : {}, ctx.query.id !== 'new' ? await getOrganization({\n      _id: ctx.query.id\n    }) : {\n      organization: {\n        name: '',\n        image: '/static/add.png',\n        address: [],\n        email: [],\n        phone: [],\n        info: '',\n        minimumOrder: 0\n      }\n    })\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Organization);","map":null,"metadata":{},"sourceType":"module"}