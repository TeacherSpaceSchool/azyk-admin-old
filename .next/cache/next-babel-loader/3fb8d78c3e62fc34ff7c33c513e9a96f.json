{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport cardCategoryStyle from '../../src/styleMUI/category/cardCategory';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport { onoffCategory, addCategory, setCategory, deleteCategory } from '../../src/gql/category';\nimport TextField from '@material-ui/core/TextField';\nimport Link from 'next/link';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport dynamic from 'next/dynamic';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nvar Confirmation = dynamic(function () {\n  return import('../dialog/Confirmation');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../dialog/Confirmation')];\n    },\n    modules: ['../dialog/Confirmation']\n  }\n});\nvar CardCategory = React.memo(function (props) {\n  var classes = cardCategoryStyle();\n  var element = props.element,\n      setList = props.setList;\n  var profile = props.user.profile;\n  var isMobileApp = props.app.isMobileApp; //addCard\n\n  var _useState = useState(element ? element.image : '/static/add.png'),\n      preview = _useState[0],\n      setPreview = _useState[1];\n\n  var _useState2 = useState(undefined),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var handleChangeImage = function handleChangeImage(event) {\n    setImage(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n  };\n\n  var _useState3 = useState(element ? element.name : ''),\n      name = _useState3[0],\n      setName = _useState3[1];\n\n  var handleName = function handleName(event) {\n    setName(event.target.value);\n  };\n\n  var _props$mini_dialogAct = props.mini_dialogActions,\n      setMiniDialog = _props$mini_dialogAct.setMiniDialog,\n      showMiniDialog = _props$mini_dialogAct.showMiniDialog;\n  var showSnackBar = props.snackbarActions.showSnackBar;\n  return __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD\n  }, name !== 'Не задано' && setList !== 'all' && profile.role === 'admin' ? __jsx(React.Fragment, null, __jsx(CardActionArea, null, __jsx(CardContent, null, __jsx(\"div\", {\n    className: classes.line\n  }, __jsx(\"label\", {\n    htmlFor: element ? element._id : 'add'\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: classes.media,\n    src: preview,\n    alt: 'Изменить'\n  })), __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: handleName,\n    inputProps: {\n      'aria-label': 'description'\n    }\n  })))), __jsx(CardActions, null, element !== undefined ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var editElement, action;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              editElement = {\n                _id: element._id\n              };\n              if (name.length > 0 && name !== element.name) editElement.name = name;\n              if (image !== undefined) editElement.image = image;\n\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.t0 = setList;\n                          _context.next = 3;\n                          return setCategory(editElement);\n\n                        case 3:\n                          _context.t1 = _context.sent.categorys;\n                          (0, _context.t0)(_context.t1);\n\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function action() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action\n              }));\n              showMiniDialog(true);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref4 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.t0 = setList;\n                          _context3.next = 3;\n                          return onoffCategory([element._id]);\n\n                        case 3:\n                          _context3.t1 = _context3.sent.categorys;\n                          (0, _context3.t0)(_context3.t1);\n\n                        case 5:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function action() {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, element.status === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    size: \"small\",\n    color: \"primary\",\n    onClick: function onClick() {\n      var action =\n      /*#__PURE__*/\n      function () {\n        var _ref5 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee5() {\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.t0 = setList;\n                  _context5.next = 3;\n                  return deleteCategory([element._id]);\n\n                case 3:\n                  _context5.t1 = _context5.sent.categorys;\n                  (0, _context5.t0)(_context5.t1);\n\n                case 5:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function action() {\n          return _ref5.apply(this, arguments);\n        };\n      }();\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    }\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"), __jsx(Link, {\n    href: \"/subcategory/[id]\",\n    as: \"/subcategory/\".concat(element._id)\n  }, __jsx(Button, {\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u041F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438\"))) : __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (image !== undefined && name.length > 0) {\n                setImage(undefined);\n                setPreview('/static/add.png');\n                setName('');\n\n                action =\n                /*#__PURE__*/\n                function () {\n                  var _ref7 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee6() {\n                    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            _context6.t0 = setList;\n                            _context6.next = 3;\n                            return addCategory({\n                              image: image,\n                              name: name\n                            });\n\n                          case 3:\n                            _context6.t1 = _context6.sent.categorys;\n                            (0, _context6.t0)(_context6.t1);\n\n                          case 5:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n\n                  return function action() {\n                    return _ref7.apply(this, arguments);\n                  };\n                }();\n\n                setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                  action: action\n                }));\n                showMiniDialog(true);\n              } else showSnackBar('Заполните все поля');\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\")), __jsx(\"input\", {\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    id: element ? element._id : 'add',\n    type: \"file\",\n    onChange: handleChangeImage\n  })) : name !== 'Не задано' ? __jsx(CardActionArea, null, __jsx(Link, {\n    href: \"/subcategory/[id]\",\n    as: \"/subcategory/\".concat(element._id)\n  }, __jsx(\"div\", {\n    className: classes.line\n  }, __jsx(\"label\", {\n    htmlFor: \"contained-button-file\"\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: classes.media,\n    src: element.image,\n    alt: element.name\n  })), __jsx(\"h3\", {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, element.name)))) : name === 'Не задано' && profile.role === 'admin' ? __jsx(CardActionArea, null, __jsx(Link, {\n    href: \"/subcategory/[id]\",\n    as: \"/subcategory/\".concat(element._id)\n  }, __jsx(\"div\", {\n    className: classes.line\n  }, __jsx(\"label\", {\n    htmlFor: \"contained-button-file\"\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: classes.media,\n    src: element.image,\n    alt: element.name\n  })), __jsx(\"h3\", {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, element.name)))) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCategory);","map":null,"metadata":{},"sourceType":"module"}