{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: ID!, $count: Int!) {\\n                        setBasket(_id: $_id, count: $count) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($item: ID!, $count: Int!, $organization: ID!) {\\n                        addBasket(item: $item, count: $count, organization: $organization) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: [ID]!) {\\n                        deleteBasket(_id: $_id) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    query {\\n                        countBasket \\n                    }\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    query{\\n                        baskets {\\n                            _id\\n                            createdAt\\n                            item \\n                                {\\n                                    _id \\n                                    name \\n                                    stock \\n                                    image \\n                                    price\\n                                    organization\\n                                        {_id name minimumOrder}\\n                                }\\n                            count\\n                        }\\n                    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nimport { setCountBasket } from '../../redux/actions/app';\nexport var getBasket =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var client, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context.next = 4;\n            return client.query({\n              query: gql(_templateObject())\n            });\n\n          case 4:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n\n  return function getBasket() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getCountBasket =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var client, res, basket;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            client = new SingletonApolloClient().getClient();\n\n            if (!new SingletonStore().getStore().getState().user.authenticated) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return client.query({\n              query: gql(_templateObject2())\n            });\n\n          case 5:\n            res = _context2.sent;\n            _context2.next = 9;\n            break;\n\n          case 8:\n            if (localStorage.basket) {\n              basket = JSON.parse(localStorage.basket);\n              res = {\n                data: {\n                  countBasket: basket.length\n                }\n              };\n            }\n\n          case 9:\n            new SingletonStore().getStore().dispatch(setCountBasket(res.data.countBasket));\n            _context2.next = 15;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 12]]);\n  }));\n\n  return function getCountBasket() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var deleteBasket =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(ids) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context3.next = 4;\n            return client.mutate({\n              variables: {\n                _id: ids\n              },\n              mutation: gql(_templateObject3())\n            });\n\n          case 4:\n            _context3.next = 6;\n            return getCountBasket();\n\n          case 6:\n            _context3.next = 8;\n            return getBasket(new SingletonStore().getStore().getState().app);\n\n          case 8:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(_context3.t0);\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 11]]);\n  }));\n\n  return function deleteBasket(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var addBasket =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context4.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject4())\n            });\n\n          case 4:\n            _context4.next = 6;\n            return getCountBasket();\n\n          case 6:\n            _context4.next = 11;\n            break;\n\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.error(_context4.t0);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 8]]);\n  }));\n\n  return function addBasket(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var setBasket =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context5.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject5())\n            });\n\n          case 4:\n            _context5.next = 6;\n            return getCountBasket();\n\n          case 6:\n            _context5.next = 8;\n            return getBasket(new SingletonStore().getStore().getState().app);\n\n          case 8:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 11:\n            _context5.prev = 11;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.error(_context5.t0);\n\n          case 14:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 11]]);\n  }));\n\n  return function setBasket(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\basket.js"],"names":["gql","SingletonApolloClient","SingletonStore","setCountBasket","getBasket","client","getClient","query","res","data","console","error","getCountBasket","getStore","getState","user","authenticated","localStorage","basket","JSON","parse","countBasket","length","dispatch","deleteBasket","ids","mutate","variables","_id","mutation","app","addBasket","element","setBasket"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\nimport {\r\n    setCountBasket\r\n} from '../../redux/actions/app'\r\n\r\nexport const getBasket = async()=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                query: gql`\r\n                    query{\r\n                        baskets {\r\n                            _id\r\n                            createdAt\r\n                            item \r\n                                {\r\n                                    _id \r\n                                    name \r\n                                    stock \r\n                                    image \r\n                                    price\r\n                                    organization\r\n                                        {_id name minimumOrder}\r\n                                }\r\n                            count\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getCountBasket = async()=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res;\r\n        if(new SingletonStore().getStore().getState().user.authenticated)\r\n            res = await client.query({\r\n                query : gql`\r\n                    query {\r\n                        countBasket \r\n                    }`\r\n            })\r\n        else if(localStorage.basket) {\r\n            let basket = JSON.parse(localStorage.basket)\r\n            res = { data: { countBasket: basket.length}}\r\n        }\r\n        new SingletonStore().getStore().dispatch(setCountBasket(res.data.countBasket))\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteBasket = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteBasket(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        await getCountBasket()\r\n        return await getBasket(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addBasket = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($item: ID!, $count: Int!, $organization: ID!) {\r\n                        addBasket(item: $item, count: $count, organization: $organization) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        await getCountBasket()\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setBasket = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $count: Int!) {\r\n                        setBasket(_id: $_id, count: $count) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        await getCountBasket()\r\n        return await getBasket(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}