{"ast":null,"code":"import { AUTHENTICATED, UNAUTHENTICATED, SET_PROFILE, SET_AUTH, ERROR_AUTHENTICATED } from '../constants/user';\nimport { SHOW_MINI_DIALOG } from '../constants/mini_dialog';\nimport { SET_COUNT_BASKET } from '../constants/app';\nimport Cookies from 'js-cookie';\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../../src/singleton/client';\nimport Router from 'next/router';\nimport { SingletonStore } from '../../src/singleton/store';\nexport function signup(payload) {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.mutate({\n        variables: payload,\n        mutation: gql`\n                    mutation ($phone: String!, $password: String!) {\n                        signupuser(phone: $phone, password: $password) {\n                           role\n                           status\n                           phone\n                           organization\n                           _id\n                        }\n                    }`\n      });\n      if (result.data.signupuser.role === 'Проверьте данные') await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });else {\n        await Router.push('/');\n        /*await dispatch({\r\n            type: SHOW_MINI_DIALOG,\r\n            payload: false\r\n        })\r\n        await dispatch({type: AUTHENTICATED});\r\n        await dispatch({\r\n            type: SET_PROFILE,\r\n            payload: result.data.signupuser\r\n        })*/\n\n        window.location.reload();\n      }\n    } catch (error) {\n      dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });\n    }\n  };\n}\nexport function signin(payload) {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.mutate({\n        variables: payload,\n        mutation: gql`\n                    mutation ($phone: String!, $password: String!) {\n                        signinuser(phone: $phone, password: $password) {\n                           role\n                           status\n                           phone\n                           organization\n                           _id\n                        }\n                    }`\n      });\n      if (result.data.signinuser.role === 'Проверьте данные') await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });else {\n        await Router.push('/');\n        window.location.reload();\n        /*await dispatch({\r\n            type: SHOW_MINI_DIALOG,\r\n            payload: false\r\n        })\r\n        await dispatch({type: AUTHENTICATED});\r\n        await dispatch({\r\n            type: SET_PROFILE,\r\n            payload: result.data.signinuser\r\n        })*/\n      }\n    } catch (error) {\n      console.log(error);\n      await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });\n    }\n  };\n}\nexport function checkAuthenticated() {\n  return async dispatch => {\n    try {\n      if (Cookies.get('jwt')) {\n        dispatch({\n          type: AUTHENTICATED\n        });\n      } else {\n        dispatch({\n          type: UNAUTHENTICATED\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: UNAUTHENTICATED\n      });\n    }\n  };\n}\nexport function setAuthenticated(auth) {\n  return {\n    type: SET_AUTH,\n    payload: auth\n  };\n}\nexport function logout() {\n  return async dispatch => {\n    Router.push('/');\n    Cookies.remove('jwt');\n    dispatch({\n      type: UNAUTHENTICATED\n    });\n    dispatch({\n      type: SET_COUNT_BASKET,\n      payload: 0\n    });\n    await dispatch({\n      type: SET_PROFILE,\n      payload: {}\n    }); //setTimeout(()=>window.location.reload(),100)\n  };\n}\nexport function setProfile() {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.query({\n        query: gql`\n                    query {\n                        getStatus {\n                           role\n                           status\n                           phone\n                           organization\n                           _id\n                          }\n                    }`\n      });\n      await dispatch({\n        type: SET_PROFILE,\n        payload: result.data.getStatus\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\nexport async function getProfile() {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let result = await client.query({\n      query: gql`\n                   query {\n                       getStatus {\n                          role\n                          status\n                          phone\n                          organization\n                          _id\n                         }\n                   }`\n    });\n    return result.data.getStatus;\n  } catch (error) {\n    console.error(error);\n  }\n}","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\redux\\actions\\user.js"],"names":["AUTHENTICATED","UNAUTHENTICATED","SET_PROFILE","SET_AUTH","ERROR_AUTHENTICATED","SHOW_MINI_DIALOG","SET_COUNT_BASKET","Cookies","gql","SingletonApolloClient","Router","SingletonStore","signup","payload","dispatch","client","getClient","result","mutate","variables","mutation","data","signupuser","role","type","push","window","location","reload","error","signin","signinuser","console","log","checkAuthenticated","get","setAuthenticated","auth","logout","remove","setProfile","query","getStatus","getProfile"],"mappings":"AAAA,SACIA,aADJ,EAEIC,eAFJ,EAGIC,WAHJ,EAIIC,QAJJ,EAKIC,mBALJ,QAMO,mBANP;AAOA,SACIC,gBADJ,QAEO,0BAFP;AAGA,SACIC,gBADJ,QAEO,kBAFP;AAGA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,qBAAT,QAAsC,4BAAtC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,OAAO,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AAC5B,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,UAAIC,MAAM,GAAG,MAAMF,MAAM,CAACG,MAAP,CAAc;AAC7BC,QAAAA,SAAS,EAAEN,OADkB;AAE7BO,QAAAA,QAAQ,EAAGZ,GAAI;;;;;;;;;;AAFc,OAAd,CAAnB;AAYA,UAAGS,MAAM,CAACI,IAAP,CAAYC,UAAZ,CAAuBC,IAAvB,KAA8B,kBAAjC,EACI,MAAMT,QAAQ,CAAC;AACXU,QAAAA,IAAI,EAAEpB,mBADK;AAEXS,QAAAA,OAAO,EAAE;AAFE,OAAD,CAAd,CADJ,KAKK;AACD,cAAMH,MAAM,CAACe,IAAP,CAAY,GAAZ,CAAN;AACA;;;;;;;;;;AASAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;AACJ,KAhCD,CAgCE,OAAMC,KAAN,EAAa;AACXf,MAAAA,QAAQ,CAAC;AACLU,QAAAA,IAAI,EAAEpB,mBADD;AAELS,QAAAA,OAAO,EAAE;AAFJ,OAAD,CAAR;AAIH;AACJ,GAvCD;AAwCH;AAED,OAAO,SAASiB,MAAT,CAAgBjB,OAAhB,EAAyB;AAC5B,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,UAAIC,MAAM,GAAG,MAAMF,MAAM,CAACG,MAAP,CAAc;AAC7BC,QAAAA,SAAS,EAAEN,OADkB;AAE7BO,QAAAA,QAAQ,EAAGZ,GAAI;;;;;;;;;;AAFc,OAAd,CAAnB;AAYA,UAAGS,MAAM,CAACI,IAAP,CAAYU,UAAZ,CAAuBR,IAAvB,KAA8B,kBAAjC,EACI,MAAMT,QAAQ,CAAC;AACXU,QAAAA,IAAI,EAAEpB,mBADK;AAEXS,QAAAA,OAAO,EAAE;AAFE,OAAD,CAAd,CADJ,KAKK;AACD,cAAMH,MAAM,CAACe,IAAP,CAAY,GAAZ,CAAN;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACA;;;;;;;;;AASH;AACJ,KAhCD,CAgCE,OAAMC,KAAN,EAAa;AACXG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,YAAMf,QAAQ,CAAC;AACXU,QAAAA,IAAI,EAAEpB,mBADK;AAEXS,QAAAA,OAAO,EAAE;AAFE,OAAD,CAAd;AAIH;AACJ,GAxCD;AAyCH;AAED,OAAO,SAASqB,kBAAT,GAA8B;AACjC,SAAO,MAAOpB,QAAP,IAAoB;AACvB,QAAI;AACA,UAAIP,OAAO,CAAC4B,GAAR,CAAY,KAAZ,CAAJ,EAAwB;AACpBrB,QAAAA,QAAQ,CAAE;AAACU,UAAAA,IAAI,EAAExB;AAAP,SAAF,CAAR;AACH,OAFD,MAEO;AACHc,QAAAA,QAAQ,CAAE;AAACU,UAAAA,IAAI,EAAEvB;AAAP,SAAF,CAAR;AACH;AACJ,KAND,CAME,OAAO4B,KAAP,EAAc;AACZf,MAAAA,QAAQ,CAAE;AAACU,QAAAA,IAAI,EAAEvB;AAAP,OAAF,CAAR;AACH;AACJ,GAVD;AAWH;AAED,OAAO,SAASmC,gBAAT,CAA0BC,IAA1B,EAAgC;AACnC,SAAO;AACHb,IAAAA,IAAI,EAAErB,QADH;AAEHU,IAAAA,OAAO,EAAEwB;AAFN,GAAP;AAIH;AAED,OAAO,SAASC,MAAT,GAAkB;AACrB,SAAO,MAAOxB,QAAP,IAAoB;AACvBJ,IAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AACAlB,IAAAA,OAAO,CAACgC,MAAR,CAAe,KAAf;AACAzB,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEvB;AADD,KAAD,CAAR;AAGAa,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAElB,gBADD;AAELO,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIA,UAAMC,QAAQ,CAAC;AACXU,MAAAA,IAAI,EAAEtB,WADK;AAEXW,MAAAA,OAAO,EAAE;AAFE,KAAD,CAAd,CAVuB,CAcvB;AAGH,GAjBD;AAkBH;AAED,OAAO,SAAS2B,UAAT,GAAsB;AACzB,SAAO,MAAO1B,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,UAAIC,MAAM,GAAG,MAAMF,MAAM,CACpB0B,KADc,CACR;AACHA,QAAAA,KAAK,EAAEjC,GAAI;;;;;;;;;;AADR,OADQ,CAAnB;AAaA,YAAMM,QAAQ,CAAC;AACXU,QAAAA,IAAI,EAAEtB,WADK;AAEXW,QAAAA,OAAO,EAAEI,MAAM,CAACI,IAAP,CAAYqB;AAFV,OAAD,CAAd;AAIH,KAnBD,CAmBE,OAAMb,KAAN,EAAa;AACXG,MAAAA,OAAO,CAACH,KAAR,CAAcA,KAAd;AACH;AACJ,GAvBD;AAwBH;AAED,OAAO,eAAec,UAAf,GAA4B;AAC/B,MAAI;AACA,UAAM5B,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,QAAIC,MAAM,GAAG,MAAMF,MAAM,CACpB0B,KADc,CACR;AACHA,MAAAA,KAAK,EAAEjC,GAAI;;;;;;;;;;AADR,KADQ,CAAnB;AAaA,WAAOS,MAAM,CAACI,IAAP,CAAYqB,SAAnB;AACH,GAhBD,CAgBE,OAAMb,KAAN,EAAa;AACXG,IAAAA,OAAO,CAACH,KAAR,CAAcA,KAAd;AACH;AACJ","sourcesContent":["import {\r\n    AUTHENTICATED,\r\n    UNAUTHENTICATED,\r\n    SET_PROFILE,\r\n    SET_AUTH,\r\n    ERROR_AUTHENTICATED\r\n} from '../constants/user'\r\nimport {\r\n    SHOW_MINI_DIALOG\r\n} from '../constants/mini_dialog'\r\nimport {\r\n    SET_COUNT_BASKET\r\n} from '../constants/app'\r\nimport Cookies from 'js-cookie';\r\nimport { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../../src/singleton/client';\r\nimport Router from 'next/router'\r\nimport { SingletonStore } from '../../src/singleton/store';\r\n\r\nexport function signup(payload) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient()\r\n            let result = await client.mutate({\r\n                variables: payload,\r\n                mutation : gql`\r\n                    mutation ($phone: String!, $password: String!) {\r\n                        signupuser(phone: $phone, password: $password) {\r\n                           role\r\n                           status\r\n                           phone\r\n                           organization\r\n                           _id\r\n                        }\r\n                    }`})\r\n            if(result.data.signupuser.role==='Проверьте данные')\r\n                await dispatch({\r\n                    type: ERROR_AUTHENTICATED,\r\n                    payload: true\r\n                })\r\n            else {\r\n                await Router.push('/')\r\n                /*await dispatch({\r\n                    type: SHOW_MINI_DIALOG,\r\n                    payload: false\r\n                })\r\n                await dispatch({type: AUTHENTICATED});\r\n                await dispatch({\r\n                    type: SET_PROFILE,\r\n                    payload: result.data.signupuser\r\n                })*/\r\n                window.location.reload()\r\n            }\r\n        } catch(error) {\r\n            dispatch({\r\n                type: ERROR_AUTHENTICATED,\r\n                payload: true\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function signin(payload) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient();\r\n            let result = await client.mutate({\r\n                variables: payload,\r\n                mutation : gql`\r\n                    mutation ($phone: String!, $password: String!) {\r\n                        signinuser(phone: $phone, password: $password) {\r\n                           role\r\n                           status\r\n                           phone\r\n                           organization\r\n                           _id\r\n                        }\r\n                    }`})\r\n            if(result.data.signinuser.role==='Проверьте данные')\r\n                await dispatch({\r\n                    type: ERROR_AUTHENTICATED,\r\n                    payload: true\r\n                })\r\n            else {\r\n                await Router.push('/')\r\n                window.location.reload()\r\n                /*await dispatch({\r\n                    type: SHOW_MINI_DIALOG,\r\n                    payload: false\r\n                })\r\n                await dispatch({type: AUTHENTICATED});\r\n                await dispatch({\r\n                    type: SET_PROFILE,\r\n                    payload: result.data.signinuser\r\n                })*/\r\n            }\r\n        } catch(error) {\r\n            console.log(error)\r\n            await dispatch({\r\n                type: ERROR_AUTHENTICATED,\r\n                payload: true\r\n            })\r\n        }\r\n    };\r\n}\r\n\r\nexport function checkAuthenticated() {\r\n    return async (dispatch) => {\r\n        try {\r\n            if (Cookies.get('jwt')) {\r\n                dispatch ({type: AUTHENTICATED});\r\n            } else {\r\n                dispatch ({type: UNAUTHENTICATED});\r\n            }\r\n        } catch (error) {\r\n            dispatch ({type: UNAUTHENTICATED});\r\n        }\r\n    };\r\n}\r\n\r\nexport function setAuthenticated(auth) {\r\n    return {\r\n        type: SET_AUTH,\r\n        payload: auth\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    return async (dispatch) => {\r\n        Router.push('/')\r\n        Cookies.remove('jwt');\r\n        dispatch({\r\n            type: UNAUTHENTICATED,\r\n        })\r\n        dispatch({\r\n            type: SET_COUNT_BASKET,\r\n            payload: 0\r\n        })\r\n        await dispatch({\r\n            type: SET_PROFILE,\r\n            payload: {}\r\n        })\r\n        //setTimeout(()=>window.location.reload(),100)\r\n\r\n\r\n    }\r\n}\r\n\r\nexport function setProfile() {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient()\r\n            let result = await client\r\n                .query({\r\n                    query: gql`\r\n                    query {\r\n                        getStatus {\r\n                           role\r\n                           status\r\n                           phone\r\n                           organization\r\n                           _id\r\n                          }\r\n                    }`\r\n                })\r\n            await dispatch({\r\n                type: SET_PROFILE,\r\n                payload: result.data.getStatus\r\n            })\r\n        } catch(error) {\r\n            console.error(error)\r\n        }\r\n    };\r\n}\r\n\r\nexport async function getProfile() {\r\n    try {\r\n        const client = new SingletonApolloClient().getClient()\r\n        let result = await client\r\n            .query({\r\n                query: gql`\r\n                   query {\r\n                       getStatus {\r\n                          role\r\n                          status\r\n                          phone\r\n                          organization\r\n                          _id\r\n                         }\r\n                   }`\r\n            })\r\n        return result.data.getStatus\r\n    } catch(error) {\r\n        console.error(error)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}