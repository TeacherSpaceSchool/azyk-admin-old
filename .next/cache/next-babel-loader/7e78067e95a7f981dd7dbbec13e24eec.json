{"ast":null,"code":"import { AUTHENTICATED, UNAUTHENTICATED, SET_PROFILE, SET_AUTH, ERROR_AUTHENTICATED } from '../constants/user';\nimport { SHOW_MINI_DIALOG } from '../constants/mini_dialog';\nimport Cookies from 'js-cookie';\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../../src/singleton/client';\nimport Router from 'next/router';\nexport function signup(payload) {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.mutate({\n        variables: payload,\n        mutation: gql`\n                    mutation ($phone: String!, $password: String!) {\n                        signupuser(phone: $phone, password: $password) {\n                            data,\n                        }\n                    }`\n      });\n      if (result.data.signupuser.data === 'Проверьте данные') await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });else {\n        await dispatch({\n          type: AUTHENTICATED\n        });\n        await dispatch({\n          type: SHOW_MINI_DIALOG,\n          payload: false\n        });\n        window.location.reload();\n      }\n    } catch (error) {\n      dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });\n    }\n  };\n}\nexport function signin(payload) {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.mutate({\n        variables: payload,\n        mutation: gql`\n                    mutation ($phone: String!, $password: String!) {\n                        signinuser(phone: $phone, password: $password) {\n                            data,\n                        }\n                    }`\n      });\n      if (result.data.signinuser.data === 'Проверьте данные') await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });else {\n        await dispatch({\n          type: AUTHENTICATED\n        });\n        await dispatch({\n          type: SHOW_MINI_DIALOG,\n          payload: false\n        });\n        window.location.reload();\n      }\n    } catch (error) {\n      console.log(error);\n      await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });\n    }\n  };\n}\nexport function checkAuthenticated() {\n  return async dispatch => {\n    try {\n      if (Cookies.get('jwt')) {\n        dispatch({\n          type: AUTHENTICATED\n        });\n      } else {\n        dispatch({\n          type: UNAUTHENTICATED\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: UNAUTHENTICATED\n      });\n    }\n  };\n}\nexport function setAuthenticated(auth) {\n  return {\n    type: SET_AUTH,\n    payload: auth\n  };\n}\nexport function logout() {\n  return async dispatch => {\n    Cookies.remove('jwt');\n    dispatch({\n      type: UNAUTHENTICATED\n    });\n    Router.push('/');\n    window.location.reload();\n  };\n}\nexport function setProfile() {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.query({\n        query: gql`\n                    query {\n                        getStatus {\n                           role\n                           status\n                           phone\n                           organization\n                           _id\n                          }\n                    }`\n      });\n      await dispatch({\n        type: SET_PROFILE,\n        payload: result.data.getStatus\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}