{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n\n/* eslint-disable no-extra-boolean-cast */\nimport { urlGQL, urlGQLws } from '../../redux/constants/other';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'node-fetch';\nimport { getJWT } from '../lib';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, split } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport * as ws from 'ws';\nimport { SingletonStore } from '../singleton/store';\nimport { showSnackBar } from '../../redux/actions/snackbar';\nexport class SingletonApolloClient {\n  constructor(req) {\n    console.log(urlGQL);\n\n    if (!!SingletonApolloClient.instance) {\n      return SingletonApolloClient.instance;\n    }\n\n    SingletonApolloClient.instance = this;\n    const uploadLink = createUploadLink({\n      uri: urlGQL,\n      fetch: fetch,\n      credentials: 'include'\n    });\n    const authLink = setContext((_, {\n      headers\n    }) => {\n      return {\n        headers: _objectSpread({}, headers, {\n          authorization: this.jwt ? `Bearer ${this.jwt}` : ''\n        })\n      };\n    });\n    const linkError = onError(({\n      graphQLErrors,\n      networkError\n    }) => {\n      if (graphQLErrors) graphQLErrors.map(({\n        message,\n        locations,\n        path\n      }) => {\n        new SingletonStore().getStore().dispatch(showSnackBar('Ошибка'));\n        console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n      });\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    });\n    const wsLink = new WebSocketLink({\n      uri: urlGQLws,\n      options: {\n        reconnect: true\n      },\n      webSocketImpl: process.browser ? WebSocket : ws\n    });\n    const mainLink = split(({\n      query\n    }) => {\n      const definition = getMainDefinition(query);\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n    }, wsLink, uploadLink);\n    const link = ApolloLink.from([linkError, authLink, mainLink]);\n    this.client = new ApolloClient({\n      link: link,\n      cache: new InMemoryCache(),\n      defaultOptions: {\n        watchQuery: {\n          fetchPolicy: 'cache-and-network',\n          errorPolicy: 'ignore'\n        },\n        query: {\n          fetchPolicy: 'network-only',\n          errorPolicy: 'all'\n        },\n        mutate: {\n          errorPolicy: 'all'\n        }\n      }\n    });\n    this.jwt = getJWT(req ? req.headers.cookie : document.cookie);\n    return this;\n  }\n\n  getClient() {\n    return this.client;\n  }\n\n}","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\singleton\\client.js"],"names":["urlGQL","urlGQLws","ApolloClient","InMemoryCache","fetch","getJWT","setContext","onError","ApolloLink","split","createUploadLink","WebSocketLink","getMainDefinition","ws","SingletonStore","showSnackBar","SingletonApolloClient","constructor","req","console","log","instance","uploadLink","uri","credentials","authLink","_","headers","authorization","jwt","linkError","graphQLErrors","networkError","map","message","locations","path","getStore","dispatch","wsLink","options","reconnect","webSocketImpl","process","browser","WebSocket","mainLink","query","definition","kind","operation","link","from","client","cache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","mutate","cookie","document","getClient"],"mappings":"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","sourcesContent":["/* eslint-disable no-extra-boolean-cast */\r\nimport { urlGQL, urlGQLws } from '../../redux/constants/other';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport fetch from 'node-fetch';\r\nimport { getJWT } from '../lib'\r\nimport { setContext } from 'apollo-link-context';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink, split  } from 'apollo-link';\r\nimport { createUploadLink } from 'apollo-upload-client'\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport * as ws from 'ws';\r\nimport { SingletonStore } from '../singleton/store';\r\nimport {\r\n    showSnackBar\r\n} from '../../redux/actions/snackbar'\r\nexport class SingletonApolloClient {\r\n    constructor(req) {\r\n        console.log(urlGQL)\r\n        if (!!SingletonApolloClient.instance) {\r\n            return SingletonApolloClient.instance;\r\n        }\r\n        SingletonApolloClient.instance = this;\r\n        const uploadLink = createUploadLink({\r\n            uri: urlGQL,\r\n            fetch: fetch,\r\n            credentials: 'include'\r\n        });\r\n        const authLink = setContext((_, { headers }) => {\r\n            return {\r\n                headers: {\r\n                    ...headers,\r\n                    authorization: this.jwt ? `Bearer ${this.jwt}` : '',\r\n                }\r\n            }\r\n        });\r\n        const linkError = onError(({ graphQLErrors, networkError }) => {\r\n            if (graphQLErrors)\r\n                graphQLErrors.map(({ message, locations, path }) =>{\r\n                    new SingletonStore().getStore().dispatch(showSnackBar('Ошибка'))\r\n                    console.log(\r\n                        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n                    )\r\n                });\r\n            if (networkError) console.log(`[Network error]: ${networkError}`);\r\n        });\r\n        const wsLink = new WebSocketLink({\r\n            uri: urlGQLws,\r\n            options: {\r\n                reconnect: true\r\n            },\r\n            webSocketImpl: process.browser?WebSocket:ws\r\n        });\r\n        const mainLink = split(\r\n            ({ query }) => {\r\n                const definition = getMainDefinition(query);\r\n                return (\r\n                    definition.kind === 'OperationDefinition' &&\r\n                    definition.operation === 'subscription'\r\n                );\r\n            },\r\n            wsLink,\r\n            uploadLink,\r\n        );\r\n        const link = ApolloLink.from([\r\n            linkError,\r\n            authLink,\r\n            mainLink\r\n        ]);\r\n        this.client = new ApolloClient({\r\n            link: link,\r\n            cache: new InMemoryCache(),\r\n            defaultOptions: {\r\n                watchQuery: {\r\n                    fetchPolicy: 'cache-and-network',\r\n                    errorPolicy: 'ignore',\r\n                },\r\n                query: {\r\n                    fetchPolicy: 'network-only',\r\n                    errorPolicy: 'all',\r\n                },\r\n                mutate: {\r\n                    errorPolicy: 'all',\r\n                },\r\n            },\r\n\r\n        });\r\n        this.jwt = getJWT(req?req.headers.cookie:document.cookie)\r\n\r\n        return this;\r\n    }\r\n\r\n    getClient() {\r\n        return this.client;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}