{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\n/* eslint-disable no-extra-boolean-cast */\nimport { urlGQL, urlGQLws } from '../../redux/constants/other';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'node-fetch';\nimport { getJWT } from '../lib';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, split } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport * as ws from 'ws';\nimport { SingletonStore } from '../singleton/store';\nimport { showSnackBar } from '../../redux/actions/snackbar';\nexport var SingletonApolloClient =\n/*#__PURE__*/\nfunction () {\n  function SingletonApolloClient(req) {\n    var _this = this;\n\n    _classCallCheck(this, SingletonApolloClient);\n\n    if (!!SingletonApolloClient.instance) {\n      return SingletonApolloClient.instance;\n    }\n\n    SingletonApolloClient.instance = this;\n    var uploadLink = createUploadLink({\n      uri: urlGQL,\n      fetch: fetch,\n      credentials: 'include'\n    });\n    var authLink = setContext(function (_, _ref) {\n      var headers = _ref.headers;\n      return {\n        headers: _objectSpread({}, headers, {\n          authorization: _this.jwt ? \"Bearer \".concat(_this.jwt) : ''\n        })\n      };\n    });\n    var linkError = onError(function (_ref2) {\n      var graphQLErrors = _ref2.graphQLErrors,\n          networkError = _ref2.networkError;\n      if (graphQLErrors) graphQLErrors.map(function (_ref3) {\n        var message = _ref3.message,\n            locations = _ref3.locations,\n            path = _ref3.path;\n        new SingletonStore().getStore().dispatch(showSnackBar('Ошибка'));\n        console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n      });\n      if (networkError) console.log(\"[Network error]: \".concat(networkError));\n    });\n    var wsLink = new WebSocketLink({\n      uri: urlGQLws,\n      options: {\n        reconnect: true\n      },\n      webSocketImpl: process.browser ? WebSocket : ws\n    });\n    var mainLink = split(function (_ref4) {\n      var query = _ref4.query;\n      var definition = getMainDefinition(query);\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n    }, wsLink, uploadLink);\n    var link = ApolloLink.from([linkError, authLink, mainLink]);\n    this.client = new ApolloClient({\n      link: link,\n      cache: new InMemoryCache(),\n      defaultOptions: {\n        watchQuery: {\n          fetchPolicy: 'cache-and-network',\n          errorPolicy: 'ignore'\n        },\n        query: {\n          fetchPolicy: 'network-only',\n          errorPolicy: 'all'\n        },\n        mutate: {\n          errorPolicy: 'all'\n        }\n      }\n    });\n    this.jwt = getJWT(req ? req.headers.cookie : document.cookie);\n    return this;\n  }\n\n  _createClass(SingletonApolloClient, [{\n    key: \"getClient\",\n    value: function getClient() {\n      return this.client;\n    }\n  }]);\n\n  return SingletonApolloClient;\n}();","map":null,"metadata":{},"sourceType":"module"}