{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nimport { readDataGQL } from './index';\nexport const getAds = async () => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      query: gql`\n                    query {\n                        ads {\n                            _id\n                            image\n                            url\n                            title\n                            createdAt\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getAdss = async ({\n  search: search,\n  sort: sort,\n  filter: filter\n}) => {\n  try {\n    /*const client = new SingletonApolloClient().getClient()\r\n    let res = await client\r\n        .query({\r\n            variables: {search: search, sort: sort, filter: filter},\r\n            query: gql`\r\n                query ($search: String!, $sort: String!, $filter: String!) {\r\n                    adss(search: $search, sort: $sort, filter: $filter) {\r\n                        _id\r\n                        image\r\n                        url\r\n                        title\r\n                        createdAt\r\n                      }\r\n                      sortAds {\r\n                       name\r\n                        field\r\n                      }\r\n                      filterAds {\r\n                       name\r\n                       value\r\n                      }\r\n                }`,\r\n        })\r\n    return res.data*/\n    let res = await readDataGQL({\n      search: search,\n      sort: sort,\n      filter: filter\n    }, gql`\n                    query ($search: String!, $sort: String!, $filter: String!) {\n                        adss(search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            image\n                            url\n                            title\n                            createdAt\n                          }\n                    }`);\n    console.log(res);\n    return res;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteAds = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteAds(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getAdss(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addAds = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($image: Upload!, $url: String!, $title: String!) {\n                        addAds(image: $image, url: $url, title: $title) {\n                             data\n                        }\n                    }`\n    });\n    let list = await getAdss(new SingletonStore().getStore().getState().app);\n    return list;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setAds = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: ID!, $image: Upload, $url: String, $title: String) {\n                        setAds(_id: $_id, image: $image, url: $url, title: $title) {\n                             data\n                        }\n                    }`\n    });\n    let list = await getAdss(new SingletonStore().getStore().getState().app);\n    return list;\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\ads.js"],"names":["gql","SingletonApolloClient","SingletonStore","readDataGQL","getAds","client","getClient","res","query","data","err","console","error","getAdss","search","sort","filter","log","deleteAds","ids","mutate","variables","_id","mutation","getStore","getState","app","addAds","element","list","setAds"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\nimport { readDataGQL } from './index';\r\n\r\nexport const getAds = async()=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                query: gql`\r\n                    query {\r\n                        ads {\r\n                            _id\r\n                            image\r\n                            url\r\n                            title\r\n                            createdAt\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getAdss = async({search: search, sort: sort, filter: filter})=>{\r\n    try{\r\n        /*const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        adss(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            image\r\n                            url\r\n                            title\r\n                            createdAt\r\n                          }\r\n                          sortAds {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterAds {\r\n                           name\r\n                           value\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data*/\r\n        let res =  await readDataGQL(\r\n            {search: search, sort: sort, filter: filter},\r\n            gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        adss(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            image\r\n                            url\r\n                            title\r\n                            createdAt\r\n                          }\r\n                    }`\r\n            )\r\n        console.log(res)\r\n        return res\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteAds = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteAds(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getAdss(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addAds = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($image: Upload!, $url: String!, $title: String!) {\r\n                        addAds(image: $image, url: $url, title: $title) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getAdss(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setAds = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $image: Upload, $url: String, $title: String) {\r\n                        setAds(_id: $_id, image: $image, url: $url, title: $title) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getAdss(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}