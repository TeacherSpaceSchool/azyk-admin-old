{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getSubCategorys = async ({\n  category,\n  search,\n  sort,\n  filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        category: category,\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($category: ID!,$search: String!, $sort: String!, $filter: String!) {\n                        subCategorys(category: $category, search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            category\n                                {_id name}\n                            name\n                            status\n                            updatedAt\n                          }\n                          sortSubCategory {\n                           name\n                            field\n                          }\n                          filterSubCategory {\n                           name\n                           value\n                          }\n                          category(_id: $category) {\n                                _id\n                                image\n                                name\n                                status\n                                updatedAt\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteSubCategory = async (ids, category) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteSubCategory(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getSubCategorys(_objectSpread({\n      category: category\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const onoffSubCategory = async (ids, category) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        onoffSubCategory(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getSubCategorys(_objectSpread({\n      category: category\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addSubCategory = async (element, category) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: _objectSpread({}, element, {\n        category: category\n      }),\n      mutation: gql`\n                    mutation ($category: ID!, $name: String!) {\n                        addSubCategory(category: $category, name: $name) {\n                             data\n                        }\n                    }`\n    });\n    return await getSubCategorys(_objectSpread({\n      category: category\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setSubCategory = async (element, category) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: _objectSpread({}, element),\n      mutation: gql`\n                    mutation ($_id: ID!, $name: String, $category: ID) {\n                        setSubCategory(_id: $_id, name: $name, category: $category) {\n                             data\n                        }\n                    }`\n    });\n    return await getSubCategorys(_objectSpread({\n      category: category\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}