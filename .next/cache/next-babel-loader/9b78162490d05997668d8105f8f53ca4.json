{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\pages\\\\employment\\\\[id].js\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getEmployment, setEmployments, onoffEmployment, addEmployment, deleteEmployment } from '../../src/gql/employment';\nimport organizationStyle from '../../src/styleMUI/employment/employment';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Remove from '@material-ui/icons/Remove';\nimport { useRouter } from 'next/router';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { getOrganizations } from '../../src/gql/organization';\nimport Router from 'next/router';\nimport * as userActions from '../../redux/actions/user';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Confirmation from '../../components/dialog/Confirmation';\nimport { urlMain } from '../../redux/constants/other';\nconst Client = React.memo(props => {\n  const {\n    profile\n  } = props.user;\n  const classes = organizationStyle();\n  const {\n    data\n  } = props;\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  let {\n    0: status,\n    1: setStatus\n  } = useState(data.employment !== null ? data.employment.user.status : '');\n  let {\n    0: name,\n    1: setName\n  } = useState(data.employment !== null ? data.employment.name : '');\n  let {\n    0: email,\n    1: setEmail\n  } = useState(data.employment !== null ? data.employment.email : '');\n  let {\n    0: phone,\n    1: setPhone\n  } = useState(data.employment ? data.employment.phone : []);\n\n  let addPhone = () => {\n    phone = [...phone, ''];\n    setPhone(phone);\n  };\n\n  let editPhone = (event, idx) => {\n    phone[idx] = event.target.value;\n    setPhone([...phone]);\n  };\n\n  let deletePhone = idx => {\n    phone.splice(idx, 1);\n    setPhone([...phone]);\n  };\n\n  let {\n    0: login,\n    1: setLogin\n  } = useState(data.employment ? data.employment.user.login : '');\n  let {\n    0: organization,\n    1: setOrganization\n  } = useState(data.employment !== null ? data.employment.organization : {});\n\n  let handleOrganization = event => {\n    setOrganization({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: role,\n    1: setRole\n  } = useState(data.employment !== null ? data.employment.user.role : '');\n\n  let handleRole = event => {\n    setRole(event.target.value);\n  };\n\n  let {\n    0: password,\n    1: setPassword\n  } = useState('');\n\n  let handlePassword = event => {\n    setPassword(event.target.value);\n  };\n\n  let {\n    0: hide,\n    1: setHide\n  } = useState('password');\n\n  let handleHide = () => {\n    setHide(!hide);\n  };\n\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const router = useRouter();\n  const {\n    logout\n  } = props.userActions;\n  let roles = ['организация', 'менеджер', 'экспедитор', 'агент'];\n  return __jsx(App, {\n    filters: data.filterSubCategory,\n    sorts: data.sortSubCategory,\n    pageName: data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено'), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"website\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: `${urlMain}/static/512x512.png`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `${urlMain}/employment/${router.query.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: `${urlMain}/employment/${router.query.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })), __jsx(Card, {\n    className: classes.page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(CardContent, {\n    className: classes.column,\n    style: isMobileApp ? {} : {\n      justifyContent: 'start',\n      alignItems: 'flex-start'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, data.employment !== null ? profile.role === 'admin' || profile.role === 'организация' || profile._id === data.employment.user._id ? __jsx(React.Fragment, null, __jsx(TextField, {\n    label: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n    value: login,\n    className: classes.input,\n    onChange: event => {\n      setLogin(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), __jsx(Input, {\n    placeholder: router.query.id === 'new' ? 'Пароль' : 'Новый пароль',\n    type: hide ? 'password' : 'text',\n    value: password,\n    onChange: handlePassword,\n    className: classes.input,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, __jsx(IconButton, {\n      \"aria-label\": \"Toggle password visibility\",\n      onClick: handleHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, hide ? __jsx(VisibilityOff, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }) : __jsx(Visibility, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: classes.input,\n    onChange: event => {\n      setName(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), phone ? phone.map((element, idx) => __jsx(FormControl, {\n    key: idx,\n    className: classes.input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D. \\u0424\\u043E\\u0440\\u043C\\u0430\\u0442: +996555780861\"), __jsx(Input, {\n    placeholder: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D. \\u0424\\u043E\\u0440\\u043C\\u0430\\u0442: +996555780861\",\n    value: element,\n    className: classes.input,\n    onChange: event => {\n      editPhone(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deletePhone(idx);\n      },\n      \"aria-label\": \"toggle password visibility\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, __jsx(Remove, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))) : null, __jsx(Button, {\n    onClick: async () => {\n      addPhone();\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\"), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"email\",\n    value: email,\n    className: classes.input,\n    onChange: event => {\n      setEmail(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }), router.query.id === 'new' && profile.role === 'admin' ? __jsx(FormControl, {\n    className: classes.input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Select, {\n    value: organization._id,\n    onChange: handleOrganization,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, data.organizations.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, element.name)))) : router.query.id !== 'new' ? __jsx(TextField, {\n    label: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n    value: organization.name,\n    className: classes.input,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }) : null, __jsx(FormControl, {\n    className: classes.input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"\\u0420\\u043E\\u043B\\u044C\"), __jsx(Select, {\n    value: role,\n    onChange: handleRole,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: profile._id === data.employment.user._id || !['admin', 'организация'].includes(profile.role)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, roles.map(element => {\n    //if(element!=='организация'||profile.role=='admin')\n    return __jsx(MenuItem, {\n      key: element,\n      value: element,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, element);\n  }))), __jsx(\"div\", {\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick: async () => {\n      if (name.length > 0 && email.length > 0 && password.length > 0 && phone.length > 0 && role.length > 0 && organization._id !== undefined) {\n        const action = async () => {\n          await addEmployment({\n            name: name,\n            email: email,\n            phone: phone,\n            login: login,\n            password: password,\n            role: role,\n            organization: organization._id\n          });\n          Router.push('/employments');\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: data.employment._id\n      };\n      if (name.length > 0 && name !== data.employment.name) editElement.name = name;\n      editElement.phone = phone;\n      if (login.length > 0 && login !== data.employment.user.login) editElement.login = login;\n      if (email.length > 0 && email !== data.employment.email) editElement.email = email;\n      if (password.length > 0) editElement.newPass = password;\n      if (role.length > 0 && role !== data.employment.role) editElement.role = role;\n\n      const action = async () => {\n        await setEmployments(editElement);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), profile._id !== data.employment.user._id && ['admin', 'организация'].includes(profile.role) ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await onoffEmployment([data.employment._id]);\n        setStatus(status === 'active' ? 'deactive' : 'active');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, status === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await deleteEmployment([data.employment._id]);\n        Router.push('/employments');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null, profile._id === data.employment.user._id ? __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        logout(true);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, \"\\u0412\\u044B\\u0439\\u0442\\u0438\") : null))) : 'Ничего не найдено' : 'Ничего не найдено')));\n});\n\nClient.getInitialProps = async function (ctx) {\n  if (!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role)) if (ctx.res) {\n    ctx.res.writeHead(302, {\n      Location: '/'\n    });\n    ctx.res.end();\n  } else Router.push('/');\n  return {\n    data: _objectSpread({}, ctx.query.id !== 'new' ? await getEmployment({\n      _id: ctx.query.id\n    }) : {\n      employment: {\n        name: '',\n        email: '',\n        phone: [],\n        user: {\n          login: '',\n          status: '',\n          role: ''\n        },\n        organization: {\n          _id: ''\n        }\n      }\n    }, (await getOrganizations({\n      search: '',\n      sort: 'name',\n      filter: ''\n    })))\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\pages\\employment\\[id].js"],"names":["Head","React","useState","App","connect","getEmployment","setEmployments","onoffEmployment","addEmployment","deleteEmployment","organizationStyle","Card","CardContent","Input","Button","bindActionCreators","mini_dialogActions","IconButton","InputAdornment","Visibility","VisibilityOff","Remove","useRouter","InputLabel","MenuItem","FormControl","Select","getOrganizations","Router","userActions","snackbarActions","TextField","Confirmation","urlMain","Client","memo","props","profile","user","classes","data","isMobileApp","app","showSnackBar","status","setStatus","employment","name","setName","email","setEmail","phone","setPhone","addPhone","editPhone","event","idx","target","value","deletePhone","splice","login","setLogin","organization","setOrganization","handleOrganization","_id","role","setRole","handleRole","password","setPassword","handlePassword","hide","setHide","handleHide","setMiniDialog","showMiniDialog","router","logout","roles","filterSubCategory","sortSubCategory","query","id","page","column","justifyContent","alignItems","input","map","element","organizations","readOnly","includes","row","length","undefined","action","push","editElement","newPass","getInitialProps","ctx","store","getState","res","writeHead","Location","end","search","sort","filter","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import Head from 'next/head';\r\nimport React, { useState } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport {getEmployment, setEmployments, onoffEmployment, addEmployment, deleteEmployment} from '../../src/gql/employment'\r\nimport organizationStyle from '../../src/styleMUI/employment/employment'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport { useRouter } from 'next/router'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { getOrganizations } from '../../src/gql/organization'\r\nimport Router from 'next/router'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\nimport { urlMain } from '../../redux/constants/other'\r\n\r\nconst Client = React.memo((props) => {\r\n    const { profile } = props.user;\r\n    const classes = organizationStyle();\r\n    const { data } = props;\r\n    const { isMobileApp } = props.app;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    let [status, setStatus] = useState(data.employment!==null?data.employment.user.status:'');\r\n    let [name, setName] = useState(data.employment!==null?data.employment.name:'');\r\n    let [email, setEmail] = useState(data.employment!==null?data.employment.email:'');\r\n    let [phone, setPhone] = useState(data.employment?data.employment.phone:[]);\r\n    let addPhone = ()=>{\r\n        phone = [...phone, '']\r\n        setPhone(phone)\r\n    };\r\n    let editPhone = (event, idx)=>{\r\n        phone[idx] = event.target.value\r\n        setPhone([...phone])\r\n    };\r\n    let deletePhone = (idx)=>{\r\n        phone.splice(idx, 1);\r\n        setPhone([...phone])\r\n    };\r\n    let [login, setLogin] = useState(data.employment?data.employment.user.login:'');\r\n    let [organization, setOrganization] = useState(data.employment!==null?data.employment.organization:{});\r\n    let handleOrganization =  (event) => {\r\n        setOrganization({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [role, setRole] = useState(data.employment!==null?data.employment.user.role:'');\r\n    let handleRole =  (event) => {\r\n        setRole(event.target.value)\r\n    };\r\n    let [password, setPassword] = useState('');\r\n    let handlePassword =  (event) => {\r\n        setPassword(event.target.value)\r\n    };\r\n    let [hide, setHide] = useState('password');\r\n    let handleHide =  () => {\r\n        setHide(!hide)\r\n    };\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const router = useRouter()\r\n    const { logout } = props.userActions;\r\n    let roles = ['организация', 'менеджер', 'экспедитор', 'агент']\r\n    return (\r\n        <App filters={data.filterSubCategory} sorts={data.sortSubCategory} pageName={data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'}</title>\r\n                <meta name='description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:title' content={data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'} />\r\n                <meta property='og:description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:type' content='website' />\r\n                <meta property='og:image' content={`${urlMain}/static/512x512.png`} />\r\n                <meta property=\"og:url\" content={`${urlMain}/employment/${router.query.id}`} />\r\n                <link rel='canonical' href={`${urlMain}/employment/${router.query.id}`}/>\r\n            </Head>\r\n            <Card className={classes.page}>\r\n                <CardContent className={classes.column} style={isMobileApp?{}:{justifyContent: 'start', alignItems: 'flex-start'}}>\r\n                {\r\n                            data.employment!==null?\r\n                                profile.role==='admin'||profile.role==='организация'||profile._id===data.employment.user._id?\r\n                                    <>\r\n                                    <TextField\r\n                                            label='Логин'\r\n                                            value={login}\r\n                                            className={classes.input}\r\n                                            onChange={(event)=>{setLogin(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        <Input\r\n                                            placeholder={router.query.id==='new'?'Пароль':'Новый пароль'}\r\n                                            type={hide ? 'password' : 'text' }\r\n                                            value={password}\r\n                                            onChange={handlePassword}\r\n                                            className={classes.input}\r\n                                            endAdornment={\r\n                                                <InputAdornment position='end'>\r\n                                                    <IconButton aria-label='Toggle password visibility' onClick={handleHide}>\r\n                                                        {hide ? <VisibilityOff />:<Visibility />  }\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            }\r\n                                        />\r\n                                            <TextField\r\n                                                label='Имя'\r\n                                                value={name}\r\n                                                className={classes.input}\r\n                                                onChange={(event)=>{setName(event.target.value)}}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                }}\r\n                                            />\r\n                                        {phone?phone.map((element, idx)=>\r\n                                                <FormControl key={idx} className={classes.input}>\r\n                                                    <InputLabel>Телефон. Формат: +996555780861</InputLabel>\r\n                                                    <Input\r\n                                                        placeholder='Телефон. Формат: +996555780861'\r\n                                                        value={element}\r\n                                                        className={classes.input}\r\n                                                        onChange={(event)=>{editPhone(event, idx)}}\r\n                                                        inputProps={{\r\n                                                            'aria-label': 'description',\r\n                                                        }}\r\n                                                        endAdornment={\r\n                                                            <InputAdornment position=\"end\">\r\n                                                                <IconButton\r\n                                                                    onClick={()=>{\r\n                                                                        deletePhone(idx)\r\n                                                                    }}\r\n                                                                    aria-label='toggle password visibility'\r\n                                                                >\r\n                                                                    <Remove/>\r\n                                                                </IconButton>\r\n                                                            </InputAdornment>\r\n                                                        }\r\n                                                    />\r\n                                                </FormControl>\r\n                                        ): null}\r\n                                        <Button onClick={async()=>{\r\n                                            addPhone()\r\n                                        }} size='small' color='primary'>\r\n                                            Добавить телефон\r\n                                        </Button>\r\n                                        <br/>\r\n                                        <TextField\r\n                                            label='email'\r\n                                            value={email}\r\n                                            className={classes.input}\r\n                                            onChange={(event)=>{setEmail(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        {router.query.id==='new'&&profile.role==='admin'?\r\n                                            <FormControl className={classes.input}>\r\n                                                <InputLabel>Организация</InputLabel>\r\n                                                <Select value={organization._id}onChange={handleOrganization}>\r\n                                                    {data.organizations.map((element)=>\r\n                                                        <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                                    )}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                            :\r\n                                            router.query.id!=='new'?\r\n                                                <TextField\r\n                                                    label='Организация'\r\n                                                    value={organization.name}\r\n                                                    className={classes.input}\r\n                                                    inputProps={{\r\n                                                        'aria-label': 'description',\r\n                                                        readOnly: true,\r\n                                                    }}\r\n                                                />\r\n                                                :null\r\n                                        }\r\n                                        <FormControl className={classes.input}>\r\n                                            <InputLabel>Роль</InputLabel>\r\n                                            <Select\r\n                                                value={role}\r\n                                                onChange={handleRole}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                    readOnly: profile._id===data.employment.user._id||!['admin', 'организация'].includes(profile.role),\r\n                                                }}\r\n                                            >\r\n                                                {roles.map((element)=>{\r\n                                                    //if(element!=='организация'||profile.role=='admin')\r\n                                                        return <MenuItem key={element} value={element}>{element}</MenuItem>\r\n                                                })\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        <div className={classes.row}>\r\n                                            {\r\n                                                router.query.id==='new'?\r\n                                                    <Button onClick={async()=>{\r\n                                                        if (name.length>0&&email.length>0&&password.length>0&&phone.length>0&&role.length>0&&organization._id!==undefined) {\r\n                                                            const action = async() => {\r\n                                                                await addEmployment({\r\n                                                                    name: name,\r\n                                                                    email: email,\r\n                                                                    phone: phone,\r\n                                                                    login: login,\r\n                                                                    password: password,\r\n                                                                    role: role,\r\n                                                                    organization: organization._id,\r\n                                                                })\r\n                                                                Router.push('/employments')\r\n                                                            }\r\n                                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                            showMiniDialog(true)\r\n                                                        } else {\r\n                                                            showSnackBar('Заполните все поля')\r\n                                                        }\r\n                                                    }} size='small' color='primary'>\r\n                                                        Добавить\r\n                                                    </Button>\r\n                                                    :\r\n                                                    <>\r\n                                                    <Button onClick={async()=>{\r\n                                                        let editElement = {_id: data.employment._id}\r\n                                                        if(name.length>0&&name!==data.employment.name)editElement.name = name\r\n                                                        editElement.phone = phone\r\n                                                        if(login.length>0&&login!==data.employment.user.login)editElement.login = login\r\n                                                        if(email.length>0&&email!==data.employment.email)editElement.email = email\r\n                                                        if(password.length>0)editElement.newPass = password\r\n                                                        if(role.length>0&&role!==data.employment.role)editElement.role = role\r\n                                                        const action = async() => {\r\n                                                            await setEmployments(editElement)\r\n                                                        }\r\n                                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                        showMiniDialog(true)\r\n                                                    }} size='small' color='primary'>\r\n                                                        Сохранить\r\n                                                    </Button>\r\n\r\n                                                    {\r\n                                                        profile._id!==data.employment.user._id&&['admin', 'организация'].includes(profile.role)?\r\n                                                            <>\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    await onoffEmployment([data.employment._id])\r\n                                                                    setStatus(status==='active'?'deactive':'active')\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                {status==='active'?'Отключить':'Включить'}\r\n                                                            </Button>\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    await deleteEmployment([data.employment._id])\r\n                                                                    Router.push('/employments')\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                Удалить\r\n                                                            </Button>\r\n                                                            </>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    {\r\n                                                        profile._id===data.employment.user._id?\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    logout(true)\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                Выйти\r\n                                                            </Button>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    </>\r\n                                            }\r\n                                        </div>\r\n                                    </>\r\n                                    :\r\n                                    'Ничего не найдено'\r\n                                :\r\n                                'Ничего не найдено'\r\n                        }\r\n                </CardContent>\r\n                </Card>\r\n        </App>\r\n    )\r\n})\r\n\r\nClient.getInitialProps = async function(ctx) {\r\n    if(!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role))\r\n        if(ctx.res) {\r\n            ctx.res.writeHead(302, {\r\n                Location: '/'\r\n            })\r\n            ctx.res.end()\r\n        } else\r\n            Router.push('/')\r\n    return {\r\n        data: {\r\n            ...ctx.query.id!=='new'?await getEmployment({_id: ctx.query.id}):{employment:{name: '',email: '',phone: [], user: {login: '',status: '',role: '',},organization: {_id: ''},}},\r\n            ...await getOrganizations({search: '', sort: 'name', filter: ''})\r\n        }\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);"]},"metadata":{},"sourceType":"module"}