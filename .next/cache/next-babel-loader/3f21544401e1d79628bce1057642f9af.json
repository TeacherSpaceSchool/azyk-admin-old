{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getOrders = async ({\n  search,\n  sort,\n  filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($search: String!, $sort: String!, $filter: String!) {\n                        invoices(search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            createdAt\n                            orders \n                                { \n                                    _id\n                                    createdAt\n                                    item\n                                        {\n                                            image\n                                            _id\n                                            name    \n                                            stock \n                                            price\n                                            organization\n                                                {_id name}\n                                        }\n                                    count\n                                    allPrice\n                                    status\n                                 }\n                            client \n                                { \n                                    _id\n                                    name\n                                    email\n                                    user \n                                        {_id phone} \n                                }\n                            allPrice\n                            info\n                            address\n                            paymentMethod\n                            number\n                            confirmationForwarder\n                            confirmationClient\n                            dateDelivery\n                        }\n                        sortInvoice {\n                            name\n                            field\n                        }\n                        filterInvoice {\n                           name\n                           value\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getOrder = async ({\n  _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID!) {\n                        invoice(_id: $_id) {\n                            _id\n                            createdAt\n                            orders \n                                { \n                                    _id\n                                    createdAt\n                                    item\n                                        {\n                                            image\n                                            _id\n                                            name    \n                                            stock \n                                            price\n                                            organization\n                                                {_id name}\n                                        }\n                                    count\n                                    allPrice\n                                    status\n                                 }\n                            client \n                                { \n                                    _id\n                                    name\n                                    email\n                                    user \n                                        {phone} \n                                }\n                            allPrice\n                            info\n                            address\n                            paymentMethod\n                            number\n                            confirmationForwarder\n                            confirmationClient\n                            dateDelivery\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addOrders = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($info: String, $paymentMethod: String, $address: [[String]]) {\n                        addOrders(info: $info, paymentMethod: $paymentMethod, address: $address) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const cancelOrders = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        cancelOrders(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getOrders(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const approveOrders = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($invoices: [ID]!, $route: ID) {\n                        approveOrders(invoices: $invoices, route: $route) {\n                             data\n                        }\n                    }`\n    });\n    return await getOrders(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setOrder = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($orders: [OrderInput]) {\n                        setOrder(orders: $orders) {\n                             data\n                        }\n                    }`\n    });\n    return await getOrders(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\order.js"],"names":["gql","SingletonApolloClient","SingletonStore","getOrders","search","sort","filter","client","getClient","res","query","variables","data","err","console","error","getOrder","_id","addOrders","element","mutate","mutation","cancelOrders","getStore","getState","app","approveOrders","setOrder"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getOrders = async({search, sort, filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        invoices(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            createdAt\r\n                            orders \r\n                                { \r\n                                    _id\r\n                                    createdAt\r\n                                    item\r\n                                        {\r\n                                            image\r\n                                            _id\r\n                                            name    \r\n                                            stock \r\n                                            price\r\n                                            organization\r\n                                                {_id name}\r\n                                        }\r\n                                    count\r\n                                    allPrice\r\n                                    status\r\n                                 }\r\n                            client \r\n                                { \r\n                                    _id\r\n                                    name\r\n                                    email\r\n                                    user \r\n                                        {_id phone} \r\n                                }\r\n                            allPrice\r\n                            info\r\n                            address\r\n                            paymentMethod\r\n                            number\r\n                            confirmationForwarder\r\n                            confirmationClient\r\n                            dateDelivery\r\n                        }\r\n                        sortInvoice {\r\n                            name\r\n                            field\r\n                        }\r\n                        filterInvoice {\r\n                           name\r\n                           value\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getOrder = async({_id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        invoice(_id: $_id) {\r\n                            _id\r\n                            createdAt\r\n                            orders \r\n                                { \r\n                                    _id\r\n                                    createdAt\r\n                                    item\r\n                                        {\r\n                                            image\r\n                                            _id\r\n                                            name    \r\n                                            stock \r\n                                            price\r\n                                            organization\r\n                                                {_id name}\r\n                                        }\r\n                                    count\r\n                                    allPrice\r\n                                    status\r\n                                 }\r\n                            client \r\n                                { \r\n                                    _id\r\n                                    name\r\n                                    email\r\n                                    user \r\n                                        {phone} \r\n                                }\r\n                            allPrice\r\n                            info\r\n                            address\r\n                            paymentMethod\r\n                            number\r\n                            confirmationForwarder\r\n                            confirmationClient\r\n                            dateDelivery\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addOrders = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($info: String, $paymentMethod: String, $address: [[String]]) {\r\n                        addOrders(info: $info, paymentMethod: $paymentMethod, address: $address) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const cancelOrders = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        cancelOrders(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getOrders(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const approveOrders = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($invoices: [ID]!, $route: ID) {\r\n                        approveOrders(invoices: $invoices, route: $route) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getOrders(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setOrder = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($orders: [OrderInput]) {\r\n                        setOrder(orders: $orders) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getOrders(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}