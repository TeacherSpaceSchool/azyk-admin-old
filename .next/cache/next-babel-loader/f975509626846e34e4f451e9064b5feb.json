{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getCategorys = async ({\n  search: search,\n  sort: sort,\n  filter: filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($search: String!, $sort: String!, $filter: String!) {\n                        categorys(search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            image\n                            name\n                            status\n                            createdAt\n                          }\n                          sortCategory {\n                           name\n                            field\n                          }\n                          filterCategory {\n                           name\n                           value\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteCategory = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteCategory(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getCategorys(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const onoffCategory = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        onoffCategory(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getCategorys(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addCategory = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($image: Upload!, $name: String!) {\n                        addCategory(image: $image, name: $name) {\n                             data\n                        }\n                    }`\n    });\n    return await getCategorys(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setCategory = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: ID!, $image: Upload, $name: String) {\n                        setCategory(_id: $_id, image: $image, name: $name) {\n                             data\n                        }\n                    }`\n    });\n    return await getCategorys(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\category.js"],"names":["gql","SingletonApolloClient","SingletonStore","getCategorys","search","sort","filter","client","getClient","res","query","variables","data","err","console","error","deleteCategory","ids","mutate","_id","mutation","getStore","getState","app","onoffCategory","addCategory","element","setCategory"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getCategorys = async({search: search, sort: sort, filter: filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        categorys(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            image\r\n                            name\r\n                            status\r\n                            createdAt\r\n                          }\r\n                          sortCategory {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterCategory {\r\n                           name\r\n                           value\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteCategory = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteCategory(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getCategorys(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const onoffCategory = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        onoffCategory(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getCategorys(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addCategory = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($image: Upload!, $name: String!) {\r\n                        addCategory(image: $image, name: $name) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getCategorys(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setCategory = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $image: Upload, $name: String) {\r\n                        setCategory(_id: $_id, image: $image, name: $name) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getCategorys(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}