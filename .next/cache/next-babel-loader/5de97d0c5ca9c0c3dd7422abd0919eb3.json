{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport cardItemStyle from '../../src/styleMUI/item/cardItem';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport AddShoppingCart from '@material-ui/icons/AddShoppingCart';\nimport Star from '@material-ui/icons/Star';\nimport Link from 'next/link';\nimport { onoffItem, deleteItem, favoriteItem } from '../../src/gql/items';\nimport { addBasket } from '../../src/gql/basket';\nimport Button from '@material-ui/core/Button';\nimport Confirmation from '../dialog/Confirmation';\nimport { getCountBasket } from '../../src/gql/basket';\nconst CardItem = React.memo(props => {\n  const classes = cardItemStyle();\n  const {\n    element,\n    setList,\n    subCategory,\n    getList,\n    setFavorites\n  } = props;\n  const {\n    profile,\n    authenticated\n  } = props.user;\n  let {\n    0: status,\n    1: setStatus\n  } = useState(element !== undefined ? element.status : '');\n  let {\n    0: favorite,\n    1: setFavorite\n  } = useState(element !== undefined && element.favorite !== undefined ? element.favorite : []);\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  let {\n    0: basket,\n    1: setBasket\n  } = useState(false);\n  useEffect(() => {\n    if (!authenticated) {\n      if (localStorage.favorites == undefined) localStorage.favorites = _JSON$stringify([]);else {\n        let favorites = JSON.parse(localStorage.favorites);\n\n        for (let i = 0; i < favorites.length; i++) {\n          if (favorites[i]._id == element._id) setFavorite(true);\n        }\n      }\n      if (localStorage.basket == undefined) localStorage.basket = _JSON$stringify([]);else {\n        let basket = JSON.parse(localStorage.basket);\n\n        for (let i = 0; i < basket.length; i++) {\n          if (basket[i].item._id == element._id) setBasket(true);\n        }\n      }\n    } else {\n      setBasket(element.basket.includes(profile._id));\n    }\n  }, []);\n  return __jsx(Card, {\n    className: classes.card\n  }, __jsx(CardContent, {\n    className: classes.column\n  }, __jsx(\"div\", {\n    className: classes.chipList\n  }, element.latest ? __jsx(\"div\", {\n    className: classes.chip,\n    style: {\n      color: 'white',\n      background: 'green'\n    }\n  }, \"\\u041D\\u043E\\u0432\\u0438\\u043D\\u043A\\u0430\") : null, element.hit ? __jsx(\"div\", {\n    className: classes.chip,\n    style: {\n      color: 'black',\n      background: 'yellow'\n    }\n  }, \"\\u0425\\u0438\\u0442\") : null), __jsx(Link, {\n    href: \"/item/[id]\",\n    as: `/item/${element !== undefined ? element._id : 'new'}`\n  }, __jsx(\"img\", {\n    className: classes.media,\n    src: element.image,\n    alt: element.info\n  })), __jsx(Link, {\n    href: \"/item/[id]\",\n    as: `/item/${element !== undefined ? element._id : 'new'}`\n  }, __jsx(\"div\", {\n    className: classes.name\n  }, element.name)), __jsx(Link, {\n    href: \"/item/[id]\",\n    as: `/item/${element !== undefined ? element._id : 'new'}`\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, element.stock === 0 || element.stock === undefined ? __jsx(\"div\", {\n    className: classes.price\n  }, `${element.price} сом`) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.crossedPrice\n  }, `${element.price}`), __jsx(\"div\", {\n    className: classes.stockPrice\n  }, `${element.stock} сом`)))), ['admin', 'организация', 'менеджер'].includes(profile.role) ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await onoffItem([element._id]);\n        setStatus(status === 'active' ? 'deactive' : 'active');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, status === 'active' ? 'Отключить' : 'Включить'), 'admin' === profile.role ? __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        const list = (await deleteItem([element._id], subCategory)).items;\n        setList(list);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\") : null) : profile.role === 'client' || !authenticated ? __jsx(AddShoppingCart, {\n    style: {\n      color: basket ? '#ffb300' : '#e1e1e1'\n    },\n    className: classes.button,\n    onClick: () => {\n      if (profile.role === 'client') addBasket({\n        item: element._id,\n        count: 1\n      });else if (!authenticated) {\n        let basket = JSON.parse(localStorage.basket);\n        let index = -1;\n\n        for (let i = 0; i < basket.length; i++) {\n          if (basket[i].item._id == element._id) index = i;\n        }\n\n        if (index === -1) basket.push({\n          item: element,\n          count: 1\n        });\n        localStorage.basket = _JSON$stringify(basket);\n      }\n      showSnackBar('Товар добавлен в корзину');\n      setBasket(true);\n      getCountBasket();\n    }\n  }) : null, profile.role === 'client' || !authenticated ? __jsx(Star, {\n    className: classes.buttonToggle,\n    onClick: async () => {\n      let index;\n\n      if (profile.role === 'client') {\n        await favoriteItem([element._id]);\n        index = favorite.indexOf(profile._id);\n\n        if (index === -1) {\n          favorite.push(profile._id);\n          setFavorite([...favorite]);\n          if (getList !== undefined) getList();\n        }\n      } else if (!authenticated) {\n        let favorites = JSON.parse(localStorage.favorites);\n        index = -1;\n\n        for (let i = 0; i < favorites.length; i++) {\n          if (favorites[i]._id == element._id) index = i;\n        }\n\n        if (index === -1) {\n          favorites.push(element);\n          setFavorite(true);\n          localStorage.favorites = _JSON$stringify(favorites);\n          if (setFavorites) setFavorites(favorites);\n        }\n      }\n\n      if (index !== -1) {\n        const action = async () => {\n          if (profile.role === 'client') {\n            favorite.splice(index, 1);\n            setFavorite([...favorite]);\n            if (getList !== undefined) getList();\n          } else if (!authenticated) {\n            let favorites = JSON.parse(localStorage.favorites);\n            favorites.splice(index, 1);\n            setFavorite(false);\n            localStorage.favorites = _JSON$stringify(favorites);\n            if (setFavorites) setFavorites(favorites);\n          }\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      }\n    },\n    style: {\n      color: !authenticated && favorite === true || profile.role == 'client' && favorite.includes(profile._id) ? '#ffb300' : '#e1e1e1'\n    }\n  }) : null));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardItem);","map":null,"metadata":{},"sourceType":"module"}