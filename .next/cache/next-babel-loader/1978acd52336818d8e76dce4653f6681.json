{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { SingletonApolloClient } from '../singleton/client';\nexport var readDataGQL =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var variables, query, client, res, _res;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            variables = _ref.variables, query = _ref.query;\n            client = new SingletonApolloClient().getClient();\n            _context.prev = 2;\n            console.log('start');\n            _context.next = 6;\n            return client.query({\n              variables: variables,\n              query: query\n            });\n\n          case 6:\n            res = _context.sent;\n            console.log(res.data);\n            client.writeFragment({\n              id: _JSON$stringify(variables),\n              fragment: query,\n              data: res.data\n            });\n            return _context.abrupt(\"return\", res.data);\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](2);\n            _res = client.readFragment({\n              id: _JSON$stringify(variables),\n              fragment: query\n            });\n            console.log(_res);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 12]]);\n  }));\n\n  return function readDataGQL(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\index.js"],"names":["SingletonApolloClient","readDataGQL","variables","query","client","getClient","console","log","res","data","writeFragment","id","fragment","readFragment"],"mappings":";;;AAAA,SAASA,qBAAT,QAAsC,qBAAtC;AAEA,OAAO,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAOC,YAAAA,SAAP,QAAOA,SAAP,EAAkBC,KAAlB,QAAkBA,KAAlB;AACjBC,YAAAA,MADiB,GACR,IAAIJ,qBAAJ,GAA4BK,SAA5B,EADQ;AAAA;AAGnBC,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAHmB;AAAA,mBAIHH,MAAM,CACjBD,KADW,CACL;AACHD,cAAAA,SAAS,EAAEA,SADR;AAEHC,cAAAA,KAAK,EAAEA;AAFJ,aADK,CAJG;;AAAA;AAIfK,YAAAA,GAJe;AASnBF,YAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACC,IAAhB;AACAL,YAAAA,MAAM,CAACM,aAAP,CAAqB;AACjBC,cAAAA,EAAE,EAAE,gBAAeT,SAAf,CADa;AAEjBU,cAAAA,QAAQ,EAAET,KAFO;AAGjBM,cAAAA,IAAI,EAAED,GAAG,CAACC;AAHO,aAArB;AAVmB,6CAeZD,GAAG,CAACC,IAfQ;;AAAA;AAAA;AAAA;AAiBfD,YAAAA,IAjBe,GAiBTJ,MAAM,CAACS,YAAP,CAAoB;AAC1BF,cAAAA,EAAE,EAAE,gBAAeT,SAAf,CADsB;AAE1BU,cAAAA,QAAQ,EAAET;AAFgB,aAApB,CAjBS;AAqBnBG,YAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;;AArBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXP,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import { SingletonApolloClient } from '../singleton/client';\r\n\r\nexport const readDataGQL = async({variables, query})=>{\r\n    const client = new SingletonApolloClient().getClient()\r\n    try{\r\n        console.log('start')\r\n        let res = await client\r\n            .query({\r\n                variables: variables,\r\n                query: query\r\n            })\r\n        console.log(res.data)\r\n        client.writeFragment({\r\n            id: JSON.stringify(variables),\r\n            fragment: query,\r\n            data: res.data,\r\n        });\r\n        return res.data\r\n    } catch(err){\r\n        let res = client.readFragment({\r\n            id: JSON.stringify(variables),\r\n            fragment: query,\r\n        });\r\n        console.log(res)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}