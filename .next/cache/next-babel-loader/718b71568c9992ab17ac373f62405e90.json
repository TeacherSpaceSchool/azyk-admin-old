{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nimport { setCountBasket } from '../../redux/actions/app';\nexport const getBasket = async () => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      query: gql`\n                    query{\n                        baskets {\n                            _id\n                            updatedAt\n                            item \n                                {_id name stock image price}\n                            count\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getCountBasket = async () => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      query: gql`\n                    query {\n                        countBasket \n                    }`\n    });\n    new SingletonStore().getStore().dispatch(setCountBasket(res.data.countBasket));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteBasket = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteBasket(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    await getCountBasket();\n    return await getBasket(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addBasket = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($item: ID!, $count: Int!) {\n                        addBasket(item: $item, count: $count) {\n                             data\n                        }\n                    }`\n    });\n    await getCountBasket();\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setBasket = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: ID!, $count: Int!) {\n                        setBasket(_id: $_id, count: $count) {\n                             data\n                        }\n                    }`\n    });\n    await getCountBasket();\n    return await getBasket(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}