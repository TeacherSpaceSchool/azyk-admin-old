{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\components\\\\subcategory\\\\SubCardCategory.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport cardCategoryStyle from '../../src/styleMUI/subcategory/cardSubcategory';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport { onoffSubCategory, addSubCategory, setSubCategory, deleteSubCategory } from '../../src/gql/subcategory';\nimport Link from 'next/link';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Confirmation from '../dialog/Confirmation';\nconst CardCategory = React.memo(props => {\n  const classes = cardCategoryStyle();\n  const {\n    element,\n    setList,\n    category,\n    categorys\n  } = props;\n  const {\n    profile\n  } = props.user;\n  const {\n    isMobileApp\n  } = props.app; //addCard\n\n  let {\n    0: name,\n    1: setName\n  } = useState(element ? element.name : '');\n\n  let handleName = event => {\n    setName(event.target.value);\n  };\n\n  let {\n    0: selectCategory,\n    1: setSelectCategory\n  } = useState(element ? element.category : {});\n\n  let handleSelectCategory = event => {\n    setSelectCategory({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, profile.role === 'admin' && (!element || element._id !== 'all' && name !== 'Не задано') ? __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: classes.input,\n    onChange: handleName,\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), __jsx(FormControl, {\n    className: classes.input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044F\"), __jsx(Select, {\n    value: selectCategory._id,\n    onChange: handleSelectCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, categorys ? categorys.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, element.name)) : null)))), __jsx(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, element !== undefined ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: element._id\n      };\n      if (name.length > 0 && name !== element.name) editElement.name = name;\n      if (selectCategory._id !== undefined && selectCategory._id !== element.category._id) editElement.category = selectCategory._id;\n\n      const action = async () => {\n        setList((await setSubCategory(editElement, category)).subCategorys);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        setList((await onoffSubCategory([element._id], category)).subCategorys);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, element.status === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    size: \"small\",\n    color: \"primary\",\n    onClick: () => {\n      const action = async () => {\n        setList((await deleteSubCategory([element._id], category)).subCategorys);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"), __jsx(Link, {\n    href: \"/items/[id]\",\n    as: `/items/${element._id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(Button, {\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"\\u041F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438\"))) : __jsx(Button, {\n    onClick: async () => {\n      if (name.length > 0 && selectCategory._id) {\n        setName('');\n\n        const action = async () => {\n          let subCategorys = (await addSubCategory({\n            name: name\n          }, selectCategory._id)).subCategorys;\n          setList(subCategorys);\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"))) : element !== undefined ? __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/items/[id]\",\n    as: `/items/${element._id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.line,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    className: classes.input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, element.name))))) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCategory);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\subcategory\\SubCardCategory.js"],"names":["React","useState","Card","CardActionArea","CardContent","cardCategoryStyle","connect","Button","CardActions","onoffSubCategory","addSubCategory","setSubCategory","deleteSubCategory","Link","bindActionCreators","mini_dialogActions","InputLabel","MenuItem","FormControl","Select","snackbarActions","TextField","Confirmation","CardCategory","memo","props","classes","element","setList","category","categorys","profile","user","isMobileApp","app","name","setName","handleName","event","target","value","selectCategory","setSelectCategory","handleSelectCategory","_id","setMiniDialog","showMiniDialog","showSnackBar","role","cardM","cardD","input","map","undefined","editElement","length","action","subCategorys","status","line","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport cardCategoryStyle from '../../src/styleMUI/subcategory/cardSubcategory'\r\nimport { connect } from 'react-redux'\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { onoffSubCategory, addSubCategory, setSubCategory, deleteSubCategory} from '../../src/gql/subcategory'\r\nimport Link from 'next/link';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Confirmation from '../dialog/Confirmation'\r\n\r\nconst CardCategory = React.memo((props) => {\r\n    const classes = cardCategoryStyle();\r\n    const { element, setList, category, categorys } = props;\r\n    const { profile } = props.user;\r\n    const { isMobileApp } = props.app;\r\n    //addCard\r\n    let [name, setName] = useState(element?element.name:'');\r\n    let handleName =  (event) => {\r\n        setName(event.target.value)\r\n    };\r\n    let [selectCategory, setSelectCategory] = useState(element?element.category:{});\r\n    let handleSelectCategory =  (event) => {\r\n        setSelectCategory({_id: event.target.value, name: event.target.name})\r\n    };\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    return (\r\n        <div>\r\n            {\r\n                profile.role === 'admin' && (!element||(element._id!=='all'&&name!=='Не задано')) ?\r\n                    <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n                        <CardActionArea>\r\n                            <CardContent>\r\n                                <TextField\r\n                                    label='Имя'\r\n                                    value={name}\r\n                                    className={classes.input}\r\n                                    onChange={handleName}\r\n                                    inputProps={{\r\n                                        'aria-label': 'description',\r\n                                    }}\r\n                                />\r\n                                <br/>\r\n                                <br/>\r\n                                <FormControl className={classes.input}>\r\n                                    <InputLabel>Категория</InputLabel>\r\n                                    <Select\r\n                                        value={selectCategory._id}\r\n                                        onChange={handleSelectCategory}\r\n                                    >\r\n                                        {categorys?categorys.map((element)=>\r\n                                            <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                        ):null}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                        <CardActions>\r\n                            {\r\n                                element!==undefined?\r\n                                    <>\r\n                                    <Button onClick={async()=>{\r\n                                        let editElement = {_id: element._id}\r\n                                        if(name.length>0&&name!==element.name)editElement.name = name\r\n                                        if(selectCategory._id!==undefined&&selectCategory._id!==element.category._id)editElement.category = selectCategory._id\r\n                                        const action = async() => {\r\n                                            setList((await setSubCategory(editElement, category)).subCategorys)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                        Сохранить\r\n                                    </Button>\r\n                                    <Button onClick={async()=>{\r\n                                        const action = async() => {\r\n                                            setList((await onoffSubCategory([element._id], category)).subCategorys)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                        {element.status==='active'?'Отключить':'Включить'}\r\n                                    </Button>\r\n                                    <Button size='small' color='primary' onClick={()=>{\r\n                                        const action = async() => {\r\n                                            setList((await deleteSubCategory([element._id], category)).subCategorys)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }}>\r\n                                        Удалить\r\n                                    </Button>\r\n                            <Link href='/items/[id]' as={`/items/${element._id}`}>\r\n                                <Button size='small' color='primary'>\r\n                                    Перейти\r\n                                </Button>\r\n                            </Link>\r\n                                    </>:\r\n                                    <Button onClick={async()=> {\r\n                                        if (name.length > 0&&selectCategory._id) {\r\n                                            setName('')\r\n                                            const action = async() => {\r\n                                                let subCategorys = (await addSubCategory({name: name}, selectCategory._id)).subCategorys\r\n                                                setList(subCategorys)\r\n                                            }\r\n                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                            showMiniDialog(true)\r\n                                        } else {\r\n                                            showSnackBar('Заполните все поля')\r\n                                        }\r\n                                    }} size='small' color='primary'>\r\n                                        Добавить\r\n                                    </Button>}\r\n                        </CardActions>\r\n                    </Card>\r\n                    :\r\n                    element!==undefined?\r\n                        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n                            <CardActionArea>\r\n                                <Link href='/items/[id]' as={`/items/${element._id}`}>\r\n                                    <div className={classes.line}>\r\n                                        <h3 className={classes.input}>\r\n                                            {element.name}\r\n                                        </h3>\r\n                                    </div>\r\n                                </Link>\r\n                            </CardActionArea>\r\n                        </Card>\r\n                        :null\r\n            }\r\n            </div>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCategory)"]},"metadata":{},"sourceType":"module"}