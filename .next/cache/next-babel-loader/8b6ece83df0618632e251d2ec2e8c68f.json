{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { SingletonApolloClient } from '../singleton/client';\nexport var readDataGQL =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(variables, query) {\n    var client, res, _res;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = new SingletonApolloClient().getClient();\n            _context.prev = 1;\n            _context.next = 4;\n            return client.query({\n              variables: variables,\n              query: query\n            });\n\n          case 4:\n            res = _context.sent;\n            client.writeQuery({\n              variables: variables,\n              query: query,\n              data: res\n            });\n            return _context.abrupt(\"return\", res.data);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            _res = client.readQuery({\n              variables: variables,\n              query: query\n            });\n            console.log(_res.data);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function readDataGQL(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\index.js"],"names":["SingletonApolloClient","readDataGQL","variables","query","client","getClient","res","writeQuery","data","readQuery","console","log"],"mappings":";;AAAA,SAASA,qBAAT,QAAsC,qBAAtC;AAEA,OAAO,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAMC,SAAN,EAAiBC,KAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,MADiB,GACR,IAAIJ,qBAAJ,GAA4BK,SAA5B,EADQ;AAAA;AAAA;AAAA,mBAGHD,MAAM,CACjBD,KADW,CACL;AACHD,cAAAA,SAAS,EAAEA,SADR;AAEHC,cAAAA,KAAK,EAAEA;AAFJ,aADK,CAHG;;AAAA;AAGfG,YAAAA,GAHe;AAQnBF,YAAAA,MAAM,CAACG,UAAP,CAAkB;AACdL,cAAAA,SAAS,EAAEA,SADG;AAEdC,cAAAA,KAAK,EAAEA,KAFO;AAGdK,cAAAA,IAAI,EAAEF;AAHQ,aAAlB;AARmB,6CAaZA,GAAG,CAACE,IAbQ;;AAAA;AAAA;AAAA;AAefF,YAAAA,IAfe,GAeTF,MAAM,CAACK,SAAP,CAAiB;AACvBP,cAAAA,SAAS,EAAEA,SADY;AAEvBC,cAAAA,KAAK,EAAEA;AAFgB,aAAjB,CAfS;AAmBnBO,YAAAA,OAAO,CAACC,GAAR,CAAYL,IAAG,CAACE,IAAhB;;AAnBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXP,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import { SingletonApolloClient } from '../singleton/client';\r\n\r\nexport const readDataGQL = async(variables, query)=>{\r\n    const client = new SingletonApolloClient().getClient()\r\n    try{\r\n        let res = await client\r\n            .query({\r\n                variables: variables,\r\n                query: query\r\n            })\r\n        client.writeQuery({\r\n            variables: variables,\r\n            query: query,\r\n            data: res,\r\n        });\r\n        return res.data\r\n    } catch(err){\r\n        let res = client.readQuery({\r\n            variables: variables,\r\n            query: query,\r\n        });\r\n        console.log(res.data)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}