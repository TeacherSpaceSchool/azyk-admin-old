{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addOrders } from '../../src/gql/order';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport * as userActions from '../../redux/actions/user';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Router from 'next/router';\nvar BuyBasket = React.memo(function (props) {\n  var isMobileApp = props.app.isMobileApp;\n  var client = props.client,\n      allPrice = props.allPrice;\n  var showMiniDialog = props.mini_dialogActions.showMiniDialog;\n  var showSnackBar = props.snackbarActions.showSnackBar;\n  var classes = props.classes,\n      action = props.action,\n      idx = props.idx;\n  var width = isMobileApp ? window.innerWidth - 126 : 500;\n\n  var _useState = useState([]),\n      address = _useState[0],\n      setAddress = _useState[1];\n\n  var _useState2 = useState(''),\n      coment = _useState2[0],\n      setComent = _useState2[1];\n\n  var handleComent = function handleComent(event) {\n    setComent(event.target.value);\n  };\n\n  var _useState3 = useState(''),\n      paymentMethod = _useState3[0],\n      setPaymentMethod = _useState3[1];\n\n  var paymentMethods = ['Наличные'];\n\n  var handlePaymentMethod = function handlePaymentMethod(event) {\n    setPaymentMethod(event.target.value);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.main\n  }, __jsx(FormControl, {\n    component: \"fieldset\",\n    style: {\n      width: width\n    }\n  }, __jsx(FormLabel, {\n    component: \"legend\"\n  }, \"\\u0410\\u0434\\u0440\\u0435\\u0441\\u0430 \\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043A\\u0438:\"), __jsx(FormGroup, null, client.address.map(function (element, idx) {\n    return __jsx(FormControlLabel, {\n      key: idx,\n      onChange: function onChange(e) {\n        if (e.target.checked) address.push(element);else {\n          address.splice(address.indexOf(element), 1);\n        }\n        setAddress(_toConsumableArray(address));\n      },\n      control: __jsx(Checkbox, {\n        value: idx\n      }),\n      label: element\n    });\n  }))), __jsx(\"br\", null), __jsx(Input, {\n    style: {\n      width: width\n    },\n    placeholder: \"\\u041A\\u043E\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439\",\n    value: coment,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: handleComent,\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"br\", null), __jsx(FormControl, {\n    style: {\n      width: width\n    },\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0421\\u043F\\u043E\\u0441\\u043E\\u0431 \\u043E\\u043F\\u043B\\u0430\\u0442\\u044B\"), __jsx(Select, {\n    value: paymentMethod,\n    onChange: handlePaymentMethod\n  }, paymentMethods.map(function (element) {\n    return __jsx(MenuItem, {\n      key: element,\n      value: element\n    }, element);\n  }))), __jsx(\"br\", null), __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.itogo\n  }, __jsx(\"b\", null, \"\\u0418\\u0442\\u043E\\u0433\\u043E:\"), \" \".concat(allPrice, \" \\u0441\\u043E\\u043C\")), __jsx(\"br\", null), __jsx(\"div\", null, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(paymentMethod.length > 0 && address.length > 0)) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 3;\n              return addOrders({\n                info: coment,\n                paymentMethod: paymentMethod,\n                address: address\n              });\n\n            case 3:\n              Router.push('/orders');\n              showMiniDialog(false);\n              _context.next = 8;\n              break;\n\n            case 7:\n              showSnackBar('Заполните все поля');\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })),\n    className: classes.button\n  }, \"\\u041A\\u0443\\u043F\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: function onClick() {\n      showMiniDialog(false);\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\")));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(BuyBasket));","map":null,"metadata":{},"sourceType":"module"}