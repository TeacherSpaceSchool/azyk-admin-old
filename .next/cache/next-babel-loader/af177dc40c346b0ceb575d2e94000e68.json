{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState } from 'react';\nimport App from '../layouts/App';\nimport { connect } from 'react-redux';\nimport { getContact, setContact } from '../src/gql/contact';\nimport contactStyle from '../src/styleMUI/contact';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { useRouter } from 'next/router';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../redux/actions/mini_dialog';\nimport dynamic from 'next/dynamic';\nimport Add from '@material-ui/icons/Add';\nimport Remove from '@material-ui/icons/Remove';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nconst Confirmation = dynamic(() => import('../components/dialog/Confirmation'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/dialog/Confirmation')],\n    modules: ['../components/dialog/Confirmation']\n  }\n});\nconst AddSocial = dynamic(() => import('../components/dialog/AddSocial'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/dialog/AddSocial')],\n    modules: ['../components/dialog/AddSocial']\n  }\n});\nconst Contact = React.memo(props => {\n  const classes = contactStyle();\n  const {\n    data\n  } = props;\n  const {\n    isMobileApp\n  } = props.app;\n  let {\n    0: name,\n    1: setName\n  } = useState(data.contact.name);\n  let {\n    0: address,\n    1: setAddress\n  } = useState(data.contact.address);\n  let {\n    0: newAddress,\n    1: setNewAddress\n  } = useState('');\n\n  let addAddress = () => {\n    address = [...address, newAddress];\n    setAddress(address);\n    setNewAddress('');\n  };\n\n  let editAddress = (event, idx) => {\n    address[idx] = event.target.value;\n    setAddress([...address]);\n  };\n\n  let deleteAddress = idx => {\n    address.splice(idx, 1);\n    setAddress([...address]);\n  };\n\n  let {\n    0: email,\n    1: setEmail\n  } = useState(data.contact.email);\n  let {\n    0: newEmail,\n    1: setNewEmail\n  } = useState('');\n\n  let addEmail = () => {\n    email = [...email, newEmail];\n    setEmail(email);\n    setNewEmail('');\n  };\n\n  let editEmail = (event, idx) => {\n    email[idx] = event.target.value;\n    setEmail([...email]);\n  };\n\n  let deleteEmail = idx => {\n    email.splice(idx, 1);\n    setEmail([...email]);\n  };\n\n  let {\n    0: phone,\n    1: setPhone\n  } = useState(data.contact.phone);\n  let {\n    0: newPhone,\n    1: setNewPhone\n  } = useState('');\n\n  let addPhone = () => {\n    phone = [...phone, newPhone];\n    setPhone(phone);\n    setNewPhone('');\n  };\n\n  let editPhone = (event, idx) => {\n    phone[idx] = event.target.value;\n    setPhone([...phone]);\n  };\n\n  let deletePhone = idx => {\n    phone.splice(idx, 1);\n    setPhone([...phone]);\n  };\n\n  let {\n    0: social,\n    1: setSocial\n  } = useState(data.contact.social);\n\n  let addSocial = (value, idx) => {\n    social[idx] = value;\n    setSocial([...social]);\n  };\n\n  let {\n    0: info,\n    1: setInfo\n  } = useState(data.contact.info);\n  let {\n    0: preview,\n    1: setPreview\n  } = useState(data.contact.image === '' ? '/static/add.png' : data.contact.image);\n  let {\n    0: image,\n    1: setImage\n  } = useState(undefined);\n\n  let handleChangeImage = event => {\n    setImage(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n  };\n\n  const {\n    profile\n  } = props.user;\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  return __jsx(App, {\n    filters: data.filterSubCategory,\n    sorts: data.sortSubCategory,\n    pageName: \"\\u041A\\u043E\\u043D\\u0442\\u0430\\u043A\\u0442\\u044B\"\n  }, __jsx(Head, null, __jsx(\"title\", null, name)), __jsx(Card, {\n    className: classes.page\n  }, __jsx(CardActions, null, __jsx(CardContent, {\n    className: isMobileApp ? classes.column : classes.row\n  }, profile.role === 'admin' ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.column\n  }, __jsx(\"label\", {\n    htmlFor: \"contained-button-file\"\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: classes.media,\n    src: preview,\n    alt: 'Добавить'\n  })), \"\\u041D\\u0430\\u0448\\u0438 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u044B\", __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    src: \"/static/instagram.svg\",\n    onClick: () => {\n      setMiniDialog('Instagram', __jsx(AddSocial, {\n        action: addSocial,\n        idx: 0\n      }));\n      showMiniDialog(true);\n    },\n    className: classes.mediaSocial\n  }), __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    src: \"/static/facebook.svg\",\n    onClick: () => {\n      setMiniDialog('Facebook', __jsx(AddSocial, {\n        action: addSocial,\n        idx: 0\n      }));\n      showMiniDialog(true);\n    },\n    className: classes.mediaSocial\n  }), __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    src: \"/static/twitter.svg\",\n    onClick: () => {\n      setMiniDialog('Twitter', __jsx(AddSocial, {\n        action: addSocial,\n        idx: 0\n      }));\n      showMiniDialog(true);\n    },\n    className: classes.mediaSocial\n  }), __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    src: \"/static/telegram.svg\",\n    onClick: () => {\n      setMiniDialog('Telegram', __jsx(AddSocial, {\n        action: addSocial,\n        idx: 0\n      }));\n      showMiniDialog(true);\n    },\n    className: classes.mediaSocial\n  }))), __jsx(\"div\", null, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setName(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0430\\u0434\\u0440\\u0435\\u0441\"), __jsx(Input, {\n    value: newAddress,\n    onChange: event => {\n      setNewAddress(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        addAddress();\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Add, null)))\n  })), address.map((element, idx) => __jsx(FormControl, {\n    key: idx,\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0410\\u0434\\u0440\\u0435\\u0441\"), __jsx(Input, {\n    placeholder: \"\\u0410\\u0434\\u0440\\u0435\\u0441\",\n    value: element,\n    onChange: event => {\n      editAddress(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deleteAddress(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  }))), __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C email\"), __jsx(Input, {\n    value: newEmail,\n    onChange: event => {\n      setNewEmail(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        addEmail();\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Add, null)))\n  })), email.map((element, idx) => __jsx(FormControl, {\n    key: idx,\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Input, {\n    value: element,\n    onChange: event => {\n      editEmail(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deleteEmail(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  }))), __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\"), __jsx(Input, {\n    value: newPhone,\n    onChange: event => {\n      setNewPhone(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        addPhone();\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Add, null)))\n  })), phone.map((element, idx) => __jsx(FormControl, {\n    key: idx,\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Input, {\n    value: element,\n    onChange: event => {\n      editPhone(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deletePhone(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  }))), __jsx(TextField, {\n    multiline: true,\n    label: \"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F\",\n    value: info,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setInfo(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        name: name,\n        address: address,\n        email: email,\n        phone: phone,\n        social: social,\n        info: info\n      };\n      if (image !== undefined) editElement.image = image;\n\n      const action = async () => {\n        await setContact(editElement);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\")))) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.column\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: classes.media,\n    src: preview,\n    alt: name\n  }), social[0].length > 0 || social[1].length > 0 || social[2].length > 0 || social[3].length > 0 ? __jsx(React.Fragment, null, \"\\u041D\\u0430\\u0448\\u0438 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u044B\", __jsx(\"div\", {\n    className: classes.row\n  }, social[0].length > 0 ? __jsx(\"a\", {\n    href: social[0]\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    src: \"/static/instagram.svg\",\n    className: classes.mediaSocial\n  })) : null, social[1].length > 0 ? __jsx(\"a\", {\n    href: social[1]\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    src: \"/static/facebook.svg\",\n    className: classes.mediaSocial\n  })) : null, social[2].length > 0 ? __jsx(\"a\", {\n    href: social[2]\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    src: \"/static/twitter.svg\",\n    className: classes.mediaSocial\n  })) : null, social[3].length > 0 ? __jsx(\"a\", {\n    href: social[3]\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    src: \"/static/telegram.svg\",\n    className: classes.mediaSocial\n  })) : null)) : null), __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.name\n  }, name), __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0410\\u0434\\u0440\\u0435\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.column\n  }, address.map((element, idx) => __jsx(\"div\", {\n    key: idx,\n    className: classes.value\n  }, element)))), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D:\\xA0\"), __jsx(\"div\", {\n    className: classes.column\n  }, phone.map((element, idx) => __jsx(\"a\", {\n    href: `tel:${element}`,\n    key: idx,\n    className: classes.value\n  }, element)))), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"E-mail:\\xA0\"), __jsx(\"div\", {\n    className: classes.column\n  }, email.map((element, idx) => __jsx(\"a\", {\n    href: `mailto:${element}`,\n    key: idx,\n    className: classes.value\n  }, element)))), __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.info\n  }, info)))))), __jsx(\"input\", {\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    id: \"contained-button-file\",\n    type: \"file\",\n    onChange: handleChangeImage\n  }));\n});\n\nContact.getInitialProps = async function () {\n  return {\n    data: _objectSpread({}, (await getContact()))\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contact);","map":null,"metadata":{},"sourceType":"module"}