{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\components\\\\organization\\\\CardOrganization.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport cardOrganizationStyle from '../../src/styleMUI/organization/cardOrganization.js';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport Button from '@material-ui/core/Button';\nimport dynamic from 'next/dynamic';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport { onoffOrganization, deleteOrganization } from '../../src/gql/organization';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nconst Confirmation = dynamic(() => import('../../components/dialog/Confirmation'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../components/dialog/Confirmation')],\n    modules: ['../../components/dialog/Confirmation']\n  }\n});\nconst CardOrganization = React.memo(props => {\n  const classes = cardOrganizationStyle();\n  const {\n    element,\n    setList\n  } = props;\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    profile\n  } = props.user;\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  let {\n    0: status,\n    1: setStatus\n  } = useState(element !== undefined ? element.status : '');\n  return __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/organization/[id]\",\n    as: `/organization/${element._id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.line,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: classes.mediaO,\n    src: element.image,\n    alt: element.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, element.name)))), profile.role === 'admin' ? __jsx(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await onoffOrganization([element._id]);\n        setStatus(status === 'active' ? 'deactive' : 'active');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, status === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        const list = (await deleteOrganization([element._id])).organizations;\n        setList(list);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrganization);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\organization\\CardOrganization.js"],"names":["React","useState","Card","CardActionArea","CardActions","cardOrganizationStyle","connect","Link","Button","dynamic","bindActionCreators","mini_dialogActions","onoffOrganization","deleteOrganization","LazyLoadImage","Confirmation","CardOrganization","memo","props","classes","element","setList","isMobileApp","app","profile","user","setMiniDialog","showMiniDialog","status","setStatus","undefined","cardM","cardD","_id","line","mediaO","image","name","inputM","inputD","role","action","list","organizations","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport cardOrganizationStyle from '../../src/styleMUI/organization/cardOrganization.js'\r\nimport { connect } from 'react-redux'\r\nimport Link from 'next/link';\r\nimport Button from '@material-ui/core/Button';\r\nimport dynamic from 'next/dynamic'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport { onoffOrganization, deleteOrganization } from '../../src/gql/organization'\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\n\r\nconst Confirmation = dynamic(\r\n    () => import('../../components/dialog/Confirmation')\r\n)\r\n\r\nconst CardOrganization = React.memo((props) => {\r\n    const classes = cardOrganizationStyle();\r\n    const { element, setList } = props;\r\n    const { isMobileApp } = props.app;\r\n    const { profile } = props.user;\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    let [status, setStatus] = useState(element!==undefined?element.status:'');\r\n    return (\r\n        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n            <CardActionArea>\r\n                <Link href='/organization/[id]' as={`/organization/${element._id}`}>\r\n                    <div className={classes.line}>\r\n                        <LazyLoadImage\r\n                            effect='blur'\r\n                            className={classes.mediaO}\r\n                            src={element.image}\r\n                            alt={element.name}\r\n                        />\r\n                        <h3 className={isMobileApp?classes.inputM:classes.inputD}>\r\n                            {element.name}\r\n                        </h3>\r\n                    </div>\r\n                </Link>\r\n            </CardActionArea>\r\n                {\r\n                    profile.role === 'admin' ?\r\n                        <CardActions>\r\n                            <Button onClick={async()=>{\r\n                                        const action = async() => {\r\n                                            await onoffOrganization([element._id])\r\n                                            setStatus(status==='active'?'deactive':'active')\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                {status==='active'?'Отключить':'Включить'}\r\n                            </Button>\r\n                                    <Button onClick={async()=>{\r\n                                        const action = async() => {\r\n                                            const list = (await deleteOrganization([element._id])).organizations\r\n                                            setList(list)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                        Удалить\r\n                                    </Button>\r\n                        </CardActions>\r\n                        :\r\n                        null\r\n                }\r\n        </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        app: state.app,\r\n        user: state.user\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrganization)"]},"metadata":{},"sourceType":"module"}