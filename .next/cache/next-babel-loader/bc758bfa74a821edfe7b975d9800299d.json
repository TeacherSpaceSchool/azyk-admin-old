{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getSubCategorys = async ({\n  category,\n  search,\n  sort,\n  filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        category: category,\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($category: ID!,$search: String!, $sort: String!, $filter: String!) {\n                        subCategorys(category: $category, search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            category\n                                {_id name}\n                            name\n                            status\n                            createdAt\n                          }\n                          sortSubCategory {\n                           name\n                            field\n                          }\n                          filterSubCategory {\n                           name\n                           value\n                          }\n                          category(_id: $category) {\n                                _id\n                                image\n                                name\n                                status\n                                createdAt\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteSubCategory = async (ids, category) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteSubCategory(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getSubCategorys(_objectSpread({\n      category: category\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const onoffSubCategory = async (ids, category) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        onoffSubCategory(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getSubCategorys(_objectSpread({\n      category: category\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addSubCategory = async (element, category) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: _objectSpread({}, element, {\n        category: category\n      }),\n      mutation: gql`\n                    mutation ($category: ID!, $name: String!) {\n                        addSubCategory(category: $category, name: $name) {\n                             data\n                        }\n                    }`\n    });\n    return await getSubCategorys(_objectSpread({\n      category: category\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setSubCategory = async (element, category) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: _objectSpread({}, element),\n      mutation: gql`\n                    mutation ($_id: ID!, $name: String, $category: ID) {\n                        setSubCategory(_id: $_id, name: $name, category: $category) {\n                             data\n                        }\n                    }`\n    });\n    return await getSubCategorys(_objectSpread({\n      category: category\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\subcategory.js"],"names":["gql","SingletonApolloClient","SingletonStore","getSubCategorys","category","search","sort","filter","client","getClient","res","query","variables","data","err","console","error","deleteSubCategory","ids","mutate","_id","mutation","getStore","getState","app","onoffSubCategory","addSubCategory","element","setSubCategory"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getSubCategorys = async({category,  search,  sort,  filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {category: category, search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($category: ID!,$search: String!, $sort: String!, $filter: String!) {\r\n                        subCategorys(category: $category, search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            category\r\n                                {_id name}\r\n                            name\r\n                            status\r\n                            createdAt\r\n                          }\r\n                          sortSubCategory {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterSubCategory {\r\n                           name\r\n                           value\r\n                          }\r\n                          category(_id: $category) {\r\n                                _id\r\n                                image\r\n                                name\r\n                                status\r\n                                createdAt\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteSubCategory = async(ids, category)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteSubCategory(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getSubCategorys({category: category, ...(new SingletonStore().getStore().getState().app)})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const onoffSubCategory = async(ids, category)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        onoffSubCategory(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getSubCategorys({category: category, ...(new SingletonStore().getStore().getState().app)})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addSubCategory = async(element, category)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {...element, category: category},\r\n            mutation : gql`\r\n                    mutation ($category: ID!, $name: String!) {\r\n                        addSubCategory(category: $category, name: $name) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getSubCategorys({category: category, ...(new SingletonStore().getStore().getState().app)})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setSubCategory = async(element, category)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {...element},\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $name: String, $category: ID) {\r\n                        setSubCategory(_id: $_id, name: $name, category: $category) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getSubCategorys({category: category, ...(new SingletonStore().getStore().getState().app)})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}