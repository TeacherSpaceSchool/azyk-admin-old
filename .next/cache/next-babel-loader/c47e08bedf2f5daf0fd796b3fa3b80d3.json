{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\n/* eslint-disable no-extra-boolean-cast */\nimport { urlGQL, urlGQLws } from '../../redux/constants/other';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'node-fetch';\nimport { getJWT } from '../lib';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, split } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport * as ws from 'ws';\nimport { SingletonStore } from '../singleton/store';\nimport { showSnackBar } from '../../redux/actions/snackbar';\nexport var SingletonApolloClient =\n/*#__PURE__*/\nfunction () {\n  function SingletonApolloClient(req) {\n    var _this = this;\n\n    _classCallCheck(this, SingletonApolloClient);\n\n    if (!!SingletonApolloClient.instance) {\n      return SingletonApolloClient.instance;\n    }\n\n    SingletonApolloClient.instance = this;\n    var uploadLink = createUploadLink({\n      uri: urlGQL,\n      fetch: fetch,\n      credentials: 'include'\n    });\n    var authLink = setContext(function (_, _ref) {\n      var headers = _ref.headers;\n      return {\n        headers: _objectSpread({}, headers, {\n          authorization: _this.jwt ? \"Bearer \".concat(_this.jwt) : ''\n        })\n      };\n    });\n    var linkError = onError(function (_ref2) {\n      var graphQLErrors = _ref2.graphQLErrors,\n          networkError = _ref2.networkError;\n      if (graphQLErrors) graphQLErrors.map(function (_ref3) {\n        var message = _ref3.message,\n            locations = _ref3.locations,\n            path = _ref3.path;\n        new SingletonStore().getStore().dispatch(showSnackBar('Ошибка'));\n        console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n      });\n      if (networkError) console.log(\"[Network error]: \".concat(networkError));\n    });\n    var wsLink = new WebSocketLink({\n      uri: urlGQLws,\n      options: {\n        reconnect: true\n      },\n      webSocketImpl: process.browser ? WebSocket : ws\n    });\n    var mainLink = split(function (_ref4) {\n      var query = _ref4.query;\n      var definition = getMainDefinition(query);\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n    }, wsLink, uploadLink);\n    var link = ApolloLink.from([linkError, authLink, mainLink]);\n    this.client = new ApolloClient({\n      link: link,\n      cache: new InMemoryCache(),\n      defaultOptions: {\n        watchQuery: {\n          fetchPolicy: 'cache-and-network',\n          errorPolicy: 'ignore'\n        },\n        query: {\n          fetchPolicy: 'network-only',\n          errorPolicy: 'all'\n        },\n        mutate: {\n          errorPolicy: 'all'\n        }\n      }\n    });\n    this.jwt = getJWT(req ? req.headers.cookie : document.cookie);\n    return this;\n  }\n\n  _createClass(SingletonApolloClient, [{\n    key: \"getClient\",\n    value: function getClient() {\n      return this.client;\n    }\n  }]);\n\n  return SingletonApolloClient;\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\singleton\\client.js"],"names":["urlGQL","urlGQLws","ApolloClient","InMemoryCache","fetch","getJWT","setContext","onError","ApolloLink","split","createUploadLink","WebSocketLink","getMainDefinition","ws","SingletonStore","showSnackBar","SingletonApolloClient","req","instance","uploadLink","uri","credentials","authLink","_","headers","authorization","jwt","linkError","graphQLErrors","networkError","map","message","locations","path","getStore","dispatch","console","log","wsLink","options","reconnect","webSocketImpl","process","browser","WebSocket","mainLink","query","definition","kind","operation","link","from","client","cache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","mutate","cookie","document"],"mappings":"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","sourcesContent":["/* eslint-disable no-extra-boolean-cast */\r\nimport { urlGQL, urlGQLws } from '../../redux/constants/other';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport fetch from 'node-fetch';\r\nimport { getJWT } from '../lib'\r\nimport { setContext } from 'apollo-link-context';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink, split  } from 'apollo-link';\r\nimport { createUploadLink } from 'apollo-upload-client'\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport * as ws from 'ws';\r\nimport { SingletonStore } from '../singleton/store';\r\nimport {\r\n    showSnackBar\r\n} from '../../redux/actions/snackbar'\r\nexport class SingletonApolloClient {\r\n    constructor(req) {\r\n        if (!!SingletonApolloClient.instance) {\r\n            return SingletonApolloClient.instance;\r\n        }\r\n        SingletonApolloClient.instance = this;\r\n        const uploadLink = createUploadLink({\r\n            uri: urlGQL,\r\n            fetch: fetch,\r\n            credentials: 'include'\r\n        });\r\n        const authLink = setContext((_, { headers }) => {\r\n            return {\r\n                headers: {\r\n                    ...headers,\r\n                    authorization: this.jwt ? `Bearer ${this.jwt}` : '',\r\n                }\r\n            }\r\n        });\r\n        const linkError = onError(({ graphQLErrors, networkError }) => {\r\n            if (graphQLErrors)\r\n                graphQLErrors.map(({ message, locations, path }) =>{\r\n                    new SingletonStore().getStore().dispatch(showSnackBar('Ошибка'))\r\n                    console.log(\r\n                        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n                    )\r\n                });\r\n            if (networkError) console.log(`[Network error]: ${networkError}`);\r\n        });\r\n        const wsLink = new WebSocketLink({\r\n            uri: urlGQLws,\r\n            options: {\r\n                reconnect: true\r\n            },\r\n            webSocketImpl: process.browser?WebSocket:ws\r\n        });\r\n        const mainLink = split(\r\n            ({ query }) => {\r\n                const definition = getMainDefinition(query);\r\n                return (\r\n                    definition.kind === 'OperationDefinition' &&\r\n                    definition.operation === 'subscription'\r\n                );\r\n            },\r\n            wsLink,\r\n            uploadLink,\r\n        );\r\n        const link = ApolloLink.from([\r\n            linkError,\r\n            authLink,\r\n            mainLink\r\n        ]);\r\n        this.client = new ApolloClient({\r\n            link: link,\r\n            cache: new InMemoryCache(),\r\n            defaultOptions: {\r\n                watchQuery: {\r\n                    fetchPolicy: 'cache-and-network',\r\n                    errorPolicy: 'ignore',\r\n                },\r\n                query: {\r\n                    fetchPolicy: 'network-only',\r\n                    errorPolicy: 'all',\r\n                },\r\n                mutate: {\r\n                    errorPolicy: 'all',\r\n                },\r\n            },\r\n\r\n        });\r\n        this.jwt = getJWT(req?req.headers.cookie:document.cookie)\r\n\r\n        return this;\r\n    }\r\n\r\n    getClient() {\r\n        return this.client;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}