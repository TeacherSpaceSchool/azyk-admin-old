{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getItems = async ({\n  subCategory,\n  search,\n  sort,\n  filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        subCategory: subCategory,\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($subCategory: ID!,$search: String!, $sort: String!, $filter: String!) {\n                        items(subCategory: $subCategory, search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            subCategory\n                                {_id name}\n                            name\n                            status\n                            createdAt                  \n                            stock\n                            image\n                            info\n                            price\n                            reiting\n                            organization\n                                {_id name}\n                            hit\n                            latest\n                            favorite\n                            basket\n                        }\n                        sortItem {\n                            name\n                            field\n                        }\n                        filterItem {\n                           name\n                           value\n                        }\n                        subCategory(_id: $subCategory) {\n                           _id\n                           name\n                           category\n                                {_id name}\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getBrands = async ({\n  organization,\n  search,\n  sort,\n  filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        organization: organization,\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($organization: ID!,$search: String!, $sort: String!) {\n                        brands(organization: $organization, search: $search, sort: $sort) {\n                            _id\n                            subCategory\n                                {_id name}\n                            name\n                            status\n                            createdAt                  \n                            stock\n                            image\n                            info\n                            price\n                            reiting\n                            organization\n                                {_id name info image}\n                            hit\n                            latest\n                            favorite\n                            basket\n                        }\n                        sortItem {\n                            name\n                            field\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const favorites = async ({\n  search\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        search: search\n      },\n      query: gql`\n                    query ($search: String!) {\n                        favorites(search: $search) {\n                            _id\n                            subCategory\n                                {_id name}\n                            name\n                            status\n                            createdAt                  \n                            stock\n                            image\n                            info\n                            price\n                            reiting\n                            organization\n                                {_id name}\n                            hit\n                            latest\n                            favorite\n                            basket\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getItem = async ({\n  _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID!) {\n                        item(_id: $_id) {\n                            _id\n                            subCategory\n                                {\n                                    _id \n                                    name \n                                    category\n                                        {_id name}\n                                }\n                            name\n                            status\n                            createdAt                  \n                            stock\n                            image\n                            info\n                            price\n                            reiting\n                            organization\n                                {_id name minimumOrder}\n                            hit\n                            latest\n                            favorite\n                            basket\n                            deliveryDays\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteItem = async (ids, subCategory) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteItem(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getItems(_objectSpread({\n      subCategory: subCategory\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const onoffItem = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        onoffItem(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const favoriteItem = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        favoriteItem(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addFavoriteItem = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        addFavoriteItem(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addItem = async (element, subCategory) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: _objectSpread({}, element, {\n        subCategory: subCategory\n      }),\n      mutation: gql`\n                    mutation ($stock: Int!, $deliveryDays: [String], $name: String!, $image: Upload, $info: String!, $price: Int!, $subCategory: ID!, $organization: ID!, $hit: Boolean!, $latest: Boolean!) {\n                        addItem(stock: $stock, deliveryDays: $deliveryDays, name: $name, image: $image, info: $info, price: $price, subCategory: $subCategory, organization: $organization, hit: $hit, latest: $latest) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setItem = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: _objectSpread({}, element),\n      mutation: gql`\n                    mutation ($_id: ID!, $stock: Int, $deliveryDays: [String], $name: String, $image: Upload, $info: String, $price: Int, $subCategory: ID, $organization: ID, $hit: Boolean, $latest: Boolean) {\n                        setItem(_id: $_id, stock: $stock, deliveryDays: $deliveryDays, name: $name, image: $image, info: $info, price: $price, subCategory: $subCategory, organization: $organization, hit: $hit, latest: $latest) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}