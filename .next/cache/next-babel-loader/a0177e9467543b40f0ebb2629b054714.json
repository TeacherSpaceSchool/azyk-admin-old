{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\pages\\\\route\\\\[id].js\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState, useEffect } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getOrganizations } from '../../src/gql/organization';\nimport { getOrdersForRouting } from '../../src/gql/order';\nimport { getRoute, setRoute, deleteRoute, addRoute } from '../../src/gql/route';\nimport { getEcspeditors } from '../../src/gql/employment';\nimport routeStyle from '../../src/styleMUI/route/route';\nimport { useRouter } from 'next/router';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CardOrder from '../../components/order/CardOrder';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Router from 'next/router';\nimport { pdDatePicker } from '../../src/lib';\nimport Confirmation from '../../components/dialog/Confirmation';\nimport GeoRoute from '../../components/dialog/GeoRoute';\nimport { urlMain } from '../../redux/constants/other';\nconst Route = React.memo(props => {\n  const {\n    profile\n  } = props.user;\n  const classes = routeStyle();\n  const {\n    data\n  } = props;\n  const router = useRouter();\n  const {\n    isMobileApp\n  } = props.app;\n  let {\n    0: dateStart,\n    1: setDateStart\n  } = useState(data.route ? pdDatePicker(new Date(data.route.dateStart)) : null);\n  let {\n    0: employment,\n    1: setEmployment\n  } = useState(data.route ? data.route.employment : {});\n  let {\n    0: status,\n    1: setStatus\n  } = useState(data.route.status);\n\n  let handleEmployment = event => {\n    setEmployment({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: organization,\n    1: setOrganization\n  } = useState(router.query.id === 'new' || !data.route ? {} : data.route.employment.organization);\n\n  let handleOrganization = event => {\n    setOrganization({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: invoices,\n    1: setInvoices\n  } = useState(data.route ? data.route.invoices : []);\n  let {\n    0: cancelInvoices,\n    1: setCancelInvoices\n  } = useState([]);\n  let {\n    0: allInvoices,\n    1: setAllInvoices\n  } = useState([]);\n  let {\n    0: unselectedInvoices,\n    1: setUnselectedInvoices\n  } = useState([]);\n  let {\n    0: selectType,\n    1: setSelectType\n  } = useState('Все');\n  let {\n    0: employments,\n    1: setEmployments\n  } = useState([]);\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  useEffect(() => {\n    (async () => {\n      if (data.route) {\n        if (['организация', 'менеджер'].includes(profile.role) && router.query.id === 'new') {\n          let organization = data.organizations.filter(element => element._id === profile.organization);\n          setOrganization(organization[0]);\n        }\n      }\n    })();\n  }, [profile]);\n  useEffect(() => {\n    (async () => {\n      if (data.route && ['организация', 'менеджер', 'admin'].includes(profile.role)) {\n        setUnselectedInvoices((await getOrdersForRouting()).invoicesForRouting);\n      }\n    })();\n  }, []);\n  useEffect(() => {\n    (async () => {\n      if (data.route) {\n        if (router.query.id === 'new') setEmployment({});\n        setEmployments((await getEcspeditors({\n          _id: organization._id\n        })).ecspeditors);\n      }\n    })();\n  }, [organization]);\n  useEffect(() => {\n    (async () => {\n      if (data.route) {\n        let allInvoices;\n        if (selectType == 'Все') allInvoices = [...invoices, ...unselectedInvoices];else if (selectType == 'Свободные') allInvoices = [...unselectedInvoices];else if (selectType == 'Выбраные') allInvoices = [...invoices];\n        allInvoices.sort((a, b) => {\n          a.createdAt = new Date(a.createdAt);\n          b.createdAt = new Date(b.createdAt);\n          if (a.createdAt > b.createdAt) return -1;\n          if (a.createdAt < b.createdAt) return 1;\n          return 0;\n        });\n        setAllInvoices([...allInvoices]);\n      }\n    })();\n  }, [selectType, unselectedInvoices, invoices]);\n  const statusColor = {\n    'создан': 'orange',\n    'выполняется': 'blue',\n    'выполнен': 'green'\n  };\n\n  let getInvoices = async () => {\n    if (data.route) {\n      setUnselectedInvoices((await getOrdersForRouting()).invoicesForRouting);\n      setCancelInvoices([]);\n\n      if (data.route._id) {\n        let route = (await getRoute({\n          _id: data.route._id\n        })).route;\n        setInvoices(route.invoices);\n        console.log(route.status);\n        setStatus(route.status);\n      }\n    }\n  };\n\n  const breakGeoRoute = invoices.filter(element => !element.address[1]).length > 0;\n  return __jsx(App, {\n    pageName: data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено'), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"website\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: `${urlMain}/static/512x512.png`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `${urlMain}/route/${router.query.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: `${urlMain}/route/${router.query.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), __jsx(Card, {\n    className: isMobileApp ? classes.pageM : classes.pageD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, data.route ? __jsx(React.Fragment, null, router.query.id === 'new' ? null : __jsx(\"div\", {\n    className: classes.status,\n    style: {\n      background: statusColor[status]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, status), __jsx(CardContent, {\n    className: classes.column,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, data.route ? __jsx(React.Fragment, null, router.query.id === 'new' ? null : __jsx(\"div\", {\n    className: classes.number,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, data.route.number), (router.query.id === 'new' || status === 'создан') && profile.role === 'admin' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Select, {\n    value: organization._id,\n    onChange: handleOrganization,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, data.organizations.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, element.name)))) : __jsx(TextField, {\n    label: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n    value: organization.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), (router.query.id === 'new' || status === 'создан') && ['admin', 'организация', 'менеджер'].includes(profile.role) ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"\\u042D\\u043A\\u0441\\u043F\\u0435\\u0434\\u0438\\u0442\\u043E\\u0440\"), __jsx(Select, {\n    value: employment._id,\n    onChange: handleEmployment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, employments.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, element.name)))) : __jsx(TextField, {\n    label: \"\\u042D\\u043A\\u0441\\u043F\\u0435\\u0434\\u0438\\u0442\\u043E\\u0440\",\n    value: employment.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }), __jsx(TextField, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    label: \"\\u0414\\u0430\\u0442\\u0430\",\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: dateStart,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: !(router.query.id === 'new' || status === 'создан')\n    },\n    onChange: event => setDateStart(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      color: breakGeoRoute ? 'red' : '#ffb300'\n    },\n    onClick: () => {\n      setMiniDialog('Маршрут', __jsx(GeoRoute, {\n        invoices: invoices,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }), true);\n      showMiniDialog(true);\n    },\n    className: classes.geo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, breakGeoRoute ? 'Маршрут неполный' : 'Просмотреть маршрут'), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      justifyContent: 'center'\n    },\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      background: selectType === 'Все' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Все');\n    },\n    className: classes.selectType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, \"\\u0412\\u0441\\u0435\"), __jsx(\"div\", {\n    style: {\n      background: selectType === 'Свободные' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Свободные');\n    },\n    className: classes.selectType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"\\u0421\\u0432\\u043E\\u0431\\u043E\\u0434\\u043D\\u044B\\u0435\"), __jsx(\"div\", {\n    style: {\n      background: selectType === 'Выбраные' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Выбраные');\n    },\n    className: classes.selectType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u043D\\u044B\\u0435\")), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: classes.listInvoices,\n    style: {\n      zoom: isMobileApp ? 0.83 : 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, allInvoices ? allInvoices.map((element, idx) => {\n    return __jsx(\"div\", {\n      key: idx,\n      className: classes.row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, ['обработка', 'принят'].includes(element.orders[0].status)\n    /*&&!element.confirmationForwarder*/\n    ? __jsx(Checkbox, {\n      checked: invoices.includes(element),\n      onChange: () => {\n        if (!invoices.includes(element)) {\n          invoices.push(element);\n          unselectedInvoices.splice(unselectedInvoices.indexOf(element), 1);\n          cancelInvoices.splice(cancelInvoices.indexOf(element), 1);\n        } else {\n          invoices.splice(invoices.indexOf(element), 1);\n          unselectedInvoices.push(element);\n          cancelInvoices.push(element);\n        }\n\n        setInvoices([...invoices]);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }) : null, __jsx(CardOrder, {\n      getInvoices: getInvoices,\n      route: data.route._id,\n      element: element,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }));\n  }) : null), __jsx(\"div\", {\n    className: isMobileApp ? classes.bottomRouteM : classes.bottomRouteD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick: async () => {\n      if (dateStart && employment._id && organization._id) {\n        const action = async () => {\n          if (employment._id !== undefined && dateStart) {\n            invoices = invoices.map(element => element._id);\n            await addRoute({\n              invoices: invoices,\n              employment: employment._id,\n              dateStart: new Date(dateStart)\n            });\n            Router.push('/routes');\n          }\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        let editElement = {\n          _id: data.route._id\n        };\n        if (employment._id !== data.route.employment._id && status === 'создан') editElement.employment = employment._id;\n        if (dateStart && status === 'создан') editElement.dateStart = new Date(dateStart);\n        editElement.invoices = invoices.map(element => element._id);\n        if (cancelInvoices.length > 0) editElement.cancelInvoices = cancelInvoices.map(element => element._id);\n        await setRoute(editElement);\n        getInvoices();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), ['организация', 'менеджер', 'admin'].includes(profile.role) && status === 'создан' ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await deleteRoute([data.route._id]);\n        Router.push('/routes');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null))) : 'Ничего не найдено', __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }))) : __jsx(CardContent, {\n    className: classes.column,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\")));\n});\n\nRoute.getInitialProps = async function (ctx) {\n  if (!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role)) if (ctx.res) {\n    ctx.res.writeHead(302, {\n      Location: '/'\n    });\n    ctx.res.end();\n  } else Router.push('/');\n  return {\n    data: _objectSpread({}, ctx.query.id !== 'new' ? await getRoute({\n      _id: ctx.query.id\n    }) : {\n      route: {\n        invoices: [],\n        employment: {},\n        status: '',\n        dateStart: null,\n        dateEnd: null,\n        number: ''\n      }\n    }, (await getOrganizations({\n      search: '',\n      sort: 'name',\n      filter: ''\n    })))\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Route);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\pages\\route\\[id].js"],"names":["Head","React","useState","useEffect","App","connect","getOrganizations","getOrdersForRouting","getRoute","setRoute","deleteRoute","addRoute","getEcspeditors","routeStyle","useRouter","Card","CardContent","Checkbox","CardOrder","InputLabel","MenuItem","FormControl","Select","bindActionCreators","mini_dialogActions","snackbarActions","TextField","Button","Router","pdDatePicker","Confirmation","GeoRoute","urlMain","Route","memo","props","profile","user","classes","data","router","isMobileApp","app","dateStart","setDateStart","route","Date","employment","setEmployment","status","setStatus","handleEmployment","event","_id","target","value","name","organization","setOrganization","query","id","handleOrganization","invoices","setInvoices","cancelInvoices","setCancelInvoices","allInvoices","setAllInvoices","unselectedInvoices","setUnselectedInvoices","selectType","setSelectType","employments","setEmployments","setMiniDialog","showMiniDialog","showSnackBar","includes","role","organizations","filter","element","invoicesForRouting","ecspeditors","sort","a","b","createdAt","statusColor","getInvoices","console","log","breakGeoRoute","address","length","number","pageM","pageD","background","column","inputM","inputDF","map","readOnly","shrink","color","geo","justifyContent","row","listInvoices","zoom","idx","orders","push","splice","indexOf","bottomRouteM","bottomRouteD","action","undefined","editElement","getInitialProps","ctx","store","getState","res","writeHead","Location","end","dateEnd","search","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,WAA7B,EAA0CC,QAA1C,QAA0D,qBAA1D;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAO,KAAKC,kBAAZ,MAAoC,iCAApC;AACA,OAAO,KAAKC,eAAZ,MAAiC,8BAAjC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,OAAT,QAAwB,6BAAxB;AAGA,MAAMC,KAAK,GAAGhC,KAAK,CAACiC,IAAN,CAAYC,KAAD,IAAW;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAAK,CAACE,IAA1B;AACA,QAAMC,OAAO,GAAGzB,UAAU,EAA1B;AACA,QAAM;AAAE0B,IAAAA;AAAF,MAAWJ,KAAjB;AACA,QAAMK,MAAM,GAAG1B,SAAS,EAAxB;AACA,QAAM;AAAE2B,IAAAA;AAAF,MAAkBN,KAAK,CAACO,GAA9B;AACA,MAAI;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4B1C,QAAQ,CAACqC,IAAI,CAACM,KAAL,GAAWhB,YAAY,CAAC,IAAIiB,IAAJ,CAASP,IAAI,CAACM,KAAL,CAAWF,SAApB,CAAD,CAAvB,GAAwD,IAAzD,CAAxC;AACA,MAAI;AAAA,OAACI,UAAD;AAAA,OAAaC;AAAb,MAA8B9C,QAAQ,CAACqC,IAAI,CAACM,KAAL,GAAWN,IAAI,CAACM,KAAL,CAAWE,UAAtB,GAAiC,EAAlC,CAA1C;AACA,MAAI;AAAA,OAACE,MAAD;AAAA,OAASC;AAAT,MAAsBhD,QAAQ,CAACqC,IAAI,CAACM,KAAL,CAAWI,MAAZ,CAAlC;;AACA,MAAIE,gBAAgB,GAAKC,KAAD,IAAW;AAC/BJ,IAAAA,aAAa,CAAC;AAACK,MAAAA,GAAG,EAAED,KAAK,CAACE,MAAN,CAAaC,KAAnB;AAA0BC,MAAAA,IAAI,EAAEJ,KAAK,CAACE,MAAN,CAAaE;AAA7C,KAAD,CAAb;AACH,GAFD;;AAGA,MAAI;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCxD,QAAQ,CAACsC,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,IAAyB,CAACrB,IAAI,CAACM,KAA/B,GAAqC,EAArC,GAAwCN,IAAI,CAACM,KAAL,CAAWE,UAAX,CAAsBU,YAA/D,CAA9C;;AACA,MAAII,kBAAkB,GAAKT,KAAD,IAAW;AACjCM,IAAAA,eAAe,CAAC;AAACL,MAAAA,GAAG,EAAED,KAAK,CAACE,MAAN,CAAaC,KAAnB;AAA0BC,MAAAA,IAAI,EAAEJ,KAAK,CAACE,MAAN,CAAaE;AAA7C,KAAD,CAAf;AACH,GAFD;;AAGA,MAAI;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0B7D,QAAQ,CAACqC,IAAI,CAACM,KAAL,GAAWN,IAAI,CAACM,KAAL,CAAWiB,QAAtB,GAA+B,EAAhC,CAAtC;AACA,MAAI;AAAA,OAACE,cAAD;AAAA,OAAiBC;AAAjB,MAAsC/D,QAAQ,CAAC,EAAD,CAAlD;AACA,MAAI;AAAA,OAACgE,WAAD;AAAA,OAAcC;AAAd,MAAgCjE,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAI;AAAA,OAACkE,kBAAD;AAAA,OAAqBC;AAArB,MAA8CnE,QAAQ,CAAC,EAAD,CAA1D;AACA,MAAI;AAAA,OAACoE,UAAD;AAAA,OAAaC;AAAb,MAA8BrE,QAAQ,CAAC,KAAD,CAA1C;AACA,MAAI;AAAA,OAACsE,WAAD;AAAA,OAAcC;AAAd,MAAgCvE,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAEwE,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAoCxC,KAAK,CAACX,kBAAhD;AACA,QAAM;AAAEoD,IAAAA;AAAF,MAAmBzC,KAAK,CAACV,eAA/B;AACAtB,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAS;AACN,UAAGoC,IAAI,CAACM,KAAR,EAAe;AACX,YAAI,CAAC,aAAD,EAAgB,UAAhB,EAA4BgC,QAA5B,CAAqCzC,OAAO,CAAC0C,IAA7C,KAAsDtC,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAoB,KAA9E,EAAqF;AACjF,cAAIH,YAAY,GAAGlB,IAAI,CAACwC,aAAL,CAAmBC,MAAnB,CAA0BC,OAAO,IAAIA,OAAO,CAAC5B,GAAR,KAAgBjB,OAAO,CAACqB,YAA7D,CAAnB;AACAC,UAAAA,eAAe,CAACD,YAAY,CAAC,CAAD,CAAb,CAAf;AACH;AACJ;AACJ,KAPD;AAQH,GATQ,EASP,CAACrB,OAAD,CATO,CAAT;AAUAjC,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAS;AACN,UAAGoC,IAAI,CAACM,KAAL,IAAY,CAAC,aAAD,EAAgB,UAAhB,EAA4B,OAA5B,EAAqCgC,QAArC,CAA8CzC,OAAO,CAAC0C,IAAtD,CAAf,EAA4E;AACxET,QAAAA,qBAAqB,CAAC,CAAC,MAAM9D,mBAAmB,EAA1B,EAA8B2E,kBAA/B,CAArB;AACH;AACJ,KAJD;AAKH,GANQ,EAMP,EANO,CAAT;AAOA/E,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAS;AACN,UAAGoC,IAAI,CAACM,KAAR,EAAe;AACX,YAAIL,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAoB,KAAxB,EACIZ,aAAa,CAAC,EAAD,CAAb;AACJyB,QAAAA,cAAc,CAAC,CAAC,MAAM7D,cAAc,CAAC;AAACyC,UAAAA,GAAG,EAAEI,YAAY,CAACJ;AAAnB,SAAD,CAArB,EAAgD8B,WAAjD,CAAd;AACH;AACJ,KAND;AAOH,GARQ,EAQP,CAAC1B,YAAD,CARO,CAAT;AASAtD,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAS;AACN,UAAGoC,IAAI,CAACM,KAAR,EAAe;AACX,YAAIqB,WAAJ;AACA,YAAII,UAAU,IAAI,KAAlB,EACIJ,WAAW,GAAG,CAAC,GAAGJ,QAAJ,EAAc,GAAGM,kBAAjB,CAAd,CADJ,KAEK,IAAIE,UAAU,IAAI,WAAlB,EACDJ,WAAW,GAAG,CAAC,GAAGE,kBAAJ,CAAd,CADC,KAEA,IAAIE,UAAU,IAAI,UAAlB,EACDJ,WAAW,GAAG,CAAC,GAAGJ,QAAJ,CAAd;AACJI,QAAAA,WAAW,CAACkB,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvBD,UAAAA,CAAC,CAACE,SAAF,GAAc,IAAIzC,IAAJ,CAASuC,CAAC,CAACE,SAAX,CAAd;AACAD,UAAAA,CAAC,CAACC,SAAF,GAAc,IAAIzC,IAAJ,CAASwC,CAAC,CAACC,SAAX,CAAd;AACA,cAAIF,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B,OAAO,CAAC,CAAR;AAC/B,cAAIF,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B,OAAO,CAAP;AAC/B,iBAAO,CAAP;AACH,SAND;AAOApB,QAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,CAAD,CAAd;AACH;AACJ,KAlBD;AAmBH,GApBQ,EAoBP,CAACI,UAAD,EAAaF,kBAAb,EAAiCN,QAAjC,CApBO,CAAT;AAqBA,QAAM0B,WAAW,GAAG;AAChB,cAAU,QADM;AAEhB,mBAAe,MAFC;AAGhB,gBAAY;AAHI,GAApB;;AAKA,MAAIC,WAAW,GAAG,YAAU;AACxB,QAAGlD,IAAI,CAACM,KAAR,EAAc;AACVwB,MAAAA,qBAAqB,CAAC,CAAC,MAAM9D,mBAAmB,EAA1B,EAA8B2E,kBAA/B,CAArB;AACAjB,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;;AACA,UAAG1B,IAAI,CAACM,KAAL,CAAWQ,GAAd,EAAmB;AACf,YAAIR,KAAK,GAAG,CAAC,MAAMrC,QAAQ,CAAC;AAAC6C,UAAAA,GAAG,EAAEd,IAAI,CAACM,KAAL,CAAWQ;AAAjB,SAAD,CAAf,EAAwCR,KAApD;AACAkB,QAAAA,WAAW,CAAClB,KAAK,CAACiB,QAAP,CAAX;AACA4B,QAAAA,OAAO,CAACC,GAAR,CAAY9C,KAAK,CAACI,MAAlB;AACAC,QAAAA,SAAS,CAACL,KAAK,CAACI,MAAP,CAAT;AACH;AACJ;AACJ,GAXD;;AAYA,QAAM2C,aAAa,GAAI9B,QAAQ,CAACkB,MAAT,CAAiBC,OAAD,IAAW,CAACA,OAAO,CAACY,OAAR,CAAgB,CAAhB,CAA5B,CAAD,CAAkDC,MAAlD,GAAyD,CAA/E;AACA,SACI,MAAC,GAAD;AAAK,IAAA,QAAQ,EAAEvD,IAAI,CAACM,KAAL,GAAWL,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,UAAxB,GAAmCrB,IAAI,CAACM,KAAL,CAAWkD,MAAzD,GAAgE,mBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQxD,IAAI,CAACM,KAAL,GAAWL,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,UAAxB,GAAmCrB,IAAI,CAACM,KAAL,CAAWkD,MAAzD,GAAgE,mBAAxE,CADJ,EAEI;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAC,mlDAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAExD,IAAI,CAACM,KAAL,GAAWL,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,UAAxB,GAAmCrB,IAAI,CAACM,KAAL,CAAWkD,MAAzD,GAAgE,mBAAnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII;AAAM,IAAA,QAAQ,EAAC,gBAAf;AAAgC,IAAA,OAAO,EAAC,mlDAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI;AAAM,IAAA,QAAQ,EAAC,SAAf;AAAyB,IAAA,OAAO,EAAC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAMI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAG,GAAE/D,OAAQ,qBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAOI;AAAM,IAAA,QAAQ,EAAC,QAAf;AAAwB,IAAA,OAAO,EAAG,GAAEA,OAAQ,UAASQ,MAAM,CAACmB,KAAP,CAAaC,EAAG,EAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQI;AAAM,IAAA,GAAG,EAAC,WAAV;AAAsB,IAAA,IAAI,EAAG,GAAE5B,OAAQ,UAASQ,MAAM,CAACmB,KAAP,CAAaC,EAAG,EAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADJ,EAWI,MAAC,IAAD;AAAM,IAAA,SAAS,EAAEnB,WAAW,GAACH,OAAO,CAAC0D,KAAT,GAAe1D,OAAO,CAAC2D,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK1D,IAAI,CAACM,KAAL,GACG,4BACCL,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,IAAxB,GAA6B;AAAK,IAAA,SAAS,EAAEtB,OAAO,CAACW,MAAxB;AAAgC,IAAA,KAAK,EAAE;AAACiD,MAAAA,UAAU,EAAEV,WAAW,CAACvC,MAAD;AAAxB,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2EA,MAA3E,CAD9B,EAEA,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEX,OAAO,CAAC6D,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK5D,IAAI,CAACM,KAAL,GACG,4BACCL,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,IAAxB,GAA6B;AAAK,IAAA,SAAS,EAAEtB,OAAO,CAACyD,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCxD,IAAI,CAACM,KAAL,CAAWkD,MAA5C,CAD9B,EAEC,CAACvD,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,IAAyBX,MAAM,KAAG,QAAnC,KAA8Cb,OAAO,CAAC0C,IAAR,KAAe,OAA7D,GACG,MAAC,WAAD;AAAa,IAAA,SAAS,EAAErC,WAAW,GAACH,OAAO,CAAC8D,MAAT,GAAgB9D,OAAO,CAAC+D,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EADJ,EAEI,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAE5C,YAAY,CAACJ,GAA5B;AAAgC,IAAA,QAAQ,EAAEQ,kBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKtB,IAAI,CAACwC,aAAL,CAAmBuB,GAAnB,CAAwBrB,OAAD,IACpB,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,OAAO,CAAC5B,GAAvB;AAA4B,IAAA,KAAK,EAAE4B,OAAO,CAAC5B,GAA3C;AAAgD,IAAA,GAAG,EAAE4B,OAAO,CAACzB,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoEyB,OAAO,CAACzB,IAA5E,CADH,CADL,CAFJ,CADH,GAUG,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,oEADV;AAEI,IAAA,KAAK,EAAEC,YAAY,CAACD,IAFxB;AAGI,IAAA,SAAS,EAAEf,WAAW,GAACH,OAAO,CAAC8D,MAAT,GAAgB9D,OAAO,CAAC+D,OAHlD;AAII,IAAA,UAAU,EAAE;AACR,oBAAc,aADN;AAERE,MAAAA,QAAQ,EAAE;AAFF,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,EAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBA,EAwBI,CAAC/D,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,IAAyBX,MAAM,KAAG,QAAnC,KAA8C,CAAC,OAAD,EAAU,aAAV,EAAyB,UAAzB,EAAqC4B,QAArC,CAA8CzC,OAAO,CAAC0C,IAAtD,CAA9C,GACI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAErC,WAAW,GAACH,OAAO,CAAC8D,MAAT,GAAgB9D,OAAO,CAAC+D,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEADJ,EAEI,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAEtD,UAAU,CAACM,GAA1B;AAA+B,IAAA,QAAQ,EAAEF,gBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKqB,WAAW,CAAC8B,GAAZ,CAAiBrB,OAAD,IACb,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,OAAO,CAAC5B,GAAvB;AAA4B,IAAA,KAAK,EAAE4B,OAAO,CAAC5B,GAA3C;AAAgD,IAAA,GAAG,EAAE4B,OAAO,CAACzB,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoEyB,OAAO,CAACzB,IAA5E,CADH,CADL,CAFJ,CADJ,GAUI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,8DADV;AAEI,IAAA,KAAK,EAAET,UAAU,CAACS,IAFtB;AAGI,IAAA,SAAS,EAAEf,WAAW,GAACH,OAAO,CAAC8D,MAAT,GAAgB9D,OAAO,CAAC+D,OAHlD;AAII,IAAA,UAAU,EAAE;AACR,oBAAc,aADN;AAERE,MAAAA,QAAQ,EAAE;AAFF,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCR,EA4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5CA,EA6CA,MAAC,SAAD;AACI,IAAA,SAAS,EAAE9D,WAAW,GAACH,OAAO,CAAC8D,MAAT,GAAgB9D,OAAO,CAAC+D,OADlD;AAEI,IAAA,KAAK,EAAC,0BAFV;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,eAAe,EAAE;AACbG,MAAAA,MAAM,EAAE;AADK,KAJrB;AAOI,IAAA,KAAK,EAAE7D,SAPX;AAQI,IAAA,UAAU,EAAE;AACR,oBAAc,aADN;AAER4D,MAAAA,QAAQ,EAAE,EAAE/D,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,IAAyBX,MAAM,KAAG,QAApC;AAFF,KARhB;AAYI,IAAA,QAAQ,EAAGG,KAAK,IAAIR,YAAY,CAACQ,KAAK,CAACE,MAAN,CAAaC,KAAd,CAZpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CA,EA2DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3DA,EA4DA;AAAK,IAAA,KAAK,EAAE;AAACkD,MAAAA,KAAK,EAAEb,aAAa,GAAC,KAAD,GAAO;AAA5B,KAAZ;AAAoD,IAAA,OAAO,EAAE,MAAI;AAC7DlB,MAAAA,aAAa,CAAC,SAAD,EAAY,MAAC,QAAD;AAAU,QAAA,QAAQ,EAAEZ,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAZ,EAA6C,IAA7C,CAAb;AACAa,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAHD;AAGG,IAAA,SAAS,EAAErC,OAAO,CAACoE,GAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAG4Bd,aAAa,GAAC,kBAAD,GAAoB,qBAH7D,CA5DA,EAgEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhEA,EAiEA;AAAK,IAAA,KAAK,EAAE;AAAEe,MAAAA,cAAc,EAAE;AAAlB,KAAZ;AAA0C,IAAA,SAAS,EAAErE,OAAO,CAACsE,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AAACV,MAAAA,UAAU,EAAE5B,UAAU,KAAG,KAAb,GAAmB,SAAnB,GAA6B;AAA1C,KAAZ;AAAkE,IAAA,OAAO,EAAE,MAAI;AAACC,MAAAA,aAAa,CAAC,KAAD,CAAb;AAAqB,KAArG;AAAuG,IAAA,SAAS,EAAEjC,OAAO,CAACgC,UAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAII;AAAK,IAAA,KAAK,EAAE;AAAC4B,MAAAA,UAAU,EAAE5B,UAAU,KAAG,WAAb,GAAyB,SAAzB,GAAmC;AAAhD,KAAZ;AAAwE,IAAA,OAAO,EAAE,MAAI;AAACC,MAAAA,aAAa,CAAC,WAAD,CAAb;AAA2B,KAAjH;AAAmH,IAAA,SAAS,EAAEjC,OAAO,CAACgC,UAAtI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAJJ,EAOI;AAAK,IAAA,KAAK,EAAE;AAAC4B,MAAAA,UAAU,EAAE5B,UAAU,KAAG,UAAb,GAAwB,SAAxB,GAAkC;AAA/C,KAAZ;AAAuE,IAAA,OAAO,EAAE,MAAI;AAACC,MAAAA,aAAa,CAAC,UAAD,CAAb;AAA0B,KAA/G;AAAiH,IAAA,SAAS,EAAEjC,OAAO,CAACgC,UAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAPJ,CAjEA,EA4EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5EA,EA6EA;AAAK,IAAA,SAAS,EAAEhC,OAAO,CAACuE,YAAxB;AAAsC,IAAA,KAAK,EAAE;AAACC,MAAAA,IAAI,EAAErE,WAAW,GAAC,IAAD,GAAM;AAAxB,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKyB,WAAW,GAACA,WAAW,CAACoC,GAAZ,CAAgB,CAACrB,OAAD,EAAU8B,GAAV,KAAiB;AAC1C,WACI;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAe,MAAA,SAAS,EAAEzE,OAAO,CAACsE,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,CAAC,WAAD,EAAc,QAAd,EAAwB/B,QAAxB,CAAiCI,OAAO,CAAC+B,MAAR,CAAe,CAAf,EAAkB/D,MAAnD;AAA0D;AAA1D,MACG,MAAC,QAAD;AAAU,MAAA,OAAO,EAAEa,QAAQ,CAACe,QAAT,CAAkBI,OAAlB,CAAnB;AAA+C,MAAA,QAAQ,EAAE,MAAM;AAC3D,YAAI,CAACnB,QAAQ,CAACe,QAAT,CAAkBI,OAAlB,CAAL,EAAiC;AAC7BnB,UAAAA,QAAQ,CAACmD,IAAT,CAAchC,OAAd;AACAb,UAAAA,kBAAkB,CAAC8C,MAAnB,CAA0B9C,kBAAkB,CAAC+C,OAAnB,CAA2BlC,OAA3B,CAA1B,EAA+D,CAA/D;AACAjB,UAAAA,cAAc,CAACkD,MAAf,CAAsBlD,cAAc,CAACmD,OAAf,CAAuBlC,OAAvB,CAAtB,EAAuD,CAAvD;AACH,SAJD,MAIO;AACHnB,UAAAA,QAAQ,CAACoD,MAAT,CAAgBpD,QAAQ,CAACqD,OAAT,CAAiBlC,OAAjB,CAAhB,EAA2C,CAA3C;AACAb,UAAAA,kBAAkB,CAAC6C,IAAnB,CAAwBhC,OAAxB;AACAjB,UAAAA,cAAc,CAACiD,IAAf,CAAoBhC,OAApB;AACH;;AACDlB,QAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,CAAD,CAAX;AACH,OAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAaM,IAdX,EAeI,MAAC,SAAD;AAAW,MAAA,WAAW,EAAE2B,WAAxB;AAAqC,MAAA,KAAK,EAAElD,IAAI,CAACM,KAAL,CAAWQ,GAAvD;AAA4D,MAAA,OAAO,EAAE4B,OAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,CADJ;AAmBH,GApBY,CAAD,GAoBT,IArBP,CA7EA,EAoGA;AAAK,IAAA,SAAS,EAAExC,WAAW,GAACH,OAAO,CAAC8E,YAAT,GAAsB9E,OAAO,CAAC+E,YAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ7E,MAAM,CAACmB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,YAAS;AACtB,UAAIjB,SAAS,IAAEI,UAAU,CAACM,GAAtB,IAA2BI,YAAY,CAACJ,GAA5C,EAAiD;AAC7C,cAAMiE,MAAM,GAAG,YAAW;AACtB,cAAIvE,UAAU,CAACM,GAAX,KAAiBkE,SAAjB,IAA4B5E,SAAhC,EAA2C;AACvCmB,YAAAA,QAAQ,GAAGA,QAAQ,CAACwC,GAAT,CAAarB,OAAO,IAAEA,OAAO,CAAC5B,GAA9B,CAAX;AACA,kBAAM1C,QAAQ,CAAC;AACXmD,cAAAA,QAAQ,EAAEA,QADC;AAEXf,cAAAA,UAAU,EAAEA,UAAU,CAACM,GAFZ;AAGXV,cAAAA,SAAS,EAAE,IAAIG,IAAJ,CAASH,SAAT;AAHA,aAAD,CAAd;AAKAf,YAAAA,MAAM,CAACqF,IAAP,CAAY,SAAZ;AACH;AACJ,SAVD;;AAWAvC,QAAAA,aAAa,CAAC,cAAD,EAAiB,MAAC,YAAD;AAAc,UAAA,MAAM,EAAE4C,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAjB,CAAb;AACA3C,QAAAA,cAAc,CAAC,IAAD,CAAd;AACH,OAdD,MAcO;AACHC,QAAAA,YAAY,CAAC,oBAAD,CAAZ;AACH;AACJ,KAlBD;AAkBG,IAAA,IAAI,EAAC,OAlBR;AAkBgB,IAAA,KAAK,EAAC,SAlBtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDADJ,GAuBI,4BACA,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,YAAS;AACtB,YAAM0C,MAAM,GAAG,YAAW;AAEtB,YAAIE,WAAW,GAAG;AAACnE,UAAAA,GAAG,EAAEd,IAAI,CAACM,KAAL,CAAWQ;AAAjB,SAAlB;AACA,YAAGN,UAAU,CAACM,GAAX,KAAiBd,IAAI,CAACM,KAAL,CAAWE,UAAX,CAAsBM,GAAvC,IAA4CJ,MAAM,KAAG,QAAxD,EAAiEuE,WAAW,CAACzE,UAAZ,GAAyBA,UAAU,CAACM,GAApC;AACjE,YAAGV,SAAS,IAAEM,MAAM,KAAG,QAAvB,EAAgCuE,WAAW,CAAC7E,SAAZ,GAAwB,IAAIG,IAAJ,CAASH,SAAT,CAAxB;AAChC6E,QAAAA,WAAW,CAAC1D,QAAZ,GAAuBA,QAAQ,CAACwC,GAAT,CAAarB,OAAO,IAAEA,OAAO,CAAC5B,GAA9B,CAAvB;AACA,YAAGW,cAAc,CAAC8B,MAAf,GAAsB,CAAzB,EAA2B0B,WAAW,CAACxD,cAAZ,GAA6BA,cAAc,CAACsC,GAAf,CAAmBrB,OAAO,IAAEA,OAAO,CAAC5B,GAApC,CAA7B;AAC3B,cAAM5C,QAAQ,CAAC+G,WAAD,CAAd;AACA/B,QAAAA,WAAW;AACd,OATD;;AAUAf,MAAAA,aAAa,CAAC,cAAD,EAAiB,MAAC,YAAD;AAAc,QAAA,MAAM,EAAE4C,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjB,CAAb;AACA3C,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAbD;AAaG,IAAA,IAAI,EAAC,OAbR;AAagB,IAAA,KAAK,EAAC,SAbtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADA,EAiBC,CAAC,aAAD,EAAgB,UAAhB,EAA4B,OAA5B,EAAqCE,QAArC,CAA8CzC,OAAO,CAAC0C,IAAtD,KAA6D7B,MAAM,KAAG,QAAtE,GACG,4BACA,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,YAAS;AACtB,YAAMqE,MAAM,GAAG,YAAW;AACtB,cAAM5G,WAAW,CAAC,CAAC6B,IAAI,CAACM,KAAL,CAAWQ,GAAZ,CAAD,CAAjB;AACAzB,QAAAA,MAAM,CAACqF,IAAP,CAAY,SAAZ;AACH,OAHD;;AAIAvC,MAAAA,aAAa,CAAC,cAAD,EAAiB,MAAC,YAAD;AAAc,QAAA,MAAM,EAAE4C,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjB,CAAb;AACA3C,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAPD;AAOG,IAAA,IAAI,EAAC,OAPR;AAOgB,IAAA,KAAK,EAAC,SAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADA,CADH,GAcG,IA/BJ,CAzBZ,CApGA,CADH,GAmKI,mBApKT,EAqKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArKJ,CAFA,CADH,GA4KG,MAAC,WAAD;AAAa,IAAA,SAAS,EAAErC,OAAO,CAAC6D,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGA7KR,CAXJ,CADJ;AAgMH,CAzRa,CAAd;;AA2RAlE,KAAK,CAACwF,eAAN,GAAwB,gBAAeC,GAAf,EAAoB;AACxC,MAAG,CAAC,CAAC,aAAD,EAAgB,UAAhB,EAA4B,OAA5B,EAAqC,YAArC,EAAmD7C,QAAnD,CAA4D6C,GAAG,CAACC,KAAJ,CAAUC,QAAV,GAAqBvF,IAArB,CAA0BD,OAA1B,CAAkC0C,IAA9F,CAAJ,EACI,IAAG4C,GAAG,CAACG,GAAP,EAAY;AACRH,IAAAA,GAAG,CAACG,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AACnBC,MAAAA,QAAQ,EAAE;AADS,KAAvB;AAGAL,IAAAA,GAAG,CAACG,GAAJ,CAAQG,GAAR;AACH,GALD,MAMQpG,MAAM,CAACqF,IAAP,CAAY,GAAZ;AACZ,SAAO;AACH1E,IAAAA,IAAI,oBACGmF,GAAG,CAAC/D,KAAJ,CAAUC,EAAV,KAAe,KAAf,GAAqB,MAAMpD,QAAQ,CAAC;AAAC6C,MAAAA,GAAG,EAAEqE,GAAG,CAAC/D,KAAJ,CAAUC;AAAhB,KAAD,CAAnC,GAAyD;AAACf,MAAAA,KAAK,EAAE;AAACiB,QAAAA,QAAQ,EAAE,EAAX;AAAef,QAAAA,UAAU,EAAE,EAA3B;AAA+BE,QAAAA,MAAM,EAAE,EAAvC;AAA2CN,QAAAA,SAAS,EAAE,IAAtD;AAA4DsF,QAAAA,OAAO,EAAE,IAArE;AAA2ElC,QAAAA,MAAM,EAAE;AAAnF;AAAR,KAD5D,GAEG,MAAMzF,gBAAgB,CAAC;AAAC4H,MAAAA,MAAM,EAAE,EAAT;AAAa9C,MAAAA,IAAI,EAAE,MAAnB;AAA2BJ,MAAAA,MAAM,EAAE;AAAnC,KAAD,CAFzB;AADD,GAAP;AAMH,CAfD;;AAiBA,SAASmD,eAAT,CAA0BC,KAA1B,EAAiC;AAC7B,SAAO;AACH1F,IAAAA,GAAG,EAAE0F,KAAK,CAAC1F,GADR;AAEHL,IAAAA,IAAI,EAAE+F,KAAK,CAAC/F;AAFT,GAAP;AAIH;;AAED,SAASgG,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACH9G,IAAAA,kBAAkB,EAAED,kBAAkB,CAACC,kBAAD,EAAqB8G,QAArB,CADnC;AAEH7G,IAAAA,eAAe,EAAEF,kBAAkB,CAACE,eAAD,EAAkB6G,QAAlB;AAFhC,GAAP;AAIH;;AAED,eAAejI,OAAO,CAAC8H,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CpG,KAA7C,CAAf","sourcesContent":["import Head from 'next/head';\r\nimport React, { useState, useEffect } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport { getOrganizations } from '../../src/gql/organization'\r\nimport { getOrdersForRouting } from '../../src/gql/order'\r\nimport { getRoute, setRoute, deleteRoute, addRoute } from '../../src/gql/route'\r\nimport { getEcspeditors } from '../../src/gql/employment'\r\nimport routeStyle from '../../src/styleMUI/route/route'\r\nimport { useRouter } from 'next/router'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CardOrder from '../../components/order/CardOrder';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Router from 'next/router'\r\nimport { pdDatePicker } from '../../src/lib'\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\nimport GeoRoute from '../../components/dialog/GeoRoute'\r\nimport { urlMain } from '../../redux/constants/other'\r\n\r\n\r\nconst Route = React.memo((props) => {\r\n    const { profile } = props.user;\r\n    const classes = routeStyle();\r\n    const { data } = props;\r\n    const router = useRouter()\r\n    const { isMobileApp } = props.app;\r\n    let [dateStart, setDateStart] = useState(data.route?pdDatePicker(new Date(data.route.dateStart)):null);\r\n    let [employment, setEmployment] = useState(data.route?data.route.employment:{});\r\n    let [status, setStatus] = useState(data.route.status);\r\n    let handleEmployment =  (event) => {\r\n        setEmployment({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [organization, setOrganization] = useState(router.query.id==='new'||!data.route?{}:data.route.employment.organization);\r\n    let handleOrganization =  (event) => {\r\n        setOrganization({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [invoices, setInvoices] = useState(data.route?data.route.invoices:[]);\r\n    let [cancelInvoices, setCancelInvoices] = useState([]);\r\n    let [allInvoices, setAllInvoices] = useState([]);\r\n    let [unselectedInvoices, setUnselectedInvoices] = useState([]);\r\n    let [selectType, setSelectType] = useState('Все');\r\n    let [employments, setEmployments] = useState([]);\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(data.route) {\r\n                if (['организация', 'менеджер'].includes(profile.role) && router.query.id === 'new') {\r\n                    let organization = data.organizations.filter(element => element._id === profile.organization)\r\n                    setOrganization(organization[0])\r\n                }\r\n            }\r\n        })()\r\n    },[profile])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(data.route&&['организация', 'менеджер', 'admin'].includes(profile.role)) {\r\n                setUnselectedInvoices((await getOrdersForRouting()).invoicesForRouting)\r\n            }\r\n        })()\r\n    },[])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(data.route) {\r\n                if (router.query.id === 'new')\r\n                    setEmployment({})\r\n                setEmployments((await getEcspeditors({_id: organization._id})).ecspeditors)\r\n            }\r\n        })()\r\n    },[organization])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(data.route) {\r\n                let allInvoices\r\n                if (selectType == 'Все')\r\n                    allInvoices = [...invoices, ...unselectedInvoices]\r\n                else if (selectType == 'Свободные')\r\n                    allInvoices = [...unselectedInvoices]\r\n                else if (selectType == 'Выбраные')\r\n                    allInvoices = [...invoices]\r\n                allInvoices.sort((a, b) => {\r\n                    a.createdAt = new Date(a.createdAt)\r\n                    b.createdAt = new Date(b.createdAt)\r\n                    if (a.createdAt > b.createdAt) return -1;\r\n                    if (a.createdAt < b.createdAt) return 1;\r\n                    return 0;\r\n                })\r\n                setAllInvoices([...allInvoices])\r\n            }\r\n        })()\r\n    },[selectType, unselectedInvoices, invoices])\r\n    const statusColor = {\r\n        'создан': 'orange',\r\n        'выполняется': 'blue',\r\n        'выполнен': 'green',\r\n    }\r\n    let getInvoices = async ()=>{\r\n        if(data.route){\r\n            setUnselectedInvoices((await getOrdersForRouting()).invoicesForRouting)\r\n            setCancelInvoices([])\r\n            if(data.route._id) {\r\n                let route = (await getRoute({_id: data.route._id})).route\r\n                setInvoices(route.invoices)\r\n                console.log(route.status)\r\n                setStatus(route.status)\r\n            }\r\n        }\r\n    }\r\n    const breakGeoRoute = (invoices.filter((element)=>!element.address[1])).length>0\r\n    return (\r\n        <App pageName={data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'}</title>\r\n                <meta name='description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:title' content={data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'} />\r\n                <meta property='og:description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:type' content='website' />\r\n                <meta property='og:image' content={`${urlMain}/static/512x512.png`} />\r\n                <meta property=\"og:url\" content={`${urlMain}/route/${router.query.id}`} />\r\n                <link rel='canonical' href={`${urlMain}/route/${router.query.id}`}/>\r\n            </Head>\r\n            <Card className={isMobileApp?classes.pageM:classes.pageD}>\r\n                {data.route?\r\n                    <>\r\n                    {router.query.id==='new'?null:<div className={classes.status} style={{background: statusColor[status]}}>{status}</div>}\r\n                    <CardContent className={classes.column}>\r\n                        {data.route?\r\n                            <>\r\n                            {router.query.id==='new'?null:<div className={classes.number}>{data.route.number}</div>}\r\n                            {(router.query.id==='new'||status==='создан')&&profile.role==='admin'?\r\n                                <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                    <InputLabel>Организация</InputLabel>\r\n                                    <Select value={organization._id}onChange={handleOrganization}>\r\n                                        {data.organizations.map((element)=>\r\n                                            <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                        )}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                :\r\n                                <TextField\r\n                                    label='Организация'\r\n                                    value={organization.name}\r\n                                    className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                    inputProps={{\r\n                                        'aria-label': 'description',\r\n                                        readOnly: true,\r\n                                    }}\r\n                                />\r\n                            }\r\n                            <br/>\r\n                            {\r\n                                (router.query.id==='new'||status==='создан')&&['admin', 'организация', 'менеджер'].includes(profile.role)?\r\n                                    <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                        <InputLabel>Экспедитор</InputLabel>\r\n                                        <Select value={employment._id} onChange={handleEmployment}>\r\n                                            {employments.map((element)=>\r\n                                                <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                            )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    :\r\n                                    <TextField\r\n                                        label='Экспедитор'\r\n                                        value={employment.name}\r\n                                        className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                        inputProps={{\r\n                                            'aria-label': 'description',\r\n                                            readOnly: true,\r\n                                        }}\r\n                                    />\r\n                            }\r\n                            <br/>\r\n                            <TextField\r\n                                className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                label='Дата'\r\n                                type='date'\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                value={dateStart}\r\n                                inputProps={{\r\n                                    'aria-label': 'description',\r\n                                    readOnly: !(router.query.id==='new'||status==='создан'),\r\n                                }}\r\n                                onChange={ event => setDateStart(event.target.value) }\r\n                            />\r\n                            <br/>\r\n                            <div style={{color: breakGeoRoute?'red':'#ffb300'}} onClick={()=>{\r\n                                setMiniDialog('Маршрут', <GeoRoute invoices={invoices}/>, true)\r\n                                showMiniDialog(true)\r\n                            }} className={classes.geo}>{breakGeoRoute?'Маршрут неполный':'Просмотреть маршрут'}</div>\r\n                            <br/>\r\n                            <div style={{ justifyContent: 'center' }} className={classes.row}>\r\n                                <div style={{background: selectType==='Все'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Все')}} className={classes.selectType}>\r\n                                    Все\r\n                                </div>\r\n                                <div style={{background: selectType==='Свободные'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Свободные')}} className={classes.selectType}>\r\n                                    Свободные\r\n                                </div>\r\n                                <div style={{background: selectType==='Выбраные'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Выбраные')}} className={classes.selectType}>\r\n                                    Выбраные\r\n                                </div>\r\n                            </div>\r\n                            <br/>\r\n                            <div className={classes.listInvoices} style={{zoom: isMobileApp?0.83:1}}>\r\n                                {allInvoices?allInvoices.map((element, idx)=> {\r\n                                    return (\r\n                                        <div key={idx} className={classes.row}>\r\n                                            {['обработка', 'принят'].includes(element.orders[0].status)/*&&!element.confirmationForwarder*/?\r\n                                                <Checkbox checked={invoices.includes(element)} onChange={() => {\r\n                                                    if (!invoices.includes(element)) {\r\n                                                        invoices.push(element)\r\n                                                        unselectedInvoices.splice(unselectedInvoices.indexOf(element), 1)\r\n                                                        cancelInvoices.splice(cancelInvoices.indexOf(element), 1)\r\n                                                    } else {\r\n                                                        invoices.splice(invoices.indexOf(element), 1)\r\n                                                        unselectedInvoices.push(element)\r\n                                                        cancelInvoices.push(element)\r\n                                                    }\r\n                                                    setInvoices([...invoices])\r\n                                                }}\r\n                                                />:null}\r\n                                            <CardOrder getInvoices={getInvoices} route={data.route._id} element={element}/>\r\n                                        </div>\r\n                                    )\r\n                                }):null}\r\n                            </div>\r\n                            <div className={isMobileApp?classes.bottomRouteM:classes.bottomRouteD}>\r\n                                {\r\n                                    router.query.id==='new'?\r\n                                        <Button onClick={async()=>{\r\n                                            if (dateStart&&employment._id&&organization._id) {\r\n                                                const action = async() => {\r\n                                                    if (employment._id!==undefined&&dateStart) {\r\n                                                        invoices = invoices.map(element=>element._id)\r\n                                                        await addRoute({\r\n                                                            invoices: invoices,\r\n                                                            employment: employment._id,\r\n                                                            dateStart: new Date(dateStart)\r\n                                                        })\r\n                                                        Router.push('/routes')\r\n                                                    }\r\n                                                }\r\n                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                showMiniDialog(true)\r\n                                            } else {\r\n                                                showSnackBar('Заполните все поля')\r\n                                            }\r\n                                        }} size='small' color='primary'>\r\n                                            Добавить\r\n                                        </Button>\r\n                                        :\r\n                                        <>\r\n                                        <Button onClick={async()=>{\r\n                                            const action = async() => {\r\n\r\n                                                let editElement = {_id: data.route._id}\r\n                                                if(employment._id!==data.route.employment._id&&status==='создан')editElement.employment = employment._id;\r\n                                                if(dateStart&&status==='создан')editElement.dateStart = new Date(dateStart);\r\n                                                editElement.invoices = invoices.map(element=>element._id);\r\n                                                if(cancelInvoices.length>0)editElement.cancelInvoices = cancelInvoices.map(element=>element._id);\r\n                                                await setRoute(editElement)\r\n                                                getInvoices()\r\n                                            }\r\n                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                            showMiniDialog(true)\r\n                                        }} size='small' color='primary'>\r\n                                            Сохранить\r\n                                        </Button>\r\n                                        {['организация', 'менеджер', 'admin'].includes(profile.role)&&status==='создан'?\r\n                                            <>\r\n                                            <Button onClick={async()=>{\r\n                                                const action = async() => {\r\n                                                    await deleteRoute([data.route._id])\r\n                                                    Router.push('/routes')\r\n                                                }\r\n                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                showMiniDialog(true)\r\n                                            }} size='small' color='primary'>\r\n                                                Удалить\r\n                                            </Button>\r\n                                            </>\r\n                                            :\r\n                                            null\r\n                                        }\r\n                                        </>\r\n                                }\r\n                            </div>\r\n                            </>\r\n                            :'Ничего не найдено'}\r\n                        <br/>\r\n                    </CardContent>\r\n                    </>\r\n                    :\r\n                    <CardContent className={classes.column}>\r\n                        Ничего не найдено\r\n                    </CardContent>\r\n                }\r\n            </Card>\r\n        </App>\r\n    )\r\n})\r\n\r\nRoute.getInitialProps = async function(ctx) {\r\n    if(!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role))\r\n        if(ctx.res) {\r\n            ctx.res.writeHead(302, {\r\n                Location: '/'\r\n            })\r\n            ctx.res.end()\r\n        } else\r\n                Router.push('/')\r\n    return {\r\n        data: {\r\n            ...ctx.query.id!=='new'?await getRoute({_id: ctx.query.id}):{route: {invoices: [], employment: {}, status: '', dateStart: null, dateEnd: null, number: ''}},\r\n            ...await getOrganizations({search: '', sort: 'name', filter: ''}),\r\n        }\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        app: state.app,\r\n        user: state.user,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Route);"]},"metadata":{},"sourceType":"module"}