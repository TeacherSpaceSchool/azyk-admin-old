{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getRoutes = async ({\n  search,\n  sort,\n  filter,\n  date\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        search: search,\n        sort: sort,\n        filter: filter,\n        date: date\n      },\n      query: gql`\n                    query ($search: String!, $sort: String!, $filter: String!, $date: String!) {\n                        routes(search: $search, sort: $sort, filter: $filter, date: $date) {\n                            _id\n                            createdAt\n                            invoices\n                                {\n                                    _id\n                                    agent \n                                        {_id name}\n                                    createdAt\n                                    orders \n                                        { \n                                            _id\n                                            createdAt\n                                            item\n                                                {\n                                                    image\n                                                    _id\n                                                    name    \n                                                    stock \n                                                    price\n                                                    organization\n                                                        {_id name}\n                                                }\n                                            count\n                                            allPrice\n                                            status\n                                         }\n                                    client \n                                        { \n                                            _id\n                                            name\n                                            email\n                                            phone \n                                            user \n                                                {_id }\n                                        }\n                                    allPrice\n                                    info\n                                    address\n                                    paymentMethod\n                                    number\n                                    confirmationForwarder\n                                    confirmationClient\n                                    cancelClient\n                                    cancelForwarder\n                                    taken\n                                    dateDelivery\n                                    usedBonus\n                                }\n                            employment\n                                { \n                                    _id\n                                    createdAt\n                                    name\n                                    email\n                                    phone\n                                    user \n                                        {_id role status }\n                                    organization \n                                        {_id name}\n                                }\n                            status\n                            dateStart\n                            dateEnd\n                            number\n                        }\n                        sortRoute {\n                            name\n                            field\n                        }\n                        filterRoute {\n                           name\n                           value\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getRoute = async ({\n  _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID!) {\n                        route(_id: $_id) {\n                            _id\n                            createdAt\n                            invoices\n                                {\n                                    _id\n                                    agent \n                                        {_id name}\n                                    createdAt\n                                    orders \n                                        { \n                                            _id\n                                            createdAt\n                                            item\n                                                {\n                                                    image\n                                                    _id\n                                                    name    \n                                                    stock \n                                                    price\n                                                    organization\n                                                        {_id name}\n                                                }\n                                            count\n                                            allPrice\n                                            status\n                                         }\n                                    client \n                                        { \n                                            _id\n                                            name\n                                            email\n                                            phone \n                                            user \n                                                {_id }\n                                        }\n                                    allPrice\n                                    info\n                                    address\n                                    paymentMethod\n                                    number\n                                    confirmationForwarder\n                                    confirmationClient\n                                    cancelClient\n                                    cancelForwarder\n                                    taken\n                                    dateDelivery\n                                    usedBonus\n                                }\n                            employment\n                                { \n                                    _id\n                                    createdAt\n                                    name\n                                    email\n                                    phone\n                                    user \n                                        {_id role status }\n                                    organization \n                                        {_id name}\n                                }\n                            status\n                            dateStart\n                            dateEnd\n                            number\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteRoute = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteRoute(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getRoutes(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addRoute = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($invoices: [ID]!, $employment: ID!, $dateStart: Date!) {\n                        addRoute(invoices: $invoices, employment: $employment, dateStart: $dateStart) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setRoute = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: ID!, $invoices: [ID], $employment: ID, $cancelInvoices: [ID], $dateStart: Date) {\n                        setRoute(_id: $_id, invoices: $invoices, employment: $employment, cancelInvoices: $cancelInvoices, dateStart: $dateStart) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\route.js"],"names":["gql","SingletonApolloClient","SingletonStore","getRoutes","search","sort","filter","date","client","getClient","res","query","variables","data","err","console","error","getRoute","_id","deleteRoute","ids","mutate","mutation","getStore","getState","app","addRoute","element","setRoute"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getRoutes = async({search, sort, filter, date})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter, date: date},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!, $date: String!) {\r\n                        routes(search: $search, sort: $sort, filter: $filter, date: $date) {\r\n                            _id\r\n                            createdAt\r\n                            invoices\r\n                                {\r\n                                    _id\r\n                                    agent \r\n                                        {_id name}\r\n                                    createdAt\r\n                                    orders \r\n                                        { \r\n                                            _id\r\n                                            createdAt\r\n                                            item\r\n                                                {\r\n                                                    image\r\n                                                    _id\r\n                                                    name    \r\n                                                    stock \r\n                                                    price\r\n                                                    organization\r\n                                                        {_id name}\r\n                                                }\r\n                                            count\r\n                                            allPrice\r\n                                            status\r\n                                         }\r\n                                    client \r\n                                        { \r\n                                            _id\r\n                                            name\r\n                                            email\r\n                                            phone \r\n                                            user \r\n                                                {_id }\r\n                                        }\r\n                                    allPrice\r\n                                    info\r\n                                    address\r\n                                    paymentMethod\r\n                                    number\r\n                                    confirmationForwarder\r\n                                    confirmationClient\r\n                                    cancelClient\r\n                                    cancelForwarder\r\n                                    taken\r\n                                    dateDelivery\r\n                                    usedBonus\r\n                                }\r\n                            employment\r\n                                { \r\n                                    _id\r\n                                    createdAt\r\n                                    name\r\n                                    email\r\n                                    phone\r\n                                    user \r\n                                        {_id role status }\r\n                                    organization \r\n                                        {_id name}\r\n                                }\r\n                            status\r\n                            dateStart\r\n                            dateEnd\r\n                            number\r\n                        }\r\n                        sortRoute {\r\n                            name\r\n                            field\r\n                        }\r\n                        filterRoute {\r\n                           name\r\n                           value\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getRoute = async({_id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        route(_id: $_id) {\r\n                            _id\r\n                            createdAt\r\n                            invoices\r\n                                {\r\n                                    _id\r\n                                    agent \r\n                                        {_id name}\r\n                                    createdAt\r\n                                    orders \r\n                                        { \r\n                                            _id\r\n                                            createdAt\r\n                                            item\r\n                                                {\r\n                                                    image\r\n                                                    _id\r\n                                                    name    \r\n                                                    stock \r\n                                                    price\r\n                                                    organization\r\n                                                        {_id name}\r\n                                                }\r\n                                            count\r\n                                            allPrice\r\n                                            status\r\n                                         }\r\n                                    client \r\n                                        { \r\n                                            _id\r\n                                            name\r\n                                            email\r\n                                            phone \r\n                                            user \r\n                                                {_id }\r\n                                        }\r\n                                    allPrice\r\n                                    info\r\n                                    address\r\n                                    paymentMethod\r\n                                    number\r\n                                    confirmationForwarder\r\n                                    confirmationClient\r\n                                    cancelClient\r\n                                    cancelForwarder\r\n                                    taken\r\n                                    dateDelivery\r\n                                    usedBonus\r\n                                }\r\n                            employment\r\n                                { \r\n                                    _id\r\n                                    createdAt\r\n                                    name\r\n                                    email\r\n                                    phone\r\n                                    user \r\n                                        {_id role status }\r\n                                    organization \r\n                                        {_id name}\r\n                                }\r\n                            status\r\n                            dateStart\r\n                            dateEnd\r\n                            number\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteRoute = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteRoute(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getRoutes(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addRoute = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($invoices: [ID]!, $employment: ID!, $dateStart: Date!) {\r\n                        addRoute(invoices: $invoices, employment: $employment, dateStart: $dateStart) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setRoute = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $invoices: [ID], $employment: ID, $cancelInvoices: [ID], $dateStart: Date) {\r\n                        setRoute(_id: $_id, invoices: $invoices, employment: $employment, cancelInvoices: $cancelInvoices, dateStart: $dateStart) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}