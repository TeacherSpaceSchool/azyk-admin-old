{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport cardOrderStyle from '../../src/styleMUI/orders/cardOrder';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport dynamic from 'next/dynamic';\nimport moment from 'moment';\nvar Order = dynamic(function () {\n  return import('../dialog/Order');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../dialog/Order')];\n    },\n    modules: ['../dialog/Order']\n  }\n});\nvar CardOrder = React.memo(function (props) {\n  var classes = cardOrderStyle();\n  var element = props.element,\n      setList = props.setList,\n      route = props.route,\n      getInvoices = props.getInvoices;\n  var _props$mini_dialogAct = props.mini_dialogActions,\n      setMiniDialog = _props$mini_dialogAct.setMiniDialog,\n      showMiniDialog = _props$mini_dialogAct.showMiniDialog;\n  var statusColor = {\n    'обработка': 'orange',\n    'принят': 'blue',\n    'выполнен': 'green',\n    'отмена': 'red'\n  };\n  return __jsx(Card, {\n    className: classes.card,\n    onClick: function onClick() {\n      setMiniDialog('Заказ', __jsx(Order, {\n        getInvoices: getInvoices,\n        route: route,\n        element: element,\n        setList: setList\n      }));\n      showMiniDialog(true);\n    }\n  }, __jsx(CardActionArea, null, __jsx(CardContent, {\n    className: classes.column\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.number\n  }, element.number), \"\\xA0\", __jsx(\"div\", {\n    className: classes.date\n  }, moment(element.updatedAt).format('DD.MM.YY HH:mm')), \"\\xA0\\xA0\", __jsx(\"div\", {\n    className: classes.status,\n    style: {\n      background: statusColor[element.orders[0].status]\n    }\n  }, element.orders[0].status === 'принят' && (element.confirmationForwarder || element.confirmationClient) ? route ? element.confirmationForwarder ? 'выполнен' : element.orders[0].status : element.confirmationClient ? 'выполнен' : element.confirmationForwarder ? 'доставлен' : element.orders[0].status : element.orders[0].status)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0410\\u0434\\u0440\\u0435\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.address)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0430\\u0442\\u0435\\u043B\\u044C:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.client.name)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041F\\u043E\\u0441\\u0442\\u0430\\u0432\\u0449\\u0438\\u043A:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.orders[0].item.organization.name)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0421\\u0443\\u043C\\u043C\\u0430:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.allPrice, \"\\xA0\\u0441\\u043E\\u043C\")))));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrder);","map":null,"metadata":{},"sourceType":"module"}