{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\components\\\\dialog\\\\BuyBasket.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addOrders } from '../../src/gql/order';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport * as userActions from '../../redux/actions/user';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Router from 'next/router';\nimport Confirmation from './Confirmation';\nconst BuyBasket = React.memo(props => {\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    client,\n    allPrice\n  } = props;\n  const {\n    showMiniDialog,\n    setMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  const {\n    classes\n  } = props;\n  const width = isMobileApp ? window.innerWidth - 144 : 500;\n  let {\n    0: address,\n    1: setAddress\n  } = useState([]);\n  let {\n    0: coment,\n    1: setComent\n  } = useState('');\n\n  let handleComent = event => {\n    setComent(event.target.value);\n  };\n\n  let {\n    0: paymentMethod,\n    1: setPaymentMethod\n  } = useState('');\n  let paymentMethods = ['Наличные'];\n\n  let handlePaymentMethod = event => {\n    setPaymentMethod(event.target.value);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.main,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    component: \"fieldset\",\n    style: {\n      width: width\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(FormLabel, {\n    component: \"legend\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"\\u0410\\u0434\\u0440\\u0435\\u0441\\u0430 \\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043A\\u0438\"), __jsx(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, client.address.map((element, idx) => __jsx(FormControlLabel, {\n    key: idx,\n    onChange: e => {\n      if (e.target.checked) address.push(element);else {\n        address.splice(address.indexOf(element), 1);\n      }\n      setAddress([...address]);\n    },\n    control: __jsx(Checkbox, {\n      value: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }),\n    label: element[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })))), __jsx(\"div\", {\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    href: `/client/${client.user._id}`,\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0430\\u0434\\u0440\\u0435\\u0441\")), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(Input, {\n    style: {\n      width: width\n    },\n    placeholder: \"\\u041A\\u043E\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439\",\n    value: coment,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: handleComent,\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), __jsx(FormControl, {\n    style: {\n      width: width\n    },\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"\\u0421\\u043F\\u043E\\u0441\\u043E\\u0431 \\u043E\\u043F\\u043B\\u0430\\u0442\\u044B\"), __jsx(Select, {\n    value: paymentMethod,\n    onChange: handlePaymentMethod,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, paymentMethods.map(element => __jsx(MenuItem, {\n    key: element,\n    value: element,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, element)))), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.itogo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"\\u0418\\u0442\\u043E\\u0433\\u043E:\"), ` ${allPrice} сом`), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: async () => {\n      if (paymentMethod.length > 0 && address.length > 0) {\n        const action = async () => {\n          await addOrders({\n            info: coment,\n            paymentMethod: paymentMethod,\n            address: address\n          });\n          Router.push('/orders');\n          showMiniDialog(false);\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }));\n      } else showSnackBar('Заполните все поля');\n    },\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"\\u041A\\u0443\\u043F\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      showMiniDialog(false);\n    },\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\")));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nBuyBasket.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(BuyBasket));","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\dialog\\BuyBasket.js"],"names":["React","useState","PropTypes","withStyles","connect","bindActionCreators","addOrders","mini_dialogActions","snackbarActions","userActions","FormLabel","FormControl","FormGroup","FormControlLabel","Button","Input","dialogContentStyle","Checkbox","InputLabel","MenuItem","Select","Router","Confirmation","BuyBasket","memo","props","isMobileApp","app","client","allPrice","showMiniDialog","setMiniDialog","showSnackBar","classes","width","window","innerWidth","address","setAddress","coment","setComent","handleComent","event","target","value","paymentMethod","setPaymentMethod","paymentMethods","handlePaymentMethod","main","map","element","idx","e","checked","push","splice","indexOf","row","user","_id","inputM","inputD","itogo","length","action","info","button","mapStateToProps","state","mini_dialog","mapDispatchToProps","dispatch","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { addOrders } from '../../src/gql/order'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport dialogContentStyle from '../../src/styleMUI/dialogContent'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Router from 'next/router'\r\nimport Confirmation from './Confirmation'\r\n\r\nconst BuyBasket =  React.memo(\r\n    (props) =>{\r\n        const { isMobileApp } = props.app;\r\n        const { client, allPrice } = props;\r\n        const { showMiniDialog, setMiniDialog } = props.mini_dialogActions;\r\n        const { showSnackBar } = props.snackbarActions;\r\n        const { classes } = props;\r\n        const width = isMobileApp? (window.innerWidth-144) : 500\r\n        let [address, setAddress] = useState([]);\r\n        let [coment, setComent] = useState('');\r\n        let handleComent =  (event) => {\r\n            setComent(event.target.value)\r\n        };\r\n        let [paymentMethod, setPaymentMethod] = useState('');\r\n        let paymentMethods = [\r\n            'Наличные'\r\n        ]\r\n        let handlePaymentMethod =  (event) => {\r\n            setPaymentMethod(event.target.value)\r\n        };\r\n        return (\r\n            <div className={classes.main}>\r\n                <FormControl component='fieldset' style={{width: width}}>\r\n                    <FormLabel component='legend'>Адреса доставки</FormLabel>\r\n                    <FormGroup>\r\n                        {\r\n                            client.address.map((element, idx) => (\r\n                                <FormControlLabel\r\n                                    key={idx}\r\n                                    onChange={(e)=>{\r\n                                        if(e.target.checked)\r\n                                            address.push(element)\r\n                                        else {\r\n                                            address.splice(address.indexOf(element), 1)\r\n                                        }\r\n                                        setAddress([...address])\r\n                                    }}\r\n                                    control={<Checkbox value={idx} />}\r\n                                    label={element[0]}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </FormGroup>\r\n                </FormControl>\r\n                <div className={classes.row}>\r\n                    <a href={`/client/${client.user._id}`} target='_blank'>\r\n                        Добавить адрес\r\n                    </a>\r\n                </div>\r\n                <br/>\r\n                <Input\r\n                    style={{width: width}}\r\n                    placeholder='Коментарий'\r\n                    value={coment}\r\n                    className={isMobileApp?classes.inputM:classes.inputD}\r\n                    onChange={handleComent}\r\n                    inputProps={{\r\n                        'aria-label': 'description',\r\n                    }}\r\n                />\r\n                <br/>\r\n                <FormControl style={{width: width}} className={isMobileApp?classes.inputM:classes.inputD}>\r\n                    <InputLabel>Способ оплаты</InputLabel>\r\n                    <Select value={paymentMethod} onChange={handlePaymentMethod}>\r\n                        {paymentMethods.map((element)=>\r\n                            <MenuItem key={element} value={element} >{element}</MenuItem>\r\n                        )}\r\n                    </Select>\r\n                </FormControl>\r\n                <br/>\r\n                <div style={{width: width}} className={classes.itogo}><b>Итого:</b>{` ${allPrice} сом`}</div>\r\n                <br/>\r\n                <div>\r\n                    <Button variant='contained' color='primary' onClick={async()=>{\r\n                        if(paymentMethod.length>0&&address.length>0){\r\n                            const action = async() => {\r\n                                await addOrders({info: coment, paymentMethod: paymentMethod, address: address})\r\n                                Router.push('/orders')\r\n                                showMiniDialog(false);\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                        } else\r\n                            showSnackBar('Заполните все поля')\r\n                    }} className={classes.button}>\r\n                        Купить\r\n                    </Button>\r\n                    <Button variant='contained' color='secondary' onClick={()=>{showMiniDialog(false);}} className={classes.button}>\r\n                        Закрыть\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        mini_dialog: state.mini_dialog,\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nBuyBasket.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(BuyBasket));"]},"metadata":{},"sourceType":"module"}