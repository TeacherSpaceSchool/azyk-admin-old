{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\pages\\\\employment\\\\[id].js\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getEmployment, setEmployments, onoffEmployment, addEmployment, deleteEmployment } from '../../src/gql/employment';\nimport organizationStyle from '../../src/styleMUI/employment/employment';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport dynamic from 'next/dynamic';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { useRouter } from 'next/router';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { getOrganizations } from '../../src/gql/organization';\nimport Router from 'next/router';\nimport * as userActions from '../../redux/actions/user';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nconst Confirmation = dynamic(() => import('../../components/dialog/Confirmation'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../components/dialog/Confirmation')],\n    modules: ['../../components/dialog/Confirmation']\n  }\n});\nconst Client = React.memo(props => {\n  const classes = organizationStyle();\n  const {\n    data\n  } = props;\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  let {\n    0: status,\n    1: setStatus\n  } = useState(data.employment !== null ? data.employment.user.status : '');\n  let {\n    0: name,\n    1: setName\n  } = useState(data.employment !== null ? data.employment.name : '');\n  let {\n    0: email,\n    1: setEmail\n  } = useState(data.employment !== null ? data.employment.email : '');\n  let {\n    0: phone,\n    1: setPhone\n  } = useState(data.employment !== null ? data.employment.user.phone : '');\n  let {\n    0: organization,\n    1: setOrganization\n  } = useState(data.employment !== null ? data.employment.organization : {});\n\n  let handleOrganization = event => {\n    setOrganization({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: role,\n    1: setRole\n  } = useState(data.employment !== null ? data.employment.user.role : '');\n\n  let handleRole = event => {\n    setRole(event.target.value);\n  };\n\n  let {\n    0: password,\n    1: setPassword\n  } = useState('');\n\n  let handlePassword = event => {\n    setPassword(event.target.value);\n  };\n\n  let {\n    0: hide,\n    1: setHide\n  } = useState('password');\n\n  let handleHide = () => {\n    setHide(!hide);\n  };\n\n  const {\n    profile\n  } = props.user;\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const router = useRouter();\n  const {\n    logout\n  } = props.userActions;\n  let roles = ['организация', 'менеджер', 'экспедитор'];\n  return __jsx(App, {\n    filters: data.filterSubCategory,\n    sorts: data.sortSubCategory,\n    pageName: data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено')), __jsx(Card, {\n    className: classes.page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(CardActions, {\n    className: isMobileApp ? classes.column : classes.row,\n    style: isMobileApp ? {} : {\n      justifyContent: 'start',\n      alignItems: 'flex-start'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, data.employment !== null ? profile.role === 'admin' || profile.role === 'организация' || profile._id === data.employment.user._id ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    onChange: event => {\n      setName(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(Input, {\n    placeholder: router.query.id === 'new' ? 'Пароль' : 'Новый пароль',\n    type: hide ? 'password' : 'text',\n    value: password,\n    onChange: handlePassword,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, __jsx(IconButton, {\n      \"aria-label\": \"Toggle password visibility\",\n      onClick: handleHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, hide ? __jsx(VisibilityOff, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }) : __jsx(Visibility, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"email\",\n    value: email,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    onChange: event => {\n      setEmail(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\",\n    value: phone,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    onChange: event => {\n      setPhone(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), router.query.id === 'new' && profile.role === 'admin' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Select, {\n    value: organization._id,\n    onChange: handleOrganization,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, data.organizations.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, element.name)))) : router.query.id !== 'new' ? __jsx(TextField, {\n    label: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n    value: organization.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }) : null, __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"\\u0420\\u043E\\u043B\\u044C\"), __jsx(Select, {\n    value: role,\n    onChange: handleRole,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: profile._id === data.employment.user._id || !['admin', 'организация'].includes(profile.role)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, roles.map(element => {\n    //if(element!=='организация'||profile.role=='admin')\n    return __jsx(MenuItem, {\n      key: element,\n      value: element,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, element);\n  }))), __jsx(\"div\", {\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick: async () => {\n      if (name.length > 0 && email.length > 0 && password.length > 0 && phone.length > 0 && role.length > 0 && organization._id !== undefined) {\n        const action = async () => {\n          await addEmployment({\n            name: name,\n            email: email,\n            phone: phone,\n            password: password,\n            role: role,\n            organization: organization._id\n          });\n          Router.push('/employments');\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: data.employment._id\n      };\n      if (name.length > 0 && name !== data.employment.name) editElement.name = name;\n      if (phone.length > 0 && phone !== data.employment.phone) editElement.phone = phone;\n      if (email.length > 0 && email !== data.employment.email) editElement.email = email;\n      if (password.length > 0) editElement.newPass = password;\n      if (role.length > 0 && role !== data.employment.role) editElement.role = role;\n\n      const action = async () => {\n        await setEmployments(editElement);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), profile._id !== data.employment.user._id && ['admin', 'организация'].includes(profile.role) ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await onoffEmployment([data.employment._id]);\n        setStatus(status === 'active' ? 'deactive' : 'active');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, status === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await deleteEmployment([data.employment._id]);\n        Router.push('/employments');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null, profile._id === data.employment.user._id ? __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        logout();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, \"\\u0412\\u044B\\u0439\\u0442\\u0438\") : null)))) : 'Ничего не найдено' : 'Ничего не найдено')));\n});\n\nClient.getInitialProps = async function (ctx) {\n  return {\n    data: _objectSpread({}, ctx.query.id !== 'new' ? await getEmployment({\n      _id: ctx.query.id\n    }) : {\n      employment: {\n        name: '',\n        email: '',\n        user: {\n          phone: '',\n          status: '',\n          role: ''\n        },\n        organization: {\n          _id: ''\n        }\n      }\n    }, (await getOrganizations({\n      search: '',\n      sort: 'name',\n      filter: ''\n    })))\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\pages\\employment\\[id].js"],"names":["Head","React","useState","App","connect","getEmployment","setEmployments","onoffEmployment","addEmployment","deleteEmployment","organizationStyle","Card","CardActions","Input","Button","bindActionCreators","mini_dialogActions","dynamic","IconButton","InputAdornment","Visibility","VisibilityOff","useRouter","InputLabel","MenuItem","FormControl","Select","getOrganizations","Router","userActions","snackbarActions","TextField","Confirmation","Client","memo","props","classes","data","isMobileApp","app","showSnackBar","status","setStatus","employment","user","name","setName","email","setEmail","phone","setPhone","organization","setOrganization","handleOrganization","event","_id","target","value","role","setRole","handleRole","password","setPassword","handlePassword","hide","setHide","handleHide","profile","setMiniDialog","showMiniDialog","router","logout","roles","filterSubCategory","sortSubCategory","query","id","page","column","row","justifyContent","alignItems","inputM","inputDF","organizations","map","element","readOnly","includes","length","undefined","action","push","editElement","newPass","getInitialProps","ctx","search","sort","filter","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import Head from 'next/head';\r\nimport React, { useState } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport {getEmployment, setEmployments, onoffEmployment, addEmployment, deleteEmployment} from '../../src/gql/employment'\r\nimport organizationStyle from '../../src/styleMUI/employment/employment'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport dynamic from 'next/dynamic'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { useRouter } from 'next/router'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { getOrganizations } from '../../src/gql/organization'\r\nimport Router from 'next/router'\r\nimport * as userActions from '../../redux/actions/user'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst Confirmation = dynamic(\r\n    () => import('../../components/dialog/Confirmation')\r\n)\r\n\r\nconst Client = React.memo((props) => {\r\n    const classes = organizationStyle();\r\n    const { data } = props;\r\n    const { isMobileApp } = props.app;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    let [status, setStatus] = useState(data.employment!==null?data.employment.user.status:'');\r\n    let [name, setName] = useState(data.employment!==null?data.employment.name:'');\r\n    let [email, setEmail] = useState(data.employment!==null?data.employment.email:'');\r\n    let [phone, setPhone] = useState(data.employment!==null?data.employment.user.phone:'');\r\n    let [organization, setOrganization] = useState(data.employment!==null?data.employment.organization:{});\r\n    let handleOrganization =  (event) => {\r\n        setOrganization({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [role, setRole] = useState(data.employment!==null?data.employment.user.role:'');\r\n    let handleRole =  (event) => {\r\n        setRole(event.target.value)\r\n    };\r\n    let [password, setPassword] = useState('');\r\n    let handlePassword =  (event) => {\r\n        setPassword(event.target.value)\r\n    };\r\n    let [hide, setHide] = useState('password');\r\n    let handleHide =  () => {\r\n        setHide(!hide)\r\n    };\r\n    const { profile } = props.user;\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const router = useRouter()\r\n    const { logout } = props.userActions;\r\n    let roles = ['организация', 'менеджер', 'экспедитор']\r\n    return (\r\n        <App filters={data.filterSubCategory} sorts={data.sortSubCategory} pageName={data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.employment!==null?router.query.id==='new'?'Добавить':data.employment.name:'Ничего не найдено'}</title>\r\n            </Head>\r\n            <Card className={classes.page}>\r\n                <CardActions className={isMobileApp?classes.column:classes.row} style={isMobileApp?{}:{justifyContent: 'start', alignItems: 'flex-start'}}>\r\n                {\r\n                            data.employment!==null?\r\n                                profile.role==='admin'||profile.role==='организация'||profile._id===data.employment.user._id?\r\n                                    <>\r\n                                    <div>\r\n                                            <TextField\r\n                                                label='Имя'\r\n                                                value={name}\r\n                                                className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                                onChange={(event)=>{setName(event.target.value)}}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                }}\r\n                                            />\r\n                                            <Input\r\n                                                placeholder={router.query.id==='new'?'Пароль':'Новый пароль'}\r\n                                                type={hide ? 'password' : 'text' }\r\n                                                value={password}\r\n                                                onChange={handlePassword}\r\n                                                className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                                endAdornment={\r\n                                                    <InputAdornment position='end'>\r\n                                                        <IconButton aria-label='Toggle password visibility' onClick={handleHide}>\r\n                                                            {hide ? <VisibilityOff />:<Visibility />  }\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n                                        <TextField\r\n                                            label='email'\r\n                                            value={email}\r\n                                            className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                            onChange={(event)=>{setEmail(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        <TextField\r\n                                            label='Телефон'\r\n                                            value={phone}\r\n                                            className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                            onChange={(event)=>{setPhone(event.target.value)}}\r\n                                            inputProps={{\r\n                                                'aria-label': 'description',\r\n                                            }}\r\n                                        />\r\n                                        {router.query.id==='new'&&profile.role==='admin'?\r\n                                            <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                                <InputLabel>Организация</InputLabel>\r\n                                                <Select value={organization._id}onChange={handleOrganization}>\r\n                                                    {data.organizations.map((element)=>\r\n                                                        <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                                    )}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                            :\r\n                                            router.query.id!=='new'?\r\n                                                <TextField\r\n                                                    label='Организация'\r\n                                                    value={organization.name}\r\n                                                    className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                                    inputProps={{\r\n                                                        'aria-label': 'description',\r\n                                                        readOnly: true,\r\n                                                    }}\r\n                                                />\r\n                                                :null\r\n                                        }\r\n                                        <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                            <InputLabel>Роль</InputLabel>\r\n                                            <Select\r\n                                                value={role}\r\n                                                onChange={handleRole}\r\n                                                inputProps={{\r\n                                                    'aria-label': 'description',\r\n                                                    readOnly: profile._id===data.employment.user._id||!['admin', 'организация'].includes(profile.role),\r\n                                                }}\r\n                                            >\r\n                                                {roles.map((element)=>{\r\n                                                    //if(element!=='организация'||profile.role=='admin')\r\n                                                        return <MenuItem key={element} value={element}>{element}</MenuItem>\r\n                                                })\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        <div className={classes.row}>\r\n                                            {\r\n                                                router.query.id==='new'?\r\n                                                    <Button onClick={async()=>{\r\n                                                        if (name.length>0&&email.length>0&&password.length>0&&phone.length>0&&role.length>0&&organization._id!==undefined) {\r\n                                                            const action = async() => {\r\n                                                                await addEmployment({\r\n                                                                    name: name,\r\n                                                                    email: email,\r\n                                                                    phone: phone,\r\n                                                                    password: password,\r\n                                                                    role: role,\r\n                                                                    organization: organization._id,\r\n                                                                })\r\n                                                                Router.push('/employments')\r\n                                                            }\r\n                                                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                            showMiniDialog(true)\r\n                                                        } else {\r\n                                                            showSnackBar('Заполните все поля')\r\n                                                        }\r\n                                                    }} size='small' color='primary'>\r\n                                                        Добавить\r\n                                                    </Button>\r\n                                                    :\r\n                                                    <>\r\n                                                    <Button onClick={async()=>{\r\n                                                        let editElement = {_id: data.employment._id}\r\n                                                        if(name.length>0&&name!==data.employment.name)editElement.name = name\r\n                                                        if(phone.length>0&&phone!==data.employment.phone)editElement.phone = phone\r\n                                                        if(email.length>0&&email!==data.employment.email)editElement.email = email\r\n                                                        if(password.length>0)editElement.newPass = password\r\n                                                        if(role.length>0&&role!==data.employment.role)editElement.role = role\r\n                                                        const action = async() => {\r\n                                                            await setEmployments(editElement)\r\n                                                        }\r\n                                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                        showMiniDialog(true)\r\n                                                    }} size='small' color='primary'>\r\n                                                        Сохранить\r\n                                                    </Button>\r\n\r\n                                                    {\r\n                                                        profile._id!==data.employment.user._id&&['admin', 'организация'].includes(profile.role)?\r\n                                                            <>\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    await onoffEmployment([data.employment._id])\r\n                                                                    setStatus(status==='active'?'deactive':'active')\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                {status==='active'?'Отключить':'Включить'}\r\n                                                            </Button>\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    await deleteEmployment([data.employment._id])\r\n                                                                    Router.push('/employments')\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                Удалить\r\n                                                            </Button>\r\n                                                            </>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    {\r\n                                                        profile._id===data.employment.user._id?\r\n                                                            <Button onClick={async()=>{\r\n                                                                const action = async() => {\r\n                                                                    logout()\r\n                                                                }\r\n                                                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                                                showMiniDialog(true)\r\n                                                            }} size='small' color='primary'>\r\n                                                                Выйти\r\n                                                            </Button>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    </>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    </>\r\n                                    :\r\n                                    'Ничего не найдено'\r\n                                :\r\n                                'Ничего не найдено'\r\n                        }\r\n                </CardActions>\r\n                </Card>\r\n        </App>\r\n    )\r\n})\r\n\r\nClient.getInitialProps = async function(ctx) {\r\n    return {\r\n        data: {\r\n            ...ctx.query.id!=='new'?await getEmployment({_id: ctx.query.id}):{employment:{name: '',email: '',user: {phone: '',status: '',role: '',},organization: {_id: ''},}},\r\n            ...await getOrganizations({search: '', sort: 'name', filter: ''})\r\n        }\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);"]},"metadata":{},"sourceType":"module"}