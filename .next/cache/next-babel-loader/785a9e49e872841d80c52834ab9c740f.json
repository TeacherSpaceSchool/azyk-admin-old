{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport App from 'next/app';\nimport { ThemeProvider } from '@material-ui/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport theme from '../src/theme';\nimport withRedux from 'next-redux-wrapper';\nimport configureStore from '../redux/configureStore';\nimport { Provider } from 'react-redux';\nimport { SingletonApolloClient } from '../src/singleton/client';\nimport { SingletonStore } from '../src/singleton/store';\nimport { getProfile } from '../redux/actions/user';\nimport { checkMobile, checkAuth } from '../src/lib';\nexport default withRedux(configureStore, {\n  debug: false\n})(class MyApp extends App {\n  static componentDidMount() {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentNode.removeChild(jssStyles);\n    }\n  }\n\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    new SingletonApolloClient(ctx.req);\n\n    if (ctx.req) {\n      ctx.store.getState().app.isMobileApp = checkMobile(ctx.req.headers['user-agent']);\n      ctx.store.getState().user.authenticated = checkAuth(ctx.req.headers.cookie);\n      if (ctx.store.getState().user.authenticated) ctx.store.getState().user.profile = await getProfile();\n    }\n\n    ctx.store.getState().app.search = '';\n    ctx.store.getState().app.sort = '-createdAt';\n    ctx.store.getState().app.filter = '';\n    ctx.store.getState().app.date = '';\n    ctx.store.getState().app.load = false;\n    ctx.store.getState().mini_dialog.show = false;\n    ctx.store.getState().pagination.work = false;\n    return {\n      pageProps: _objectSpread({}, Component.getInitialProps ? await Component.getInitialProps(ctx) : {})\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    new SingletonStore(store);\n    return __jsx(React.Fragment, null, __jsx(ThemeProvider, {\n      theme: theme\n    }, __jsx(CssBaseline, null), __jsx(Provider, {\n      store: store\n    }, __jsx(Component, pageProps))));\n  }\n\n});","map":null,"metadata":{},"sourceType":"module"}