{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nimport { Map, YMaps, Placemark } from 'react-yandex-maps';\nimport Fab from '@material-ui/core/Fab';\nimport GpsFixed from '@material-ui/icons/GpsFixed';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Confirmation from './Confirmation';\nconst Geo = React.memo(props => {\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  const {\n    showMiniDialog,\n    setMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    classes,\n    geo,\n    name,\n    idx,\n    setAddressGeo,\n    change\n  } = props;\n  let {\n    0: newGeo,\n    1: setNewGeo\n  } = useState(geo ? geo : '42.8700000, 74.5900000');\n\n  let getGeo = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setNewGeo(position.coords.latitude + ', ' + position.coords.longitude);\n      });\n    } else {\n      showSnackBar('Геолокация не поддерживается');\n    }\n  };\n\n  let dragend = e => {\n    let geo = e.get('target').geometry.getCoordinates();\n    setNewGeo(geo[0] + ', ' + geo[1]);\n  };\n\n  let {\n    0: load,\n    1: setLoad\n  } = useState(true);\n  return __jsx(YMaps, null, __jsx(\"div\", {\n    className: classes.column\n  }, __jsx(\"div\", {\n    style: {\n      height: window.innerHeight - 128,\n      width: window.innerWidth - 48,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }, load ? __jsx(CircularProgress, null) : null, __jsx(\"div\", {\n    style: {\n      display: load ? 'none' : 'block'\n    }\n  }, __jsx(Map, {\n    onLoad: () => {\n      setLoad(false);\n    },\n    height: window.innerHeight - 128,\n    width: window.innerWidth - 48,\n    defaultState: {\n      center: newGeo.split(', '),\n      zoom: 15\n    }\n  }, __jsx(Placemark, {\n    onDragEnd: dragend,\n    options: {\n      draggable: true,\n      iconColor: '#ffb300'\n    },\n    properties: {\n      iconCaption: name\n    },\n    geometry: newGeo.split(', ')\n  })))), __jsx(\"center\", null, change ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: async () => {\n      const action = async () => {\n        await setAddressGeo(newGeo, idx);\n        showMiniDialog(false);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n    },\n    className: classes.button\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\") : null, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      showMiniDialog(false);\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"))), change ? __jsx(Fab, {\n    color: \"primary\",\n    \"aria-label\": \"\\u041D\\u0430\\u0439\\u0442\\u0438 \\u0433\\u0435\\u043E\\u043B\\u043E\\u043A\\u0430\\u0446\\u0438\\u044E\",\n    className: classes.fabGeo,\n    onClick: getGeo\n  }, __jsx(GpsFixed, null)) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    snackbarActions: bindActionCreators(snackbarActions, dispatch),\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Geo));","map":null,"metadata":{},"sourceType":"module"}