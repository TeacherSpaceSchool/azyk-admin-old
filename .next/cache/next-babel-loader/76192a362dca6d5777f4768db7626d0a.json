{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\components\\\\dialog\\\\Geo.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nimport { Map, YMaps, Placemark } from 'react-yandex-maps';\nimport Fab from '@material-ui/core/Fab';\nimport GpsFixed from '@material-ui/icons/GpsFixed';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Confirmation from './Confirmation';\nconst Geo = React.memo(props => {\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  const {\n    showMiniDialog,\n    setMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    classes,\n    geo,\n    name,\n    idx,\n    setAddressGeo,\n    change\n  } = props;\n  let {\n    0: newGeo,\n    1: setNewGeo\n  } = useState(geo ? geo : '42.8700000, 74.5900000');\n\n  let getGeo = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setNewGeo(position.coords.latitude + ', ' + position.coords.longitude);\n      });\n    } else {\n      showSnackBar('Геолокация не поддерживается');\n    }\n  };\n\n  let dragend = e => {\n    let geo = e.get('target').geometry.getCoordinates();\n    setNewGeo(geo[0] + ', ' + geo[1]);\n  };\n\n  let {\n    0: load,\n    1: setLoad\n  } = useState(true);\n  return __jsx(YMaps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.column,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      height: window.innerHeight - 128,\n      width: window.innerWidth - 48,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, load ? __jsx(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }) : null, __jsx(\"div\", {\n    style: {\n      display: load ? 'none' : 'block'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(Map, {\n    onLoad: () => {\n      setLoad(false);\n    },\n    height: window.innerHeight - 128,\n    width: window.innerWidth - 48,\n    defaultState: {\n      center: newGeo.split(', '),\n      zoom: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Placemark, {\n    onDragEnd: dragend,\n    options: {\n      draggable: true,\n      iconColor: '#ffb300'\n    },\n    properties: {\n      iconCaption: name\n    },\n    geometry: newGeo.split(', '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })))), __jsx(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, change ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: async () => {\n      const action = async () => {\n        await setAddressGeo(newGeo, idx);\n        showMiniDialog(false);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    },\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\") : null, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      showMiniDialog(false);\n    },\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"))), change ? __jsx(Fab, {\n    color: \"primary\",\n    \"aria-label\": \"\\u041D\\u0430\\u0439\\u0442\\u0438 \\u0433\\u0435\\u043E\\u043B\\u043E\\u043A\\u0430\\u0446\\u0438\\u044E\",\n    className: classes.fabGeo,\n    onClick: getGeo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(GpsFixed, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    snackbarActions: bindActionCreators(snackbarActions, dispatch),\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\n  };\n}\n\nGeo.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Geo));","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\dialog\\Geo.js"],"names":["React","useState","PropTypes","withStyles","connect","bindActionCreators","mini_dialogActions","dialogContentStyle","Map","YMaps","Placemark","Fab","GpsFixed","snackbarActions","Button","CircularProgress","Confirmation","Geo","memo","props","showSnackBar","showMiniDialog","setMiniDialog","classes","geo","name","idx","setAddressGeo","change","newGeo","setNewGeo","getGeo","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","dragend","e","get","geometry","getCoordinates","load","setLoad","column","height","window","innerHeight","width","innerWidth","display","justifyContent","alignItems","center","split","zoom","draggable","iconColor","iconCaption","action","button","fabGeo","mapStateToProps","state","mini_dialog","app","mapDispatchToProps","dispatch","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport dialogContentStyle from '../../src/styleMUI/dialogContent'\r\nimport { Map, YMaps, Placemark } from 'react-yandex-maps';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport GpsFixed from '@material-ui/icons/GpsFixed';\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Confirmation from './Confirmation'\r\n\r\nconst Geo =  React.memo(\r\n    (props) =>{\r\n        const { showSnackBar } = props.snackbarActions;\r\n        const { showMiniDialog, setMiniDialog } = props.mini_dialogActions;\r\n        const { classes, geo, name, idx, setAddressGeo, change } = props;\r\n        let [newGeo, setNewGeo] = useState(geo?geo:'42.8700000, 74.5900000');\r\n        let getGeo = () => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition((position)=>{\r\n                    setNewGeo(position.coords.latitude+', '+position.coords.longitude)\r\n                });\r\n            } else {\r\n                showSnackBar('Геолокация не поддерживается')\r\n            }\r\n        }\r\n        let dragend = (e) => {\r\n            let geo = e.get('target').geometry.getCoordinates()\r\n            setNewGeo(geo[0]+', '+geo[1])\r\n        }\r\n        let [load, setLoad] = useState(true);\r\n        return (\r\n            <YMaps>\r\n                <div className={classes.column}>\r\n                    <div style={{height: window.innerHeight-128, width: window.innerWidth-48, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                        {\r\n                            load?<CircularProgress/>:null\r\n                        }\r\n                        <div style={{display: load?'none':'block'}}>\r\n                            <Map onLoad={()=>{setLoad(false)}} height={window.innerHeight-128} width={window.innerWidth-48} defaultState={{ center: newGeo.split(', '), zoom: 15 }} >\r\n                                <Placemark\r\n                                    onDragEnd={dragend}\r\n                                    options={{draggable: true, iconColor: '#ffb300'}}\r\n                                    properties={{iconCaption: name}}\r\n                                    geometry={newGeo.split(', ')} />\r\n                            </Map>\r\n                        </div>\r\n                    </div>\r\n                    <center>\r\n                        {\r\n                            change?\r\n                                <Button variant='contained' color='primary' onClick={async()=>{\r\n                                    const action = async() => {\r\n                                        await setAddressGeo(newGeo, idx)\r\n                                        showMiniDialog(false);\r\n                                    }\r\n                                    setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                }} className={classes.button}>\r\n                                    Сохранить\r\n                                </Button>\r\n                                :null\r\n                        }\r\n                        <Button variant='contained' color='secondary' onClick={()=>{showMiniDialog(false);}} className={classes.button}>\r\n                            Закрыть\r\n                        </Button>\r\n                    </center>\r\n                </div>\r\n                {\r\n                    change?\r\n                        <Fab color='primary' aria-label='Найти геолокацию' className={classes.fabGeo} onClick={getGeo}>\r\n                            <GpsFixed/>\r\n                        </Fab>\r\n                        :null}\r\n            </YMaps>\r\n        );\r\n    }\r\n)\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        mini_dialog: state.mini_dialog,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\r\n    }\r\n}\r\n\r\nGeo.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Geo));"]},"metadata":{},"sourceType":"module"}