{"ast":null,"code":"var __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getClient } from '../../src/gql/client';\nimport organizationStyle from '../../src/styleMUI/organization/organization';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as userActions from '../../redux/actions/user';\nimport dynamic from 'next/dynamic';\nimport { onoffClient, setClient } from '../../src/gql/client';\nimport Add from '@material-ui/icons/Done';\nimport Remove from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nconst Confirmation = dynamic(() => import('../../components/dialog/Confirmation'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../components/dialog/Confirmation')],\n    modules: ['../../components/dialog/Confirmation']\n  }\n});\nconst Client = React.memo(props => {\n  const classes = organizationStyle();\n  const {\n    data\n  } = props;\n  const {\n    isMobileApp\n  } = props.app;\n  let {\n    0: status,\n    1: setStatus\n  } = useState(data.client !== null ? data.client.user.status : '');\n  let {\n    0: name,\n    1: setName\n  } = useState(data.client !== null ? data.client.name : '');\n  let {\n    0: address,\n    1: setAddress\n  } = useState(data.client !== null ? data.client.address : []);\n  let {\n    0: email,\n    1: setEmail\n  } = useState(data.client !== null ? data.client.email : '');\n  let {\n    0: phone,\n    1: setPhone\n  } = useState(data.client !== null ? data.client.user.phone : '');\n  let {\n    0: newAddress,\n    1: setNewAddress\n  } = useState('');\n\n  let addAddress = () => {\n    address = [...address, newAddress];\n    setAddress(address);\n    setNewAddress('');\n  };\n\n  let editAddress = (event, idx) => {\n    address[idx] = event.target.value;\n    setAddress([...address]);\n  };\n\n  let deleteAddress = idx => {\n    address.splice(idx, 1);\n    setAddress([...address]);\n  };\n\n  let {\n    0: info,\n    1: setInfo\n  } = useState(data.client !== null ? data.client.info : '');\n  let {\n    0: preview,\n    1: setPreview\n  } = useState(data.client !== null ? data.client.image : '');\n  let {\n    0: image,\n    1: setImage\n  } = useState(undefined);\n\n  let handleChangeImage = event => {\n    setImage(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n  };\n\n  const {\n    profile\n  } = props.user;\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    logout\n  } = props.userActions;\n  let {\n    0: newPass,\n    1: setNewPass\n  } = useState('');\n\n  let handleNewPass = event => {\n    setNewPass(event.target.value);\n  };\n\n  let {\n    0: hide,\n    1: setHide\n  } = useState('password');\n\n  let handleHide = () => {\n    setHide(!hide);\n  };\n\n  return __jsx(App, {\n    filters: data.filterSubCategory,\n    sorts: data.sortSubCategory,\n    pageName: data.client !== null ? data.client.name : 'Ничего не найдено'\n  }, __jsx(Head, null, __jsx(\"title\", null, data.client !== null ? data.client.name : 'Ничего не найдено')), __jsx(Card, {\n    className: classes.page\n  }, __jsx(CardActions, {\n    className: isMobileApp ? classes.column : classes.row,\n    style: isMobileApp ? {} : {\n      justifyContent: 'start',\n      alignItems: 'flex-start'\n    }\n  }, data.client !== null ? profile.role === 'admin' || profile._id === data.client.user._id ? __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: \"contained-button-file\"\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: classes.media,\n    src: preview,\n    alt: 'Добавить'\n  })), __jsx(\"div\", null, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setName(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(Input, {\n    placeholder: \"\\u041D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n    type: hide ? 'password' : 'text',\n    value: newPass,\n    onChange: handleNewPass,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"Toggle password visibility\",\n      onClick: handleHide\n    }, hide ? __jsx(VisibilityOff, null) : __jsx(Visibility, null)))\n  }), __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0430\\u0434\\u0440\\u0435\\u0441\"), __jsx(Input, {\n    value: newAddress,\n    onChange: event => {\n      setNewAddress(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        addAddress();\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Add, null)))\n  })), address ? address.map((element, idx) => __jsx(FormControl, {\n    key: idx,\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0410\\u0434\\u0440\\u0435\\u0441\"), __jsx(Input, {\n    placeholder: \"\\u0410\\u0434\\u0440\\u0435\\u0441\",\n    value: element,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      editAddress(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deleteAddress(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  }))) : null, __jsx(TextField, {\n    label: \"email\",\n    value: email,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setEmail(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(TextField, {\n    label: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\",\n    value: phone,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setPhone(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(TextField, {\n    multiline: true,\n    label: \"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F\",\n    value: info,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setInfo(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: data.client.user._id\n      };\n      if (image !== undefined) editElement.image = image;\n      if (name.length > 0 && name !== data.client.name) editElement.name = name;\n      if (address.length > 0 && address !== data.client.address) editElement.address = address;\n      if (email.length > 0 && email !== data.client.email) editElement.email = email;\n      if (phone.length > 0 && phone !== data.client.phone) editElement.phone = phone;\n      if (info.length > 0 && info !== data.client.info) editElement.info = info;\n      if (newPass.length > 0) editElement.newPass = newPass;\n      if (phone.length > 0) editElement.phone = phone;\n\n      const action = async () => {\n        console.log(editElement);\n        await setClient(editElement);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), profile.role === 'admin' ? __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await onoffClient([data.client._id]);\n        setStatus(status === 'active' ? 'deactive' : 'active');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, status === 'active' ? 'Отключить' : 'Включить') : __jsx(Button, {\n    onClick: () => {\n      const action = async () => {\n        logout();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0412\\u044B\\u0439\\u0442\\u0438\")))) : __jsx(React.Fragment, null, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: classes.media,\n    src: preview,\n    alt: name\n  }), __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.name\n  }, name), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0410\\u0434\\u0440\\u0435\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.column\n  }, address ? address.map((element, idx) => __jsx(\"div\", {\n    className: classes.value,\n    key: idx\n  }, element)) : null)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"E-mail:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, email)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, phone)), __jsx(\"div\", {\n    className: classes.info\n  }, info))) : 'Ничего не найдено')), __jsx(\"input\", {\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    id: \"contained-button-file\",\n    type: \"file\",\n    onChange: handleChangeImage\n  }));\n});\n\nClient.getInitialProps = async function (ctx) {\n  return {\n    data: await getClient({\n      _id: ctx.query.id\n    })\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);","map":null,"metadata":{},"sourceType":"module"}