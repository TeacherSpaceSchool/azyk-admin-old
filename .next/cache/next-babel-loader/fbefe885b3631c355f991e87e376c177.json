{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport cardRouteStyle from '../../src/styleMUI/route/cardRoute';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport { deleteRoute } from '../../src/gql/route';\nimport Link from 'next/link';\nimport { pdDDMMYY } from '../../src/lib';\nimport Confirmation from '../dialog/Confirmation';\nvar CardOrder = React.memo(function (props) {\n  var classes = cardRouteStyle();\n  var element = props.element,\n      setList = props.setList;\n  var _props$mini_dialogAct = props.mini_dialogActions,\n      setMiniDialog = _props$mini_dialogAct.setMiniDialog,\n      showMiniDialog = _props$mini_dialogAct.showMiniDialog;\n  var statusColor = {\n    'создан': 'orange',\n    'выполняется': 'blue',\n    'выполнен': 'green'\n  };\n  return __jsx(Card, {\n    className: classes.card\n  }, __jsx(Link, {\n    href: \"/route/[id]\",\n    as: \"/route/\".concat(element !== undefined ? element._id : 'new')\n  }, __jsx(CardActionArea, null, __jsx(CardContent, {\n    className: classes.column\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041D\\u043E\\u043C\\u0435\\u0440:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.number), __jsx(\"div\", {\n    className: classes.status,\n    style: {\n      background: statusColor[element.status]\n    }\n  }, element.status)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0414\\u0430\\u0442\\u0430:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, pdDDMMYY(new Date(element.dateStart)))), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041A\\u043E\\u043C\\u043F\\u0430\\u043D\\u0438\\u044F:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.employment.organization.name)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u042D\\u043A\\u0441\\u043F\\u0435\\u0434\\u0438\\u0442\\u043E\\u0440:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.employment.name)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0417\\u0430\\u043A\\u0430\\u0437\\u044B:\\xA0\"), __jsx(\"div\", {\n    className: classes.column\n  }, element.invoices.map(function (invoice, idx) {\n    return __jsx(\"div\", {\n      key: idx,\n      className: classes.value\n    }, invoice.number);\n  })))))), __jsx(CardActions, null, element.status === 'создан' ? __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.t0 = setList;\n                          _context.next = 3;\n                          return deleteRoute([element._id]);\n\n                        case 3:\n                          _context.t1 = _context.sent.routes;\n                          (0, _context.t0)(_context.t1);\n\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function action() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\") : null));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrder);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\route\\CardRoute.js"],"names":["React","Card","CardActionArea","CardContent","CardActions","Button","cardRouteStyle","connect","bindActionCreators","mini_dialogActions","snackbarActions","deleteRoute","Link","pdDDMMYY","Confirmation","CardOrder","memo","props","classes","element","setList","setMiniDialog","showMiniDialog","statusColor","card","undefined","_id","column","row","nameField","value","number","status","background","Date","dateStart","employment","organization","name","invoices","map","invoice","idx","action","routes","mapStateToProps","state","user","app","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport cardRouteStyle from '../../src/styleMUI/route/cardRoute'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport { deleteRoute } from '../../src/gql/route'\r\nimport Link from 'next/link';\r\nimport { pdDDMMYY } from '../../src/lib'\r\nimport Confirmation from '../dialog/Confirmation'\r\n\r\nconst CardOrder = React.memo((props) => {\r\n    const classes = cardRouteStyle();\r\n    const { element, setList } = props;\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const statusColor = {\r\n        'создан': 'orange',\r\n        'выполняется': 'blue',\r\n        'выполнен': 'green',\r\n    }\r\n    return (\r\n        <Card className={classes.card}>\r\n            <Link href='/route/[id]' as={`/route/${element!==undefined?element._id:'new'}`}>\r\n                <CardActionArea>\r\n                    <CardContent className={classes.column}>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Номер:&nbsp;</div>\r\n                            <div className={classes.value}>{element.number}</div>\r\n                            <div className={classes.status} style={{background: statusColor[element.status]}}>{element.status}</div>\r\n                        </div>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Дата:&nbsp;</div>\r\n                            <div className={classes.value}>{pdDDMMYY(new Date(element.dateStart))}</div>\r\n                        </div>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Компания:&nbsp;</div>\r\n                            <div className={classes.value}>{element.employment.organization.name}</div>\r\n                        </div>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Экспедитор:&nbsp;</div>\r\n                            <div className={classes.value}>{element.employment.name}</div>\r\n                        </div>\r\n                        <div className={classes.row}>\r\n                            <div className={classes.nameField}>Заказы:&nbsp;</div>\r\n                            <div className={classes.column}>\r\n                                {element.invoices.map((invoice, idx)=> <div key={idx} className={classes.value}>{invoice.number}</div>)}\r\n                            </div>\r\n                        </div>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Link>\r\n            <CardActions>\r\n                {\r\n                    element.status==='создан'?\r\n                        <Button onClick={async()=>{\r\n                            const action = async() => {\r\n                                setList((await deleteRoute([element._id])).routes)\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            showMiniDialog(true)\r\n                        }} size='small' color='primary'>\r\n                            Удалить\r\n                        </Button>\r\n                        :\r\n                        null\r\n                }\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrder)"]},"metadata":{},"sourceType":"module"}