{"ast":null,"code":"import { SingletonApolloClient } from '../singleton/client';\nexport const readDataGQL = async (variables, query) => {\n  const client = new SingletonApolloClient().getClient();\n\n  try {\n    let res = await client.query({\n      variables: variables,\n      query: query\n    });\n    await client.writeQuery({\n      variables: variables,\n      query: query,\n      data: res.data\n    });\n    return res.data;\n  } catch (err) {\n    let res = await client.readQuery({\n      variables: variables,\n      query: query\n    });\n    console.log('res1', res);\n    return res;\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\index.js"],"names":["SingletonApolloClient","readDataGQL","variables","query","client","getClient","res","writeQuery","data","err","readQuery","console","log"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,qBAAtC;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAMC,SAAN,EAAiBC,KAAjB,KAAyB;AAChD,QAAMC,MAAM,GAAG,IAAIJ,qBAAJ,GAA4BK,SAA5B,EAAf;;AACA,MAAG;AACC,QAAIC,GAAG,GAAG,MAAMF,MAAM,CACjBD,KADW,CACL;AACHD,MAAAA,SAAS,EAAEA,SADR;AAEHC,MAAAA,KAAK,EAAEA;AAFJ,KADK,CAAhB;AAKA,UAAMC,MAAM,CAACG,UAAP,CAAkB;AACpBL,MAAAA,SAAS,EAAEA,SADS;AAEpBC,MAAAA,KAAK,EAAEA,KAFa;AAGpBK,MAAAA,IAAI,EAAEF,GAAG,CAACE;AAHU,KAAlB,CAAN;AAKA,WAAOF,GAAG,CAACE,IAAX;AACH,GAZD,CAYE,OAAMC,GAAN,EAAU;AACR,QAAIH,GAAG,GAAG,MAAMF,MAAM,CAACM,SAAP,CAAiB;AAC7BR,MAAAA,SAAS,EAAEA,SADkB;AAE7BC,MAAAA,KAAK,EAAEA;AAFsB,KAAjB,CAAhB;AAIAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBN,GAAnB;AACA,WAAOA,GAAP;AACH;AACJ,CAtBM","sourcesContent":["import { SingletonApolloClient } from '../singleton/client';\r\n\r\nexport const readDataGQL = async(variables, query)=>{\r\n    const client = new SingletonApolloClient().getClient()\r\n    try{\r\n        let res = await client\r\n            .query({\r\n                variables: variables,\r\n                query: query\r\n            })\r\n        await client.writeQuery({\r\n            variables: variables,\r\n            query: query,\r\n            data: res.data,\r\n        });\r\n        return res.data\r\n    } catch(err){\r\n        let res = await client.readQuery({\r\n            variables: variables,\r\n            query: query,\r\n        });\r\n        console.log('res1',res)\r\n        return res\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}