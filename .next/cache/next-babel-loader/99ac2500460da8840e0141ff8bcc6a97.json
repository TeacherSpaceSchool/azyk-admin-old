{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: ID!, $name: String, $category: ID) {\\n                        setSubCategory(_id: $_id, name: $name, category: $category) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($category: ID!, $name: String!) {\\n                        addSubCategory(category: $category, name: $name) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: [ID]!) {\\n                        onoffSubCategory(_id: $_id) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: [ID]!) {\\n                        deleteSubCategory(_id: $_id) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($category: ID!,$search: String!, $sort: String!, $filter: String!) {\\n                        subCategorys(category: $category, search: $search, sort: $sort, filter: $filter) {\\n                            _id\\n                            category\\n                                {_id name}\\n                            name\\n                            status\\n                            updatedAt\\n                          }\\n                          sortSubCategory {\\n                           name\\n                            field\\n                          }\\n                          filterSubCategory {\\n                           name\\n                           value\\n                          }\\n                          category(_id: $category) {\\n                                _id\\n                                image\\n                                name\\n                                status\\n                                updatedAt\\n                          }\\n                    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport var getSubCategorys =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var category, search, sort, filter, client, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            category = _ref.category, search = _ref.search, sort = _ref.sort, filter = _ref.filter;\n            _context.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context.next = 5;\n            return client.query({\n              variables: {\n                category: category,\n                search: search,\n                sort: sort,\n                filter: filter\n              },\n              query: gql(_templateObject())\n            });\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function getSubCategorys(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var deleteSubCategory =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(ids, category) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context2.next = 4;\n            return client.mutate({\n              variables: {\n                _id: ids\n              },\n              mutation: gql(_templateObject2())\n            });\n\n          case 4:\n            _context2.next = 6;\n            return getSubCategorys(_objectSpread({\n              category: category\n            }, new SingletonStore().getStore().getState().app));\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 9]]);\n  }));\n\n  return function deleteSubCategory(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var onoffSubCategory =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(ids, category) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context3.next = 4;\n            return client.mutate({\n              variables: {\n                _id: ids\n              },\n              mutation: gql(_templateObject3())\n            });\n\n          case 4:\n            _context3.next = 6;\n            return getSubCategorys(_objectSpread({\n              category: category\n            }, new SingletonStore().getStore().getState().app));\n\n          case 6:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(_context3.t0);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 9]]);\n  }));\n\n  return function onoffSubCategory(_x4, _x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var addSubCategory =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(element, category) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context4.next = 4;\n            return client.mutate({\n              variables: _objectSpread({}, element, {\n                category: category\n              }),\n              mutation: gql(_templateObject4())\n            });\n\n          case 4:\n            _context4.next = 6;\n            return getSubCategorys(_objectSpread({\n              category: category\n            }, new SingletonStore().getStore().getState().app));\n\n          case 6:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.error(_context4.t0);\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 9]]);\n  }));\n\n  return function addSubCategory(_x6, _x7) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var setSubCategory =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(element, category) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context5.next = 4;\n            return client.mutate({\n              variables: _objectSpread({}, element),\n              mutation: gql(_templateObject5())\n            });\n\n          case 4:\n            _context5.next = 6;\n            return getSubCategorys(_objectSpread({\n              category: category\n            }, new SingletonStore().getStore().getState().app));\n\n          case 6:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.error(_context5.t0);\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 9]]);\n  }));\n\n  return function setSubCategory(_x8, _x9) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\subcategory.js"],"names":["gql","SingletonApolloClient","SingletonStore","getSubCategorys","category","search","sort","filter","client","getClient","query","variables","res","data","console","error","deleteSubCategory","ids","mutate","_id","mutation","getStore","getState","app","onoffSubCategory","addSubCategory","element","setSubCategory"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getSubCategorys = async({category,  search,  sort,  filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {category: category, search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($category: ID!,$search: String!, $sort: String!, $filter: String!) {\r\n                        subCategorys(category: $category, search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            category\r\n                                {_id name}\r\n                            name\r\n                            status\r\n                            updatedAt\r\n                          }\r\n                          sortSubCategory {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterSubCategory {\r\n                           name\r\n                           value\r\n                          }\r\n                          category(_id: $category) {\r\n                                _id\r\n                                image\r\n                                name\r\n                                status\r\n                                updatedAt\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteSubCategory = async(ids, category)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteSubCategory(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getSubCategorys({category: category, ...(new SingletonStore().getStore().getState().app)})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const onoffSubCategory = async(ids, category)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        onoffSubCategory(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getSubCategorys({category: category, ...(new SingletonStore().getStore().getState().app)})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addSubCategory = async(element, category)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {...element, category: category},\r\n            mutation : gql`\r\n                    mutation ($category: ID!, $name: String!) {\r\n                        addSubCategory(category: $category, name: $name) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getSubCategorys({category: category, ...(new SingletonStore().getStore().getState().app)})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setSubCategory = async(element, category)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {...element},\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $name: String, $category: ID) {\r\n                        setSubCategory(_id: $_id, name: $name, category: $category) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getSubCategorys({category: category, ...(new SingletonStore().getStore().getState().app)})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}