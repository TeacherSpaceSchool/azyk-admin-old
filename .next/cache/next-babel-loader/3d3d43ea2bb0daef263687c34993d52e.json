{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\components\\\\dialog\\\\GeoRoute.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nimport { Map, YMaps, Placemark } from 'react-yandex-maps';\nimport Fab from '@material-ui/core/Fab';\nimport GpsFixed from '@material-ui/icons/GpsFixed';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Confirmation from './Confirmation';\nconst Geo = React.memo(props => {\n  const {\n    showMiniDialog,\n    setMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    classes,\n    invoices\n  } = props;\n  /*let getGeo = () => {\r\n      if (navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition((position)=>{\r\n              setNewGeo(position.coords.latitude+', '+position.coords.longitude)\r\n          });\r\n      } else {\r\n          showSnackBar('Геолокация не поддерживается')\r\n      }\r\n  }*/\n\n  let {\n    0: load,\n    1: setLoad\n  } = useState(true);\n  return __jsx(YMaps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.column,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      height: window.innerHeight - 128,\n      width: window.innerWidth - 48,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, load ? __jsx(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }) : null, __jsx(\"div\", {\n    style: {\n      display: load ? 'none' : 'block'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(Map, {\n    onLoad: () => {\n      setLoad(false);\n    },\n    height: window.innerHeight - 128,\n    width: window.innerWidth - 48,\n    defaultState: {\n      center: newGeo.split(', '),\n      zoom: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(Placemark, {\n    options: {\n      draggable: false,\n      iconColor: '#ffb300'\n    },\n    properties: {\n      iconCaption: name\n    },\n    geometry: newGeo.split(', '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })))), __jsx(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      showMiniDialog(false);\n    },\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"))));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    snackbarActions: bindActionCreators(snackbarActions, dispatch),\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\n  };\n}\n\nGeo.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Geo));","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\dialog\\GeoRoute.js"],"names":["React","useState","PropTypes","withStyles","connect","bindActionCreators","mini_dialogActions","dialogContentStyle","Map","YMaps","Placemark","Fab","GpsFixed","snackbarActions","Button","CircularProgress","Confirmation","Geo","memo","props","showMiniDialog","setMiniDialog","classes","invoices","load","setLoad","column","height","window","innerHeight","width","innerWidth","display","justifyContent","alignItems","center","newGeo","split","zoom","draggable","iconColor","iconCaption","name","button","mapStateToProps","state","mini_dialog","app","mapDispatchToProps","dispatch","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport dialogContentStyle from '../../src/styleMUI/dialogContent'\r\nimport { Map, YMaps, Placemark } from 'react-yandex-maps';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport GpsFixed from '@material-ui/icons/GpsFixed';\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Confirmation from './Confirmation'\r\n\r\nconst Geo =  React.memo(\r\n    (props) =>{\r\n        const { showMiniDialog, setMiniDialog } = props.mini_dialogActions;\r\n        const { classes, invoices } = props;\r\n        /*let getGeo = () => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition((position)=>{\r\n                    setNewGeo(position.coords.latitude+', '+position.coords.longitude)\r\n                });\r\n            } else {\r\n                showSnackBar('Геолокация не поддерживается')\r\n            }\r\n        }*/\r\n        let [load, setLoad] = useState(true);\r\n        return (\r\n            <YMaps>\r\n                <div className={classes.column}>\r\n                    <div style={{height: window.innerHeight-128, width: window.innerWidth-48, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                        {\r\n                            load?<CircularProgress/>:null\r\n                        }\r\n                        <div style={{display: load?'none':'block'}}>\r\n                            <Map onLoad={()=>{setLoad(false)}} height={window.innerHeight-128} width={window.innerWidth-48} defaultState={{ center: newGeo.split(', '), zoom: 15 }} >\r\n                                <Placemark\r\n                                    options={{draggable: false, iconColor: '#ffb300'}}\r\n                                    properties={{iconCaption: name}}\r\n                                    geometry={newGeo.split(', ')} />\r\n                            </Map>\r\n                        </div>\r\n                    </div>\r\n                    <center>\r\n                        <Button variant='contained' color='secondary' onClick={()=>{showMiniDialog(false);}} className={classes.button}>\r\n                            Закрыть\r\n                        </Button>\r\n                    </center>\r\n                </div>\r\n            </YMaps>\r\n        );\r\n    }\r\n)\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        mini_dialog: state.mini_dialog,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\r\n    }\r\n}\r\n\r\nGeo.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Geo));"]},"metadata":{},"sourceType":"module"}