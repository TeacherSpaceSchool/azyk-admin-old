{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getEmployments = async ({\n  search: search,\n  sort: sort,\n  filter: filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($search: String!, $sort: String!, $filter: String!) {\n                        employments(search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            createdAt\n                            name\n                            email\n                            phone\n                            user \n                                {_id role status login}\n                            organization \n                                {_id name}\n                          }\n                          sortEmployment {\n                           name\n                            field\n                          }\n                          filterEmployment {\n                           name\n                           value\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getEmployment = async ({\n  _id: _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID!) {\n                        employment(_id: $_id) {\n                            _id\n                            createdAt\n                            name\n                            email\n                            phone\n                            user \n                                {_id role status login}\n                            organization \n                                {_id name}\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getEcspeditors = async ({\n  _id: _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID) {\n                        ecspeditors(_id: $_id) {\n                            _id\n                            createdAt\n                            name\n                            email\n                            phone\n                            user \n                                {_id role status login}\n                            organization \n                                {_id name}\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const onoffEmployment = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        onoffEmployment(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getEmployments(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteEmployment = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteEmployment(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getEmployments(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setEmployments = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: ID!, $name: String, $email: String, $newPass: String, $role: String, $phone: [String], $login: String) {\n                        setEmployment(_id: $_id, name: $name, email: $email, newPass: $newPass, role: $role, phone: $phone, login: $login) {\n                             data\n                        }\n                    }`\n    });\n    let list = await getEmployments(new SingletonStore().getStore().getState().app);\n    return list;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addEmployment = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($name: String!, $email: String!, $phone: [String]!, $login: String!, $password: String!, $role: String!, $organization: ID!) {\n                        addEmployment(name: $name, email: $email, phone: $phone, login: $login, password: $password, role: $role, organization: $organization) {\n                             data\n                        }\n                    }`\n    });\n    return await getEmployments(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\employment.js"],"names":["gql","SingletonApolloClient","SingletonStore","getEmployments","search","sort","filter","client","getClient","res","query","variables","data","err","console","error","getEmployment","_id","getEcspeditors","onoffEmployment","ids","mutate","mutation","getStore","getState","app","deleteEmployment","setEmployments","element","list","addEmployment"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAM;AAACC,EAAAA,MAAM,EAAEA,MAAT;AAAiBC,EAAAA,IAAI,EAAEA,IAAvB;AAA6BC,EAAAA,MAAM,EAAEA;AAArC,CAAN,KAAqD;AAC/E,MAAG;AACC,UAAMC,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,QAAIC,GAAG,GAAG,MAAMF,MAAM,CACjBG,KADW,CACL;AACHC,MAAAA,SAAS,EAAE;AAACP,QAAAA,MAAM,EAAEA,MAAT;AAAiBC,QAAAA,IAAI,EAAEA,IAAvB;AAA6BC,QAAAA,MAAM,EAAEA;AAArC,OADR;AAEHI,MAAAA,KAAK,EAAEV,GAAI;;;;;;;;;;;;;;;;;;;;;;AAFR,KADK,CAAhB;AA0BA,WAAOS,GAAG,CAACG,IAAX;AACH,GA7BD,CA6BE,OAAMC,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAjCM;AAmCP,OAAO,MAAMG,aAAa,GAAG,OAAM;AAACC,EAAAA,GAAG,EAAEA;AAAN,CAAN,KAAoB;AAC7C,MAAI;AACA,UAAMV,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,QAAIC,GAAG,GAAG,MAAMF,MAAM,CACjBG,KADW,CACL;AACHC,MAAAA,SAAS,EAAE;AAACM,QAAAA,GAAG,EAAEA;AAAN,OADR;AAEHP,MAAAA,KAAK,EAAEV,GAAI;;;;;;;;;;;;;;AAFR,KADK,CAAhB;AAkBA,WAAOS,GAAG,CAACG,IAAX;AACH,GArBD,CAqBE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAzBM;AA2BP,OAAO,MAAMK,cAAc,GAAG,OAAM;AAACD,EAAAA,GAAG,EAAEA;AAAN,CAAN,KAAmB;AAC7C,MAAG;AACC,UAAMV,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,QAAIC,GAAG,GAAG,MAAMF,MAAM,CACjBG,KADW,CACL;AACHC,MAAAA,SAAS,EAAE;AAACM,QAAAA,GAAG,EAAEA;AAAN,OADR;AAEHP,MAAAA,KAAK,EAAEV,GAAI;;;;;;;;;;;;;;AAFR,KADK,CAAhB;AAkBA,WAAOS,GAAG,CAACG,IAAX;AACH,GArBD,CAqBE,OAAMC,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAzBM;AA2BP,OAAO,MAAMM,eAAe,GAAG,MAAMC,GAAN,IAAY;AACvC,MAAG;AACC,UAAMb,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,UAAMD,MAAM,CAACc,MAAP,CAAc;AAChBV,MAAAA,SAAS,EAAE;AAACM,QAAAA,GAAG,EAAEG;AAAN,OADK;AAEhBE,MAAAA,QAAQ,EAAGtB,GAAI;;;;;;AAFC,KAAd,CAAN;AAQA,WAAO,MAAMG,cAAc,CAAC,IAAID,cAAJ,GAAqBqB,QAArB,GAAgCC,QAAhC,GAA2CC,GAA5C,CAA3B;AACH,GAXD,CAWE,OAAMZ,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMa,gBAAgB,GAAG,MAAMN,GAAN,IAAY;AACxC,MAAG;AACC,UAAMb,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,UAAMD,MAAM,CAACc,MAAP,CAAc;AAChBV,MAAAA,SAAS,EAAE;AAACM,QAAAA,GAAG,EAAEG;AAAN,OADK;AAEhBE,MAAAA,QAAQ,EAAGtB,GAAI;;;;;;AAFC,KAAd,CAAN;AAQA,WAAO,MAAMG,cAAc,CAAC,IAAID,cAAJ,GAAqBqB,QAArB,GAAgCC,QAAhC,GAA2CC,GAA5C,CAA3B;AACH,GAXD,CAWE,OAAMZ,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMc,cAAc,GAAG,MAAMC,OAAN,IAAgB;AAC1C,MAAG;AACC,UAAMrB,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,UAAMD,MAAM,CAACc,MAAP,CAAc;AAChBV,MAAAA,SAAS,EAAEiB,OADK;AAEhBN,MAAAA,QAAQ,EAAGtB,GAAI;;;;;;AAFC,KAAd,CAAN;AAQA,QAAI6B,IAAI,GAAG,MAAM1B,cAAc,CAAC,IAAID,cAAJ,GAAqBqB,QAArB,GAAgCC,QAAhC,GAA2CC,GAA5C,CAA/B;AACA,WAAOI,IAAP;AACH,GAZD,CAYE,OAAMhB,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAhBM;AAkBP,OAAO,MAAMiB,aAAa,GAAG,MAAMF,OAAN,IAAgB;AACzC,MAAG;AACC,UAAMrB,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,UAAMD,MAAM,CAACc,MAAP,CAAc;AAChBV,MAAAA,SAAS,EAAEiB,OADK;AAEhBN,MAAAA,QAAQ,EAAGtB,GAAI;;;;;;AAFC,KAAd,CAAN;AAQA,WAAO,MAAMG,cAAc,CAAC,IAAID,cAAJ,GAAqBqB,QAArB,GAAgCC,QAAhC,GAA2CC,GAA5C,CAA3B;AACH,GAXD,CAWE,OAAMZ,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAfM","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getEmployments = async({search: search, sort: sort, filter: filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        employments(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            phone\r\n                            user \r\n                                {_id role status login}\r\n                            organization \r\n                                {_id name}\r\n                          }\r\n                          sortEmployment {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterEmployment {\r\n                           name\r\n                           value\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getEmployment = async({_id: _id})=> {\r\n    try {\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        employment(_id: $_id) {\r\n                            _id\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            phone\r\n                            user \r\n                                {_id role status login}\r\n                            organization \r\n                                {_id name}\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getEcspeditors = async({_id: _id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID) {\r\n                        ecspeditors(_id: $_id) {\r\n                            _id\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            phone\r\n                            user \r\n                                {_id role status login}\r\n                            organization \r\n                                {_id name}\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const onoffEmployment = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        onoffEmployment(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getEmployments(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteEmployment = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteEmployment(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getEmployments(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setEmployments = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $name: String, $email: String, $newPass: String, $role: String, $phone: [String], $login: String) {\r\n                        setEmployment(_id: $_id, name: $name, email: $email, newPass: $newPass, role: $role, phone: $phone, login: $login) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getEmployments(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addEmployment = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($name: String!, $email: String!, $phone: [String]!, $login: String!, $password: String!, $role: String!, $organization: ID!) {\r\n                        addEmployment(name: $name, email: $email, phone: $phone, login: $login, password: $password, role: $role, organization: $organization) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getEmployments(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}