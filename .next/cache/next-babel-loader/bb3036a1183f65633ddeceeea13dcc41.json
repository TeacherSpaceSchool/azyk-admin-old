{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\components\\\\bonus\\\\CardBonus.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport cardOrganizationStyle from '../../src/styleMUI/bonus/cardBonus';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport { setBonus } from '../../src/gql/bonus';\nimport Confirmation from '../../components/dialog/Confirmation';\nimport { checkInt } from '../../src/lib';\nconst CardBonus = React.memo(props => {\n  const classes = cardOrganizationStyle();\n  const {\n    element,\n    setList\n  } = props;\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    profile\n  } = props.user;\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  let {\n    0: target,\n    1: setTarget\n  } = useState(element ? element.target : 0);\n  let {\n    0: bonus1,\n    1: setBonus1\n  } = useState(element ? element.bonus : 0);\n  return __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(CardContent, {\n    className: classes.line,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/organization/[id]\",\n    as: `/organization/${element.organization._id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    className: classes.media,\n    src: element.organization.image,\n    alt: element.organization.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, element.organization.name), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), ['организация', 'менеджер', 'admin'].includes(profile.role) ? __jsx(React.Fragment, null, __jsx(TextField, {\n    style: {\n      width: '100%'\n    },\n    label: \"\\u0426\\u0435\\u043B\\u044C\",\n    value: target,\n    className: classes.input,\n    onChange: event => {\n      setTarget(checkInt(event.target.value));\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), __jsx(TextField, {\n    style: {\n      width: '100%'\n    },\n    label: \"\\u0411\\u043E\\u043D\\u0443\\u0441\",\n    value: bonus1,\n    className: classes.input,\n    onChange: event => {\n      setBonus1(checkInt(event.target.value));\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.nameField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"\\u0426\\u0435\\u043B\\u044C:\\xA0\"), __jsx(\"div\", {\n    className: classes.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, element.target, \"\\xA0\\u0441\\u043E\\u043C\")), __jsx(\"div\", {\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.nameField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"\\u0411\\u043E\\u043D\\u0443\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, element.bonus, \"\\xA0\\u0441\\u043E\\u043C\")))))), ['организация', 'менеджер', 'admin'].includes(profile.role) ? __jsx(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        const list = (await setBonus({\n          _id: element._id,\n          target: target,\n          bonus: bonus1\n        })).bonuses;\n        setList(list);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\")) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardBonus);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\bonus\\CardBonus.js"],"names":["React","useState","Card","CardActionArea","CardActions","CardContent","TextField","cardOrganizationStyle","connect","Link","Button","bindActionCreators","mini_dialogActions","setBonus","Confirmation","checkInt","CardBonus","memo","props","classes","element","setList","isMobileApp","app","profile","user","setMiniDialog","showMiniDialog","target","setTarget","bonus1","setBonus1","bonus","cardM","cardD","line","organization","_id","media","image","name","inputM","inputD","includes","role","width","input","event","value","row","nameField","action","list","bonuses","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport cardOrganizationStyle from '../../src/styleMUI/bonus/cardBonus'\r\nimport { connect } from 'react-redux'\r\nimport Link from 'next/link';\r\nimport Button from '@material-ui/core/Button';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport { setBonus } from '../../src/gql/bonus'\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\nimport { checkInt } from '../../src/lib'\r\n\r\n\r\nconst CardBonus = React.memo((props) => {\r\n    const classes = cardOrganizationStyle();\r\n    const { element, setList } = props;\r\n    const { isMobileApp } = props.app;\r\n    const { profile } = props.user;\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    let [target, setTarget] = useState(element?element.target:0);\r\n    let [bonus1, setBonus1] = useState(element?element.bonus:0);\r\n    return (\r\n        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n            <CardActionArea>\r\n                <CardContent className={classes.line}>\r\n                    <Link href='/organization/[id]' as={`/organization/${element.organization._id}`}>\r\n                        <img\r\n                            className={classes.media}\r\n                            src={element.organization.image}\r\n                            alt={element.organization.name}\r\n                        />\r\n                    </Link>\r\n                    <div>\r\n                        <h3 className={isMobileApp?classes.inputM:classes.inputD}>\r\n                            {element.organization.name}\r\n                        </h3>\r\n                        <br/>\r\n                        {\r\n                            ['организация', 'менеджер', 'admin'].includes(profile.role)?\r\n                                <>\r\n                                <TextField\r\n                                    style={{width: '100%'}}\r\n                                    label='Цель'\r\n                                    value={target}\r\n                                    className={classes.input}\r\n                                    onChange={(event)=>{setTarget(checkInt(event.target.value))}}\r\n                                    inputProps={{\r\n                                        'aria-label': 'description',\r\n                                    }}\r\n                                />\r\n                                <br/>\r\n                                <TextField\r\n                                    style={{width: '100%'}}\r\n                                    label='Бонус'\r\n                                    value={bonus1}\r\n                                    className={classes.input}\r\n                                    onChange={(event)=>{setBonus1(checkInt(event.target.value))}}\r\n                                    inputProps={{\r\n                                        'aria-label': 'description',\r\n                                    }}\r\n                                />\r\n                                <br/>\r\n                                </>\r\n                                :\r\n                                <>\r\n                                <div className={classes.row}>\r\n                                    <div className={classes.nameField}>\r\n                                        Цель:&nbsp;\r\n                                    </div>\r\n                                    <div className={classes.value}>\r\n                                        {element.target}&nbsp;сом\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.row}>\r\n                                    <div className={classes.nameField}>\r\n                                        Бонус:&nbsp;\r\n                                    </div>\r\n                                    <div className={classes.value}>\r\n                                        {element.bonus}&nbsp;сом\r\n                                    </div>\r\n                                </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n                </CardContent>\r\n            </CardActionArea>\r\n                {\r\n                    ['организация', 'менеджер', 'admin'].includes(profile.role) ?\r\n                        <CardActions>\r\n                            <Button onClick={async()=>{\r\n                                const action = async() => {\r\n                                    const list = (await setBonus({_id: element._id, target: target, bonus: bonus1})).bonuses\r\n                                    setList(list)\r\n                                }\r\n                                setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                showMiniDialog(true)\r\n                            }} size='small' color='primary'>\r\n                                Сохранить\r\n                            </Button>\r\n                        </CardActions>\r\n                        :\r\n                        null\r\n                }\r\n        </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        app: state.app,\r\n        user: state.user\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardBonus)"]},"metadata":{},"sourceType":"module"}