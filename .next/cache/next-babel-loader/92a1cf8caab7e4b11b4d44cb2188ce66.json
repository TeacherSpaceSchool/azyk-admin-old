{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport AppBar from '../components/app/AppBar';\nimport Dialog from '../components/app/Dialog';\nimport SnackBar from '../components/app/SnackBar';\nimport Drawer from '../components/app/Drawer';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addFavoriteItem } from '../src/gql/items';\nimport { addBasket } from '../src/gql/basket';\nimport * as paginationActions from '../redux/actions/pagination';\nimport * as userActions from '../redux/actions/user';\nimport * as appActions from '../redux/actions/app';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport '../scss/app.scss';\nimport Router from 'next/router';\nimport { useRouter } from 'next/router';\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\nexport const mainWindow = React.createRef();\nconst App = React.memo(props => {\n  const {\n    setProfile,\n    logout\n  } = props.userActions;\n  const {\n    next,\n    disable\n  } = props.paginationActions;\n  const {\n    showLoad\n  } = props.appActions;\n  const {\n    profile,\n    authenticated\n  } = props.user;\n  const {\n    work,\n    count\n  } = props.pagination;\n  let {\n    sorts,\n    filters,\n    getList,\n    pageName,\n    dates,\n    subcategory,\n    category\n  } = props;\n  const router = useRouter();\n  useEffect(() => {\n    if (authenticated) setProfile();else if (!authenticated && profile.role) logout(false);\n  }, [authenticated]);\n  Router.events.on('routeChangeStart', (err, url) => {\n    if (!router.pathname.includes(url)) showLoad(true);\n\n    if (err.cancelled) {\n      showLoad(false);\n    }\n  });\n  const containerRef = useBottomScrollListener(() => {\n    if (work) next();\n  });\n  useEffect(() => {\n    (async () => {\n      if (authenticated && profile.role === 'client') {\n        if (localStorage.favorites && localStorage.favorites !== '[]') {\n          let favorites = JSON.parse(localStorage.favorites);\n          favorites = favorites.map(element => element._id);\n          await addFavoriteItem(favorites);\n          localStorage.favorites = _JSON$stringify([]);\n          if (getList !== undefined) await getList();\n        }\n\n        if (localStorage.basket && localStorage.basket !== '[]') {\n          let basket = JSON.parse(localStorage.basket);\n\n          for (let i = 0; i < basket.length; i++) {\n            await addBasket({\n              item: basket[i].item._id,\n              count: basket[i].count\n            });\n          }\n\n          localStorage.basket = '[]';\n          if (getList !== undefined) await getList();\n        }\n      }\n    })();\n  }, []);\n  const {\n    load\n  } = props.app;\n  return __jsx(\"div\", {\n    ref: mainWindow,\n    className: \"App\"\n  }, __jsx(Drawer, {\n    subcategory: subcategory,\n    category: category\n  }), __jsx(AppBar, {\n    dates: dates,\n    pageName: pageName,\n    sorts: sorts,\n    filters: filters\n  }), __jsx(\"div\", {\n    ref: containerRef,\n    className: \"App-body\"\n  }, props.children), __jsx(Dialog, null), __jsx(SnackBar, null), load ? __jsx(\"div\", {\n    className: \"load\"\n  }, __jsx(CircularProgress, null)) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app,\n    pagination: state.pagination\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    userActions: bindActionCreators(userActions, dispatch),\n    appActions: bindActionCreators(appActions, dispatch),\n    paginationActions: bindActionCreators(paginationActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":null,"metadata":{},"sourceType":"module"}