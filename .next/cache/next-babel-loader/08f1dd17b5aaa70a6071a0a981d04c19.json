{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getOrganization = async ({\n  _id: _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID!) {\n                        organization(_id: $_id) {\n                            _id\n                            createdAt\n                            name\n                            image\n                            address\n                            email\n                            phone\n                            info\n                            reiting\n                            status\n                            minimumOrder\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getOrganizations = async ({\n  search: search,\n  sort: sort,\n  filter: filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($search: String!, $sort: String!, $filter: String!) {\n                        organizations(search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            createdAt\n                            name\n                            image\n                            address\n                            email\n                            phone\n                            info\n                            reiting\n                            status\n                          }\n                          sortOrganization {\n                           name\n                            field\n                          }\n                          filterOrganization {\n                           name\n                           value\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteOrganization = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteOrganization(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    let list = await getOrganizations(new SingletonStore().getStore().getState().app);\n    return list;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const onoffOrganization = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        onoffOrganization(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addOrganization = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($image: Upload!, $minimumOrder: Int, $name: String!, $address: [String]!, $email: [String]!, $phone: [String]!, $info: String!) {\n                        addOrganization(image: $image, minimumOrder: $minimumOrder, name: $name, address: $address, email: $email, phone: $phone, info: $info) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setOrganization = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: ID!, $image: Upload, $minimumOrder: Int, $name: String, $address: [String], $email: [String], $phone: [String], $info: String) {\n                        setOrganization(_id: $_id, image: $image, minimumOrder: $minimumOrder, name: $name, address: $address, email: $email, phone: $phone, info: $info) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\organization.js"],"names":["gql","SingletonApolloClient","SingletonStore","getOrganization","_id","client","getClient","res","query","variables","data","err","console","error","getOrganizations","search","sort","filter","deleteOrganization","ids","mutate","mutation","list","getStore","getState","app","onoffOrganization","addOrganization","element","setOrganization"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getOrganization = async({_id: _id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        organization(_id: $_id) {\r\n                            _id\r\n                            createdAt\r\n                            name\r\n                            image\r\n                            address\r\n                            email\r\n                            phone\r\n                            info\r\n                            reiting\r\n                            status\r\n                            minimumOrder\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getOrganizations = async({search: search, sort: sort, filter: filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        organizations(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            createdAt\r\n                            name\r\n                            image\r\n                            address\r\n                            email\r\n                            phone\r\n                            info\r\n                            reiting\r\n                            status\r\n                          }\r\n                          sortOrganization {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterOrganization {\r\n                           name\r\n                           value\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteOrganization = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteOrganization(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getOrganizations(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const onoffOrganization = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        onoffOrganization(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addOrganization = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($image: Upload!, $minimumOrder: Int, $name: String!, $address: [String]!, $email: [String]!, $phone: [String]!, $info: String!) {\r\n                        addOrganization(image: $image, minimumOrder: $minimumOrder, name: $name, address: $address, email: $email, phone: $phone, info: $info) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setOrganization = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $image: Upload, $minimumOrder: Int, $name: String, $address: [String], $email: [String], $phone: [String], $info: String) {\r\n                        setOrganization(_id: $_id, image: $image, minimumOrder: $minimumOrder, name: $name, address: $address, email: $email, phone: $phone, info: $info) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}