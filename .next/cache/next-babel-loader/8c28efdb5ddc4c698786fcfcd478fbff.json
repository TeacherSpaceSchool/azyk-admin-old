{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport cardOrganizationStyle from '../../src/styleMUI/bonus/cardBonus';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport { setBonus } from '../../src/gql/bonus';\nimport Confirmation from '../../components/dialog/Confirmation';\nimport { checkInt } from '../../src/lib';\nvar CardBonus = React.memo(function (props) {\n  var classes = cardOrganizationStyle();\n  var element = props.element,\n      setList = props.setList;\n  var isMobileApp = props.app.isMobileApp;\n  var profile = props.user.profile;\n  var _props$mini_dialogAct = props.mini_dialogActions,\n      setMiniDialog = _props$mini_dialogAct.setMiniDialog,\n      showMiniDialog = _props$mini_dialogAct.showMiniDialog;\n\n  var _useState = useState(element ? element.target : 0),\n      target = _useState[0],\n      setTarget = _useState[1];\n\n  var _useState2 = useState(element ? element.bonus : 0),\n      bonus1 = _useState2[0],\n      setBonus1 = _useState2[1];\n\n  return __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD\n  }, __jsx(CardActionArea, null, __jsx(CardContent, {\n    className: classes.line\n  }, __jsx(Link, {\n    href: \"/organization/[id]\",\n    as: \"/organization/\".concat(element.organization._id)\n  }, __jsx(\"img\", {\n    className: classes.media,\n    src: element.organization.image,\n    alt: element.organization.name\n  })), __jsx(\"div\", null, __jsx(\"h3\", {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, element.organization.name), __jsx(\"br\", null), ['организация', 'менеджер', 'admin'].includes(profile.role) ? __jsx(React.Fragment, null, __jsx(TextField, {\n    style: {\n      width: '100%'\n    },\n    label: \"\\u0426\\u0435\\u043B\\u044C\",\n    value: target,\n    className: classes.input,\n    onChange: function onChange(event) {\n      setTarget(checkInt(event.target.value));\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"br\", null), __jsx(TextField, {\n    style: {\n      width: '100%'\n    },\n    label: \"\\u0411\\u043E\\u043D\\u0443\\u0441\",\n    value: bonus1,\n    className: classes.input,\n    onChange: function onChange(event) {\n      setBonus1(checkInt(event.target.value));\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"br\", null)) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0426\\u0435\\u043B\\u044C:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.target, \"\\xA0\\u0441\\u043E\\u043C\")), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0411\\u043E\\u043D\\u0443\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.bonus, \"\\xA0\\u0441\\u043E\\u043C\")))))), ['организация', 'менеджер', 'admin'].includes(profile.role) ? __jsx(CardActions, null, __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  var list;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return setBonus({\n                            _id: element._id,\n                            target: target,\n                            bonus: bonus1\n                          });\n\n                        case 2:\n                          list = _context.sent.bonuses;\n                          setList(list);\n\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function action() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\")) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardBonus);","map":null,"metadata":{},"sourceType":"module"}