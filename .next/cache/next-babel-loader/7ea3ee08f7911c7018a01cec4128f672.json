{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: ID!, $invoices: [ID], $employment: ID, $cancelInvoices: [ID], $dateStart: Date) {\\n                        setRoute(_id: $_id, invoices: $invoices, employment: $employment, cancelInvoices: $cancelInvoices, dateStart: $dateStart) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($invoices: [ID]!, $employment: ID!, $dateStart: Date!) {\\n                        addRoute(invoices: $invoices, employment: $employment, dateStart: $dateStart) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($_id: [ID]!) {\\n                        deleteRoute(_id: $_id) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($_id: ID!) {\\n                        route(_id: $_id) {\\n                            _id\\n                            updatedAt\\n                            invoices\\n                                {\\n                                    _id\\n                                    updatedAt\\n                                    orders \\n                                        { \\n                                            _id\\n                                            updatedAt\\n                                            item\\n                                                {\\n                                                    image\\n                                                    _id\\n                                                    name    \\n                                                    organization\\n                                                        {_id name}\\n                                                }\\n                                            count\\n                                            allPrice\\n                                            status\\n                                         }\\n                                    client \\n                                        { \\n                                            _id\\n                                            name\\n                                            email\\n                                            user \\n                                                {_id phone} \\n                                        }\\n                                    allPrice\\n                                    info\\n                                    address\\n                                    paymentMethod\\n                                    number\\n                                    confirmationForwarder\\n                                    confirmationClient\\n                                }\\n                            employment\\n                                { \\n                                    _id\\n                                    updatedAt\\n                                    name\\n                                    email\\n                                    user \\n                                        {_id role status phone}\\n                                    organization \\n                                        {_id name}\\n                                }\\n                            status\\n                            dateStart\\n                            dateEnd\\n                            number\\n                        }\\n                    }\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    query ($search: String!, $sort: String!, $filter: String!) {\\n                        routes(search: $search, sort: $sort, filter: $filter) {\\n                            _id\\n                            updatedAt\\n                            invoices\\n                                {\\n                                    _id\\n                                    updatedAt\\n                                    orders \\n                                        { \\n                                            _id\\n                                            updatedAt\\n                                            item\\n                                                {\\n                                                    image\\n                                                    _id\\n                                                    name    \\n                                                    organization\\n                                                        {_id name}\\n                                                }\\n                                            count\\n                                            allPrice\\n                                            status\\n                                         }\\n                                    client \\n                                        { \\n                                            _id\\n                                            name\\n                                            email\\n                                            user \\n                                                {_id phone} \\n                                        }\\n                                    allPrice\\n                                    info\\n                                    address\\n                                    paymentMethod\\n                                    number\\n                                    confirmationForwarder\\n                                    confirmationClient\\n                                }\\n                            employment\\n                                { \\n                                    _id\\n                                    updatedAt\\n                                    name\\n                                    email\\n                                    user \\n                                        {_id role status phone}\\n                                    organization \\n                                        {_id name}\\n                                }\\n                            status\\n                            dateStart\\n                            dateEnd\\n                            number\\n                        }\\n                        sortRoute {\\n                            name\\n                            field\\n                        }\\n                        filterRoute {\\n                           name\\n                           value\\n                        }\\n                    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport var getRoutes =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var search, sort, filter, client, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            search = _ref.search, sort = _ref.sort, filter = _ref.filter;\n            _context.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context.next = 5;\n            return client.query({\n              variables: {\n                search: search,\n                sort: sort,\n                filter: filter\n              },\n              query: gql(_templateObject())\n            });\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function getRoutes(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getRoute =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(_ref3) {\n    var _id, client, res;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _id = _ref3._id;\n            _context2.prev = 1;\n            client = new SingletonApolloClient().getClient();\n            _context2.next = 5;\n            return client.query({\n              variables: {\n                _id: _id\n              },\n              query: gql(_templateObject2())\n            });\n\n          case 5:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.data);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.error(_context2.t0);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 9]]);\n  }));\n\n  return function getRoute(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var deleteRoute =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(ids) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context3.next = 4;\n            return client.mutate({\n              variables: {\n                _id: ids\n              },\n              mutation: gql(_templateObject3())\n            });\n\n          case 4:\n            _context3.next = 9;\n            break;\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(_context3.t0);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n\n  return function deleteRoute(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var addRoute =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context4.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject4())\n            });\n\n          case 4:\n            _context4.next = 9;\n            break;\n\n          case 6:\n            _context4.prev = 6;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.error(_context4.t0);\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 6]]);\n  }));\n\n  return function addRoute(_x4) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var setRoute =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context5.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject5())\n            });\n\n          case 4:\n            _context5.next = 9;\n            break;\n\n          case 6:\n            _context5.prev = 6;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.error(_context5.t0);\n\n          case 9:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 6]]);\n  }));\n\n  return function setRoute(_x5) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\route.js"],"names":["gql","SingletonApolloClient","SingletonStore","getRoutes","search","sort","filter","client","getClient","query","variables","res","data","console","error","getRoute","_id","deleteRoute","ids","mutate","mutation","addRoute","element","setRoute"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getRoutes = async({search, sort, filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        routes(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            updatedAt\r\n                            invoices\r\n                                {\r\n                                    _id\r\n                                    updatedAt\r\n                                    orders \r\n                                        { \r\n                                            _id\r\n                                            updatedAt\r\n                                            item\r\n                                                {\r\n                                                    image\r\n                                                    _id\r\n                                                    name    \r\n                                                    organization\r\n                                                        {_id name}\r\n                                                }\r\n                                            count\r\n                                            allPrice\r\n                                            status\r\n                                         }\r\n                                    client \r\n                                        { \r\n                                            _id\r\n                                            name\r\n                                            email\r\n                                            user \r\n                                                {_id phone} \r\n                                        }\r\n                                    allPrice\r\n                                    info\r\n                                    address\r\n                                    paymentMethod\r\n                                    number\r\n                                    confirmationForwarder\r\n                                    confirmationClient\r\n                                }\r\n                            employment\r\n                                { \r\n                                    _id\r\n                                    updatedAt\r\n                                    name\r\n                                    email\r\n                                    user \r\n                                        {_id role status phone}\r\n                                    organization \r\n                                        {_id name}\r\n                                }\r\n                            status\r\n                            dateStart\r\n                            dateEnd\r\n                            number\r\n                        }\r\n                        sortRoute {\r\n                            name\r\n                            field\r\n                        }\r\n                        filterRoute {\r\n                           name\r\n                           value\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getRoute = async({_id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        route(_id: $_id) {\r\n                            _id\r\n                            updatedAt\r\n                            invoices\r\n                                {\r\n                                    _id\r\n                                    updatedAt\r\n                                    orders \r\n                                        { \r\n                                            _id\r\n                                            updatedAt\r\n                                            item\r\n                                                {\r\n                                                    image\r\n                                                    _id\r\n                                                    name    \r\n                                                    organization\r\n                                                        {_id name}\r\n                                                }\r\n                                            count\r\n                                            allPrice\r\n                                            status\r\n                                         }\r\n                                    client \r\n                                        { \r\n                                            _id\r\n                                            name\r\n                                            email\r\n                                            user \r\n                                                {_id phone} \r\n                                        }\r\n                                    allPrice\r\n                                    info\r\n                                    address\r\n                                    paymentMethod\r\n                                    number\r\n                                    confirmationForwarder\r\n                                    confirmationClient\r\n                                }\r\n                            employment\r\n                                { \r\n                                    _id\r\n                                    updatedAt\r\n                                    name\r\n                                    email\r\n                                    user \r\n                                        {_id role status phone}\r\n                                    organization \r\n                                        {_id name}\r\n                                }\r\n                            status\r\n                            dateStart\r\n                            dateEnd\r\n                            number\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteRoute = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteRoute(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addRoute = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($invoices: [ID]!, $employment: ID!, $dateStart: Date!) {\r\n                        addRoute(invoices: $invoices, employment: $employment, dateStart: $dateStart) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setRoute = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $invoices: [ID], $employment: ID, $cancelInvoices: [ID], $dateStart: Date) {\r\n                        setRoute(_id: $_id, invoices: $invoices, employment: $employment, cancelInvoices: $cancelInvoices, dateStart: $dateStart) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}