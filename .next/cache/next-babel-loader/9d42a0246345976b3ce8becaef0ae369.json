{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport cardCategoryStyle from '../../src/styleMUI/subcategory/cardSubcategory';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport { onoffSubCategory, addSubCategory, setSubCategory } from '../../src/gql/subcategory';\nimport Link from 'next/link';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Confirmation from '../dialog/Confirmation';\nvar CardCategory = React.memo(function (props) {\n  var classes = cardCategoryStyle();\n  var element = props.element,\n      setList = props.setList,\n      category = props.category,\n      categorys = props.categorys;\n  var profile = props.user.profile;\n  var isMobileApp = props.app.isMobileApp; //addCard\n\n  var _useState = useState(element ? element.name : ''),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var handleName = function handleName(event) {\n    setName(event.target.value);\n  };\n\n  var _useState2 = useState(element ? element.category : {}),\n      selectCategory = _useState2[0],\n      setSelectCategory = _useState2[1];\n\n  var handleSelectCategory = function handleSelectCategory(event) {\n    setSelectCategory({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  var _props$mini_dialogAct = props.mini_dialogActions,\n      setMiniDialog = _props$mini_dialogAct.setMiniDialog,\n      showMiniDialog = _props$mini_dialogAct.showMiniDialog;\n  var showSnackBar = props.snackbarActions.showSnackBar;\n  return __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD\n  }, profile.role === 'admin' && (!element || element._id !== 'all') ? __jsx(React.Fragment, null, __jsx(CardActionArea, null, __jsx(CardContent, null, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: classes.input,\n    onChange: handleName,\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(FormControl, {\n    className: classes.input\n  }, __jsx(InputLabel, null, \"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044F\"), __jsx(Select, {\n    value: selectCategory._id,\n    onChange: handleSelectCategory\n  }, categorys ? categorys.map(function (element) {\n    return __jsx(MenuItem, {\n      key: element._id,\n      value: element._id,\n      ola: element.name\n    }, element.name);\n  }) : null)))), __jsx(CardActions, null, element !== undefined ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var editElement, action;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              editElement = {\n                _id: element._id\n              };\n              if (name.length > 0 && name !== element.name) editElement.name = name;\n              if (selectCategory._id !== undefined && selectCategory._id !== element.category._id) editElement.category = selectCategory._id;\n\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.t0 = setList;\n                          _context.next = 3;\n                          return setSubCategory(editElement, category);\n\n                        case 3:\n                          _context.t1 = _context.sent.subCategorys;\n                          (0, _context.t0)(_context.t1);\n\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function action() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action\n              }));\n              showMiniDialog(true);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref4 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.t0 = setList;\n                          _context3.next = 3;\n                          return onoffSubCategory([element._id], category);\n\n                        case 3:\n                          _context3.t1 = _context3.sent.subCategorys;\n                          (0, _context3.t0)(_context3.t1);\n\n                        case 5:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function action() {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, element.status === 'active' ? 'Отключить' : 'Включить'), __jsx(Link, {\n    href: \"/items/[id]\",\n    as: \"/items/\".concat(element._id)\n  }, __jsx(Button, {\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u041F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438\"))) : __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (name.length > 0 && selectCategory._id) {\n                setName('');\n                setSelectCategory({});\n\n                action =\n                /*#__PURE__*/\n                function () {\n                  var _ref6 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee5() {\n                    var subCategorys;\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return addSubCategory({\n                              name: name\n                            }, selectCategory._id);\n\n                          case 2:\n                            subCategorys = _context5.sent.subCategorys;\n                            setList(subCategorys);\n\n                          case 4:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function action() {\n                    return _ref6.apply(this, arguments);\n                  };\n                }();\n\n                setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                  action: action\n                }));\n                showMiniDialog(true);\n              } else {\n                showSnackBar('Заполните все поля');\n              }\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"))) : element !== undefined ? __jsx(CardActionArea, null, __jsx(Link, {\n    href: \"/items/[id]\",\n    as: \"/items/\".concat(element._id)\n  }, __jsx(\"div\", {\n    className: classes.line\n  }, __jsx(\"h3\", {\n    className: classes.input\n  }, element.name)))) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCategory);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\subcategory\\SubCardCategory.js"],"names":["React","useState","Card","CardActionArea","CardContent","cardCategoryStyle","connect","Button","CardActions","onoffSubCategory","addSubCategory","setSubCategory","Link","bindActionCreators","mini_dialogActions","InputLabel","MenuItem","FormControl","Select","snackbarActions","TextField","Confirmation","CardCategory","memo","props","classes","element","setList","category","categorys","profile","user","isMobileApp","app","name","setName","handleName","event","target","value","selectCategory","setSelectCategory","handleSelectCategory","_id","setMiniDialog","showMiniDialog","showSnackBar","cardM","cardD","role","input","map","undefined","editElement","length","action","subCategorys","status","line","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport cardCategoryStyle from '../../src/styleMUI/subcategory/cardSubcategory'\r\nimport { connect } from 'react-redux'\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { onoffSubCategory, addSubCategory, setSubCategory} from '../../src/gql/subcategory'\r\nimport Link from 'next/link';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Confirmation from '../dialog/Confirmation'\r\n\r\nconst CardCategory = React.memo((props) => {\r\n    const classes = cardCategoryStyle();\r\n    const { element, setList, category, categorys } = props;\r\n    const { profile } = props.user;\r\n    const { isMobileApp } = props.app;\r\n    //addCard\r\n    let [name, setName] = useState(element?element.name:'');\r\n    let handleName =  (event) => {\r\n        setName(event.target.value)\r\n    };\r\n    let [selectCategory, setSelectCategory] = useState(element?element.category:{});\r\n    let handleSelectCategory =  (event) => {\r\n        setSelectCategory({_id: event.target.value, name: event.target.name})\r\n    };\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    return (\r\n        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n            {\r\n                profile.role === 'admin' && (!element||element._id!=='all')?\r\n                    <>\r\n                    <CardActionArea>\r\n                        <CardContent>\r\n                            <TextField\r\n                                label='Имя'\r\n                                value={name}\r\n                                className={classes.input}\r\n                                onChange={handleName}\r\n                                inputProps={{\r\n                                    'aria-label': 'description',\r\n                                }}\r\n                            />\r\n                            <br/>\r\n                            <br/>\r\n                            <FormControl className={classes.input}>\r\n                                <InputLabel>Категория</InputLabel>\r\n                                <Select\r\n                                    value={selectCategory._id}\r\n                                    onChange={handleSelectCategory}\r\n                                >\r\n                                    {categorys?categorys.map((element)=>\r\n                                        <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                    ):null}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        {\r\n                            element!==undefined?\r\n                                <>\r\n                        <Button onClick={async()=>{\r\n                            let editElement = {_id: element._id}\r\n                            if(name.length>0&&name!==element.name)editElement.name = name\r\n                            if(selectCategory._id!==undefined&&selectCategory._id!==element.category._id)editElement.category = selectCategory._id\r\n                            const action = async() => {\r\n                                setList((await setSubCategory(editElement, category)).subCategorys)\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            showMiniDialog(true)\r\n                        }} size='small' color='primary'>\r\n                            Сохранить\r\n                        </Button>\r\n                        <Button onClick={async()=>{\r\n                            const action = async() => {\r\n                                setList((await onoffSubCategory([element._id], category)).subCategorys)\r\n                            }\r\n                            setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                            showMiniDialog(true)\r\n                        }} size='small' color='primary'>\r\n                            {element.status==='active'?'Отключить':'Включить'}\r\n                        </Button>\r\n                        <Link href='/items/[id]' as={`/items/${element._id}`}>\r\n                            <Button size='small' color='primary'>\r\n                                Перейти\r\n                            </Button>\r\n                        </Link>\r\n                                </>:\r\n                                <Button onClick={async()=> {\r\n                                    if (name.length > 0&&selectCategory._id) {\r\n                                        setName('')\r\n                                        setSelectCategory({})\r\n                                        const action = async() => {\r\n                                            let subCategorys = (await addSubCategory({name: name}, selectCategory._id)).subCategorys\r\n                                            setList(subCategorys)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    } else {\r\n                                        showSnackBar('Заполните все поля')\r\n                                    }\r\n                                }} size='small' color='primary'>\r\n                                    Добавить\r\n                                </Button>}\r\n                    </CardActions>\r\n                    </>\r\n                    :\r\n                    element!==undefined?\r\n                        <CardActionArea>\r\n                            <Link href='/items/[id]' as={`/items/${element._id}`}>\r\n                                <div className={classes.line}>\r\n                                    <h3 className={classes.input}>\r\n                                        {element.name}\r\n                                    </h3>\r\n                                </div>\r\n                            </Link>\r\n                        </CardActionArea>\r\n                        :null\r\n            }\r\n            </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.user,\r\n        app: state.app\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCategory)"]},"metadata":{},"sourceType":"module"}