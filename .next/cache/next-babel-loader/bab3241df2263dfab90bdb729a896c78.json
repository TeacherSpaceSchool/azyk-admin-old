{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    mutation ($name: String!, $image: Upload, $address: [String]!, $email: [String]!, $phone: [String]!, $info: String!, $social: [String]!) {\\n                        setContact(name: $name, image: $image, address: $address, email: $email, phone: $phone, info: $info, social: $social) {\\n                             data\\n                        }\\n                    }\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    query {\\n                        contact {\\n                            name\\n                            image\\n                            address\\n                            email\\n                            phone\\n                            info\\n                            social\\n                          }\\n                    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nexport var getContact =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var client, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context.next = 4;\n            return client.query({\n              query: gql(_templateObject())\n            });\n\n          case 4:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n\n  return function getContact() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var setContact =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(element) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            client = new SingletonApolloClient().getClient();\n            _context2.next = 4;\n            return client.mutate({\n              variables: element,\n              mutation: gql(_templateObject2())\n            });\n\n          case 4:\n            _context2.next = 9;\n            break;\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 6]]);\n  }));\n\n  return function setContact(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\contact.js"],"names":["gql","SingletonApolloClient","getContact","client","getClient","query","res","data","console","error","setContact","element","mutate","variables","mutation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AAEA,OAAO,IAAMC,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZC,YAAAA,MAFY,GAEH,IAAIF,qBAAJ,GAA4BG,SAA5B,EAFG;AAAA;AAAA,mBAGFD,MAAM,CACjBE,KADW,CACL;AACHA,cAAAA,KAAK,EAAEL,GAAF;AADF,aADK,CAHE;;AAAA;AAGdM,YAAAA,GAHc;AAAA,6CAkBXA,GAAG,CAACC,IAlBO;;AAAA;AAAA;AAAA;AAoBlBC,YAAAA,OAAO,CAACC,KAAR;;AApBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVP,UAAU;AAAA;AAAA;AAAA,GAAhB;AAwBP,OAAO,IAAMQ,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZR,YAAAA,MAFY,GAEH,IAAIF,qBAAJ,GAA4BG,SAA5B,EAFG;AAAA;AAAA,mBAGZD,MAAM,CAACS,MAAP,CAAc;AAChBC,cAAAA,SAAS,EAAEF,OADK;AAEhBG,cAAAA,QAAQ,EAAGd,GAAH;AAFQ,aAAd,CAHY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYlBQ,YAAAA,OAAO,CAACC,KAAR;;AAZkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVC,UAAU;AAAA;AAAA;AAAA,GAAhB","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\n\r\nexport const getContact = async()=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                query: gql`\r\n                    query {\r\n                        contact {\r\n                            name\r\n                            image\r\n                            address\r\n                            email\r\n                            phone\r\n                            info\r\n                            social\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setContact = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($name: String!, $image: Upload, $address: [String]!, $email: [String]!, $phone: [String]!, $info: String!, $social: [String]!) {\r\n                        setContact(name: $name, image: $image, address: $address, email: $email, phone: $phone, info: $info, social: $social) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}