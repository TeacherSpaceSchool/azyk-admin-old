{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n\n/* eslint-disable no-extra-boolean-cast */\nimport { urlGQL, urlGQLws } from '../../redux/constants/other';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'node-fetch';\nimport { getJWT } from '../lib';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, split } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client'; //import { WebSocketLink } from 'apollo-link-ws';\n//import { getMainDefinition } from 'apollo-utilities';\n//import * as ws from 'ws';\n\nimport { SingletonStore } from '../singleton/store';\nimport { showSnackBar } from '../../redux/actions/snackbar';\nexport class SingletonApolloClient {\n  constructor(req) {\n    if (!!SingletonApolloClient.instance) {\n      return SingletonApolloClient.instance;\n    }\n\n    SingletonApolloClient.instance = this;\n    const uploadLink = createUploadLink({\n      uri: urlGQL,\n      fetch: fetch,\n      credentials: 'include'\n    });\n    const authLink = setContext((_, {\n      headers\n    }) => {\n      return {\n        headers: _objectSpread({}, headers, {\n          authorization: this.jwt ? `Bearer ${this.jwt}` : ''\n        })\n      };\n    });\n    const linkError = onError(ctx => {\n      if (ctx.graphQLErrors) ctx.graphQLErrors.map(({\n        message,\n        locations,\n        path\n      }) => {\n        new SingletonStore().getStore().dispatch(showSnackBar('Ошибка'));\n        console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n      });\n      if (ctx.networkError) console.log(`[Network error]: ${ctx.networkError}`);\n    });\n    /*const wsLink = new WebSocketLink({\r\n        uri: urlGQLws,\r\n        options: {\r\n            reconnect: true\r\n        },\r\n        webSocketImpl: process.browser?WebSocket:ws\r\n    });*/\n\n    const mainLink =\n    /*split(\r\n    ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n    definition.kind === 'OperationDefinition' &&\r\n    definition.operation === 'subscription'\r\n    );\r\n    },\r\n    wsLink,*/\n    uploadLink;\n    /*,\r\n    );*/\n\n    const link = ApolloLink.from([linkError, authLink, mainLink]);\n    this.client = new ApolloClient({\n      link: link,\n      cache: new InMemoryCache(),\n      defaultOptions: {\n        watchQuery: {\n          fetchPolicy: 'cache-and-network',\n          errorPolicy: 'ignore'\n        },\n        query: {\n          fetchPolicy: 'network-only',\n          errorPolicy: 'all'\n        },\n        mutate: {\n          errorPolicy: 'all'\n        }\n      }\n    });\n    this.jwt = getJWT(req ? req.headers.cookie : document.cookie);\n    return this;\n  }\n\n  getClient() {\n    return this.client;\n  }\n\n}","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\singleton\\client.js"],"names":["urlGQL","urlGQLws","ApolloClient","InMemoryCache","fetch","getJWT","setContext","onError","ApolloLink","split","createUploadLink","SingletonStore","showSnackBar","SingletonApolloClient","constructor","req","instance","uploadLink","uri","credentials","authLink","_","headers","authorization","jwt","linkError","ctx","graphQLErrors","map","message","locations","path","getStore","dispatch","console","log","networkError","mainLink","link","from","client","cache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","mutate","cookie","document","getClient"],"mappings":"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","sourcesContent":["/* eslint-disable no-extra-boolean-cast */\r\nimport { urlGQL, urlGQLws } from '../../redux/constants/other';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport fetch from 'node-fetch';\r\nimport { getJWT } from '../lib'\r\nimport { setContext } from 'apollo-link-context';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink, split  } from 'apollo-link';\r\nimport { createUploadLink } from 'apollo-upload-client'\r\n//import { WebSocketLink } from 'apollo-link-ws';\r\n//import { getMainDefinition } from 'apollo-utilities';\r\n//import * as ws from 'ws';\r\nimport { SingletonStore } from '../singleton/store';\r\nimport {\r\n    showSnackBar\r\n} from '../../redux/actions/snackbar'\r\nexport class SingletonApolloClient {\r\n    constructor(req) {\r\n        if (!!SingletonApolloClient.instance) {\r\n            return SingletonApolloClient.instance;\r\n        }\r\n        SingletonApolloClient.instance = this;\r\n        const uploadLink = createUploadLink({\r\n            uri: urlGQL,\r\n            fetch: fetch,\r\n            credentials: 'include'\r\n        });\r\n        const authLink = setContext((_, { headers }) => {\r\n            return {\r\n                headers: {\r\n                    ...headers,\r\n                    authorization: this.jwt ? `Bearer ${this.jwt}` : '',\r\n                }\r\n            }\r\n        });\r\n        const linkError = onError((ctx) => {\r\n            if (ctx.graphQLErrors)\r\n                ctx.graphQLErrors.map(({ message, locations, path }) =>{\r\n                    new SingletonStore().getStore().dispatch(showSnackBar('Ошибка'))\r\n                    console.log(\r\n                        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n                    )\r\n                });\r\n            if (ctx.networkError) console.log(`[Network error]: ${ctx.networkError}`);\r\n        });\r\n        /*const wsLink = new WebSocketLink({\r\n            uri: urlGQLws,\r\n            options: {\r\n                reconnect: true\r\n            },\r\n            webSocketImpl: process.browser?WebSocket:ws\r\n        });*/\r\n        const mainLink = /*split(\r\n            ({ query }) => {\r\n                const definition = getMainDefinition(query);\r\n                return (\r\n                    definition.kind === 'OperationDefinition' &&\r\n                    definition.operation === 'subscription'\r\n                );\r\n            },\r\n            wsLink,*/\r\n            uploadLink/*,\r\n        );*/\r\n        const link = ApolloLink.from([\r\n            linkError,\r\n            authLink,\r\n            mainLink\r\n        ]);\r\n        this.client = new ApolloClient({\r\n            link: link,\r\n            cache: new InMemoryCache(),\r\n            defaultOptions: {\r\n                watchQuery: {\r\n                    fetchPolicy: 'cache-and-network',\r\n                    errorPolicy: 'ignore',\r\n                },\r\n                query: {\r\n                    fetchPolicy: 'network-only',\r\n                    errorPolicy: 'all',\r\n                },\r\n                mutate: {\r\n                    errorPolicy: 'all',\r\n                },\r\n            },\r\n\r\n        });\r\n        this.jwt = getJWT(req?req.headers.cookie:document.cookie)\r\n\r\n        return this;\r\n    }\r\n\r\n    getClient() {\r\n        return this.client;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}