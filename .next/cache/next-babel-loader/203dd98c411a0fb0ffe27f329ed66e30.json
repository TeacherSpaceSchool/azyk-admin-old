{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport cardAdsStyle from '../../src/styleMUI/ads/cardAds';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport { deleteAds, addAds, setAds } from '../../src/gql/ads';\nimport TextField from '@material-ui/core/TextField';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport Confirmation from '../dialog/Confirmation';\nconst CardAds = React.memo(props => {\n  const classes = cardAdsStyle();\n  const {\n    element,\n    setList\n  } = props;\n  const {\n    profile\n  } = props.user;\n  const {\n    isMobileApp\n  } = props.app; //addCard\n\n  let {\n    0: preview,\n    1: setPreview\n  } = useState(element ? element.image : '/static/add.png');\n  let {\n    0: image,\n    1: setImage\n  } = useState(undefined);\n\n  let handleChangeImage = event => {\n    setImage(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n  };\n\n  let {\n    0: title,\n    1: setTitle\n  } = useState(element ? element.title : '');\n\n  let handleTitle = event => {\n    setTitle(event.target.value);\n  };\n\n  let {\n    0: url,\n    1: setUrl\n  } = useState(element ? element.url : '');\n\n  let handleUrl = event => {\n    setUrl(event.target.value);\n  };\n\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  return __jsx(React.Fragment, null, \" \", profile.role === 'admin' ? __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD\n  }, __jsx(\"label\", {\n    htmlFor: element ? element._id : 'add'\n  }, __jsx(\"img\", {\n    className: isMobileApp ? classes.mediaM : classes.mediaD,\n    src: preview,\n    alt: 'Изменить'\n  })), __jsx(CardContent, null, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: title,\n    className: classes.input,\n    onChange: handleTitle,\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"URL\",\n    value: url,\n    className: classes.input,\n    onChange: handleUrl,\n    inputProps: {\n      'aria-label': 'description'\n    }\n  })), __jsx(CardActions, null, element !== undefined ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: element._id\n      };\n      if (title.length > 0 && title !== element.title) editElement.title = title;\n      if (url.length > 0 && url !== element.url) editElement.url = url;\n      if (image !== undefined) editElement.image = image;\n\n      const action = async () => {\n        setList((await setAds(editElement)).adss);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        setList((await deleteAds([element._id])).adss);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : __jsx(Button, {\n    onClick: async () => {\n      if (image !== undefined && url.length > 0 && title.length > 0) {\n        setImage(undefined);\n        setPreview('/static/add.png');\n        setTitle('');\n        setUrl('');\n\n        const action = async () => {\n          setList((await addAds({\n            image: image,\n            url: url,\n            title: title\n          })).adss);\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\")), __jsx(\"input\", {\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    id: element ? element._id : 'add',\n    type: \"file\",\n    onChange: handleChangeImage\n  })) : element !== undefined ? __jsx(\"div\", {\n    className: isMobileApp ? classes.cardM : classes.cardD\n  }, __jsx(\"a\", {\n    href: element.url\n  }, __jsx(\"img\", {\n    className: isMobileApp ? classes.mediaM : classes.mediaD,\n    alt: element.title,\n    src: element.image\n  }))) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardAds);","map":null,"metadata":{},"sourceType":"module"}