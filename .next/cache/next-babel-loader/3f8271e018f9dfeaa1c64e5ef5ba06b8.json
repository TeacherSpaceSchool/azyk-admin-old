{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState, useEffect } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getOrganizations } from '../../src/gql/organization';\nimport { getOrders } from '../../src/gql/order';\nimport { getRoute, setRoute, deleteRoute, addRoute } from '../../src/gql/route';\nimport { getEcspeditors } from '../../src/gql/employment';\nimport routeStyle from '../../src/styleMUI/route/route';\nimport { useRouter } from 'next/router';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CardOrder from '../../components/order/CardOrder';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Router from 'next/router';\nimport { pdDatePicker } from '../../src/lib';\nimport Confirmation from '../../components/dialog/Confirmation';\nimport GeoRoute from '../../components/dialog/GeoRoute';\nimport { urlMain } from '../../redux/constants/other';\nconst Route = React.memo(props => {\n  const {\n    profile\n  } = props.user;\n  const classes = routeStyle();\n  const {\n    data\n  } = props;\n  const router = useRouter();\n  const {\n    isMobileApp\n  } = props.app;\n  let {\n    0: dateStart,\n    1: setDateStart\n  } = useState(data.route ? pdDatePicker(new Date(data.route.dateStart)) : null);\n  let {\n    0: dateEnd,\n    1: setDateEnd\n  } = useState(data.route ? data.route.dateEnd : null);\n  console.log(data.route);\n  let {\n    0: employment,\n    1: setEmployment\n  } = useState(data.route ? data.route.employment : {});\n\n  let handleEmployment = event => {\n    setEmployment({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: organization,\n    1: setOrganization\n  } = useState(router.query.id === 'new' || !data.route ? {} : data.route.employment.organization);\n\n  let handleOrganization = event => {\n    setOrganization({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: invoices,\n    1: setInvoices\n  } = useState(data.route ? data.route.invoices : []);\n  let {\n    0: cancelInvoices,\n    1: setCancelInvoices\n  } = useState([]);\n  let {\n    0: allInvoices,\n    1: setAllInvoices\n  } = useState([]);\n  let {\n    0: unselectedInvoices,\n    1: setUnselectedInvoices\n  } = useState([]);\n  let {\n    0: selectType,\n    1: setSelectType\n  } = useState('Все');\n  let {\n    0: employments,\n    1: setEmployments\n  } = useState([]);\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  useEffect(() => {\n    (async () => {\n      if (['организация', 'менеджер'].includes(profile.role) && router.query.id === 'new') {\n        let organization = data.organizations.filter(element => element._id === profile.organization);\n        setOrganization(organization[0]);\n      }\n    })();\n  }, [profile]);\n  useEffect(() => {\n    (async () => {\n      setUnselectedInvoices((await getOrders({\n        search: '',\n        sort: '-updatedAt',\n        filter: 'обработка'\n      })).invoices);\n    })();\n  }, []);\n  useEffect(() => {\n    (async () => {\n      if (router.query.id === 'new') setEmployment({});\n      setEmployments((await getEcspeditors({\n        _id: organization._id\n      })).ecspeditors);\n    })();\n  }, [organization]);\n  useEffect(() => {\n    (async () => {\n      if (selectType == 'Все') setAllInvoices([...invoices, ...unselectedInvoices]);else if (selectType == 'Свободные') setAllInvoices([...unselectedInvoices]);else if (selectType == 'Выбраные') setAllInvoices([...invoices]);\n    })();\n  }, [selectType, unselectedInvoices, invoices]);\n  const statusColor = {\n    'создан': 'orange',\n    'выполняется': 'blue',\n    'выполнен': 'green'\n  };\n\n  let getInvoices = async () => {\n    setUnselectedInvoices((await getOrders({\n      search: '',\n      sort: '-updatedAt',\n      filter: 'обработка'\n    })).invoices);\n    setCancelInvoices([]);\n    setInvoices((await getRoute({\n      _id: data.route._id\n    })).route.invoices);\n  };\n\n  const breakGeoRoute = invoices.filter(element => !element.address[1]).length > 0;\n  return __jsx(App, {\n    pageName: data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено'\n  }, __jsx(Head, null, __jsx(\"title\", null, data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено'), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\"\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено'\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\"\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: `${urlMain}/static/512x512.png`\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `${urlMain}/route/${router.query.id}`\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: `${urlMain}/route/${router.query.id}`\n  })), __jsx(Card, {\n    className: isMobileApp ? classes.pageM : classes.pageD\n  }, router.query.id === 'new' ? null : __jsx(\"div\", {\n    className: classes.status,\n    style: {\n      background: statusColor[data.route.status]\n    }\n  }, data.route.status), __jsx(CardContent, {\n    className: classes.column\n  }, data.route ? __jsx(React.Fragment, null, router.query.id === 'new' ? null : __jsx(\"div\", {\n    className: classes.number\n  }, data.route.number), (router.query.id === 'new' || data.route.status === 'создан') && profile.role === 'admin' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF\n  }, __jsx(InputLabel, null, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Select, {\n    value: organization._id,\n    onChange: handleOrganization\n  }, data.organizations.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name\n  }, element.name)))) : __jsx(TextField, {\n    label: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n    value: organization.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    }\n  }), __jsx(\"br\", null), router.query.id === 'new' || data.route.status === 'создан' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF\n  }, __jsx(InputLabel, null, \"\\u042D\\u043A\\u0441\\u043F\\u0435\\u0434\\u0438\\u0442\\u043E\\u0440\"), __jsx(Select, {\n    value: employment._id,\n    onChange: handleEmployment\n  }, employments.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name\n  }, element.name)))) : __jsx(TextField, {\n    label: \"\\u042D\\u043A\\u0441\\u043F\\u0435\\u0434\\u0438\\u0442\\u043E\\u0440\",\n    value: employment.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    }\n  }), __jsx(\"br\", null), __jsx(TextField, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    label: \"\\u0414\\u0430\\u0442\\u0430\",\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: dateStart,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: !(router.query.id === 'new' || data.route.status === 'создан')\n    },\n    onChange: event => setDateStart(event.target.value)\n  }), __jsx(\"br\", null), __jsx(\"div\", {\n    style: {\n      color: breakGeoRoute ? 'red' : '#ffb300'\n    },\n    onClick: () => {\n      setMiniDialog('Маршрут', __jsx(GeoRoute, {\n        invoices: invoices\n      }), true);\n      showMiniDialog(true);\n    },\n    className: classes.geo\n  }, breakGeoRoute ? 'Маршрут неполный' : 'Просмотреть маршрут'), __jsx(\"br\", null), __jsx(\"div\", {\n    style: {\n      justifyContent: 'center'\n    },\n    className: classes.row\n  }, __jsx(\"div\", {\n    style: {\n      background: selectType === 'Все' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Все');\n    },\n    className: classes.selectType\n  }, \"\\u0412\\u0441\\u0435\"), __jsx(\"div\", {\n    style: {\n      background: selectType === 'Свободные' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Свободные');\n    },\n    className: classes.selectType\n  }, \"\\u0421\\u0432\\u043E\\u0431\\u043E\\u0434\\u043D\\u044B\\u0435\"), __jsx(\"div\", {\n    style: {\n      background: selectType === 'Выбраные' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Выбраные');\n    },\n    className: classes.selectType\n  }, \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u043D\\u044B\\u0435\")), __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.listInvoices,\n    style: {\n      zoom: isMobileApp ? 0.83 : 1\n    }\n  }, allInvoices ? allInvoices.map((element, idx) => {\n    return __jsx(\"div\", {\n      key: idx,\n      className: classes.row\n    }, ['обработка', 'принят'].includes(element.orders[0].status) && !element.confirmationForwarder ? __jsx(Checkbox, {\n      checked: invoices.includes(element),\n      onChange: () => {\n        if (!invoices.includes(element)) {\n          invoices.push(element);\n          unselectedInvoices.splice(unselectedInvoices.indexOf(element), 1);\n          cancelInvoices.splice(cancelInvoices.indexOf(element), 1);\n        } else {\n          invoices.splice(invoices.indexOf(element), 1);\n          unselectedInvoices.push(element);\n          cancelInvoices.push(element);\n        }\n\n        setInvoices([...invoices]);\n      }\n    }) : null, __jsx(CardOrder, {\n      getInvoices: getInvoices,\n      route: data.route._id,\n      element: element\n    }));\n  }) : null), __jsx(\"div\", {\n    className: isMobileApp ? classes.bottomRouteM : classes.bottomRouteD\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick: async () => {\n      if (dateStart && employment._id && organization._id) {\n        const action = async () => {\n          if (employment._id !== undefined && dateStart) {\n            invoices = invoices.map(element => element._id);\n            await addRoute({\n              invoices: invoices,\n              employment: employment._id,\n              dateStart: new Date(dateStart)\n            });\n            Router.push('/routes');\n          }\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        let editElement = {\n          _id: data.route._id\n        };\n        if (employment._id !== data.route.employment._id && data.route.status === 'создан') editElement.employment = employment._id;\n        if (dateStart && data.route.status === 'создан') editElement.dateStart = new Date(dateStart);\n        editElement.invoices = invoices.map(element => element._id);\n        if (cancelInvoices.length > 0) editElement.cancelInvoices = cancelInvoices.map(element => element._id);\n        await setRoute(editElement);\n        getInvoices();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), ['организация', 'менеджер', 'admin'].includes(profile.role) && data.route.status === 'создан' ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await deleteRoute([data.route._id]);\n        Router.push('/routes');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null))) : 'Ничего не найдено', __jsx(\"br\", null))));\n});\n\nRoute.getInitialProps = async function (ctx) {\n  if (!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role)) if (ctx.res) {\n    ctx.res.writeHead(302, {\n      Location: '/'\n    });\n    ctx.res.end();\n  } else Router.push('/');\n  return {\n    data: _objectSpread({}, ctx.query.id !== 'new' ? await getRoute({\n      _id: ctx.query.id\n    }) : {\n      route: {\n        invoices: [],\n        employment: {},\n        status: '',\n        dateStart: null,\n        dateEnd: null,\n        number: ''\n      }\n    }, (await getOrganizations({\n      search: '',\n      sort: 'name',\n      filter: ''\n    })))\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Route);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\pages\\route\\[id].js"],"names":["Head","React","useState","useEffect","App","connect","getOrganizations","getOrders","getRoute","setRoute","deleteRoute","addRoute","getEcspeditors","routeStyle","useRouter","Card","CardContent","Checkbox","CardOrder","InputLabel","MenuItem","FormControl","Select","bindActionCreators","mini_dialogActions","snackbarActions","TextField","Button","Router","pdDatePicker","Confirmation","GeoRoute","urlMain","Route","memo","props","profile","user","classes","data","router","isMobileApp","app","dateStart","setDateStart","route","Date","dateEnd","setDateEnd","console","log","employment","setEmployment","handleEmployment","event","_id","target","value","name","organization","setOrganization","query","id","handleOrganization","invoices","setInvoices","cancelInvoices","setCancelInvoices","allInvoices","setAllInvoices","unselectedInvoices","setUnselectedInvoices","selectType","setSelectType","employments","setEmployments","setMiniDialog","showMiniDialog","showSnackBar","includes","role","organizations","filter","element","search","sort","ecspeditors","statusColor","getInvoices","breakGeoRoute","address","length","number","pageM","pageD","status","background","column","inputM","inputDF","map","readOnly","shrink","color","geo","justifyContent","row","listInvoices","zoom","idx","orders","confirmationForwarder","push","splice","indexOf","bottomRouteM","bottomRouteD","action","undefined","editElement","getInitialProps","ctx","store","getState","res","writeHead","Location","end","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,WAA7B,EAA0CC,QAA1C,QAA0D,qBAA1D;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAO,KAAKC,kBAAZ,MAAoC,iCAApC;AACA,OAAO,KAAKC,eAAZ,MAAiC,8BAAjC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,OAAT,QAAwB,6BAAxB;AAGA,MAAMC,KAAK,GAAGhC,KAAK,CAACiC,IAAN,CAAYC,KAAD,IAAW;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAAK,CAACE,IAA1B;AACA,QAAMC,OAAO,GAAGzB,UAAU,EAA1B;AACA,QAAM;AAAE0B,IAAAA;AAAF,MAAWJ,KAAjB;AACA,QAAMK,MAAM,GAAG1B,SAAS,EAAxB;AACA,QAAM;AAAE2B,IAAAA;AAAF,MAAkBN,KAAK,CAACO,GAA9B;AACA,MAAI;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4B1C,QAAQ,CAACqC,IAAI,CAACM,KAAL,GAAWhB,YAAY,CAAC,IAAIiB,IAAJ,CAASP,IAAI,CAACM,KAAL,CAAWF,SAApB,CAAD,CAAvB,GAAwD,IAAzD,CAAxC;AACA,MAAI;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwB9C,QAAQ,CAACqC,IAAI,CAACM,KAAL,GAAWN,IAAI,CAACM,KAAL,CAAWE,OAAtB,GAA8B,IAA/B,CAApC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAI,CAACM,KAAjB;AACA,MAAI;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA8BlD,QAAQ,CAACqC,IAAI,CAACM,KAAL,GAAWN,IAAI,CAACM,KAAL,CAAWM,UAAtB,GAAiC,EAAlC,CAA1C;;AACA,MAAIE,gBAAgB,GAAKC,KAAD,IAAW;AAC/BF,IAAAA,aAAa,CAAC;AAACG,MAAAA,GAAG,EAAED,KAAK,CAACE,MAAN,CAAaC,KAAnB;AAA0BC,MAAAA,IAAI,EAAEJ,KAAK,CAACE,MAAN,CAAaE;AAA7C,KAAD,CAAb;AACH,GAFD;;AAGA,MAAI;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkC1D,QAAQ,CAACsC,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,IAAyB,CAACvB,IAAI,CAACM,KAA/B,GAAqC,EAArC,GAAwCN,IAAI,CAACM,KAAL,CAAWM,UAAX,CAAsBQ,YAA/D,CAA9C;;AACA,MAAII,kBAAkB,GAAKT,KAAD,IAAW;AACjCM,IAAAA,eAAe,CAAC;AAACL,MAAAA,GAAG,EAAED,KAAK,CAACE,MAAN,CAAaC,KAAnB;AAA0BC,MAAAA,IAAI,EAAEJ,KAAK,CAACE,MAAN,CAAaE;AAA7C,KAAD,CAAf;AACH,GAFD;;AAGA,MAAI;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0B/D,QAAQ,CAACqC,IAAI,CAACM,KAAL,GAAWN,IAAI,CAACM,KAAL,CAAWmB,QAAtB,GAA+B,EAAhC,CAAtC;AACA,MAAI;AAAA,OAACE,cAAD;AAAA,OAAiBC;AAAjB,MAAsCjE,QAAQ,CAAC,EAAD,CAAlD;AACA,MAAI;AAAA,OAACkE,WAAD;AAAA,OAAcC;AAAd,MAAgCnE,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAI;AAAA,OAACoE,kBAAD;AAAA,OAAqBC;AAArB,MAA8CrE,QAAQ,CAAC,EAAD,CAA1D;AACA,MAAI;AAAA,OAACsE,UAAD;AAAA,OAAaC;AAAb,MAA8BvE,QAAQ,CAAC,KAAD,CAA1C;AACA,MAAI;AAAA,OAACwE,WAAD;AAAA,OAAcC;AAAd,MAAgCzE,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAE0E,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAoC1C,KAAK,CAACX,kBAAhD;AACA,QAAM;AAAEsD,IAAAA;AAAF,MAAmB3C,KAAK,CAACV,eAA/B;AACAtB,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAS;AACN,UAAG,CAAC,aAAD,EAAgB,UAAhB,EAA4B4E,QAA5B,CAAqC3C,OAAO,CAAC4C,IAA7C,KAAoDxC,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAzE,EAA+E;AAC3E,YAAIH,YAAY,GAAGpB,IAAI,CAAC0C,aAAL,CAAmBC,MAAnB,CAA0BC,OAAO,IAAEA,OAAO,CAAC5B,GAAR,KAAcnB,OAAO,CAACuB,YAAzD,CAAnB;AACAC,QAAAA,eAAe,CAACD,YAAY,CAAC,CAAD,CAAb,CAAf;AACH;AACJ,KALD;AAMH,GAPQ,EAOP,CAACvB,OAAD,CAPO,CAAT;AAQAjC,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAS;AACNoE,MAAAA,qBAAqB,CAAC,CAAC,MAAMhE,SAAS,CAAC;AAAC6E,QAAAA,MAAM,EAAE,EAAT;AAAaC,QAAAA,IAAI,EAAE,YAAnB;AAAiCH,QAAAA,MAAM,EAAE;AAAzC,OAAD,CAAhB,EAAyElB,QAA1E,CAArB;AACH,KAFD;AAGH,GAJQ,EAIP,EAJO,CAAT;AAKA7D,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAS;AACN,UAAGqC,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAArB,EACIV,aAAa,CAAC,EAAD,CAAb;AACJuB,MAAAA,cAAc,CAAC,CAAC,MAAM/D,cAAc,CAAC;AAAC2C,QAAAA,GAAG,EAAEI,YAAY,CAACJ;AAAnB,OAAD,CAArB,EAAgD+B,WAAjD,CAAd;AACH,KAJD;AAKH,GANQ,EAMP,CAAC3B,YAAD,CANO,CAAT;AAOAxD,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAS;AACN,UAAGqE,UAAU,IAAE,KAAf,EACIH,cAAc,CAAC,CAAC,GAAGL,QAAJ,EAAc,GAAGM,kBAAjB,CAAD,CAAd,CADJ,KAEK,IAAGE,UAAU,IAAE,WAAf,EACDH,cAAc,CAAC,CAAC,GAAGC,kBAAJ,CAAD,CAAd,CADC,KAEA,IAAGE,UAAU,IAAE,UAAf,EACDH,cAAc,CAAC,CAAC,GAAGL,QAAJ,CAAD,CAAd;AACP,KAPD;AAQH,GATQ,EASP,CAACQ,UAAD,EAAaF,kBAAb,EAAiCN,QAAjC,CATO,CAAT;AAUA,QAAMuB,WAAW,GAAG;AAChB,cAAU,QADM;AAEhB,mBAAe,MAFC;AAGhB,gBAAY;AAHI,GAApB;;AAKA,MAAIC,WAAW,GAAG,YAAU;AACxBjB,IAAAA,qBAAqB,CAAC,CAAC,MAAMhE,SAAS,CAAC;AAAC6E,MAAAA,MAAM,EAAE,EAAT;AAAaC,MAAAA,IAAI,EAAE,YAAnB;AAAiCH,MAAAA,MAAM,EAAE;AAAzC,KAAD,CAAhB,EAAyElB,QAA1E,CAArB;AACAG,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAF,IAAAA,WAAW,CAAC,CAAC,MAAMzD,QAAQ,CAAC;AAAC+C,MAAAA,GAAG,EAAEhB,IAAI,CAACM,KAAL,CAAWU;AAAjB,KAAD,CAAf,EAAwCV,KAAxC,CAA8CmB,QAA/C,CAAX;AACH,GAJD;;AAKA,QAAMyB,aAAa,GAAIzB,QAAQ,CAACkB,MAAT,CAAiBC,OAAD,IAAW,CAACA,OAAO,CAACO,OAAR,CAAgB,CAAhB,CAA5B,CAAD,CAAkDC,MAAlD,GAAyD,CAA/E;AACA,SACI,MAAC,GAAD;AAAK,IAAA,QAAQ,EAAEpD,IAAI,CAACM,KAAL,GAAWL,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,UAAxB,GAAmCvB,IAAI,CAACM,KAAL,CAAW+C,MAAzD,GAAgE;AAA/E,KACI,MAAC,IAAD,QACI,qBAAQrD,IAAI,CAACM,KAAL,GAAWL,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,UAAxB,GAAmCvB,IAAI,CAACM,KAAL,CAAW+C,MAAzD,GAAgE,mBAAxE,CADJ,EAEI;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAC;AAAjC,IAFJ,EAGI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAErD,IAAI,CAACM,KAAL,GAAWL,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,UAAxB,GAAmCvB,IAAI,CAACM,KAAL,CAAW+C,MAAzD,GAAgE;AAAnG,IAHJ,EAII;AAAM,IAAA,QAAQ,EAAC,gBAAf;AAAgC,IAAA,OAAO,EAAC;AAAxC,IAJJ,EAKI;AAAM,IAAA,QAAQ,EAAC,SAAf;AAAyB,IAAA,OAAO,EAAC;AAAjC,IALJ,EAMI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAG,GAAE5D,OAAQ;AAA9C,IANJ,EAOI;AAAM,IAAA,QAAQ,EAAC,QAAf;AAAwB,IAAA,OAAO,EAAG,GAAEA,OAAQ,UAASQ,MAAM,CAACqB,KAAP,CAAaC,EAAG;AAArE,IAPJ,EAQI;AAAM,IAAA,GAAG,EAAC,WAAV;AAAsB,IAAA,IAAI,EAAG,GAAE9B,OAAQ,UAASQ,MAAM,CAACqB,KAAP,CAAaC,EAAG;AAAhE,IARJ,CADJ,EAWI,MAAC,IAAD;AAAM,IAAA,SAAS,EAAErB,WAAW,GAACH,OAAO,CAACuD,KAAT,GAAevD,OAAO,CAACwD;AAAnD,KACKtD,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,IAAxB,GAA6B;AAAK,IAAA,SAAS,EAAExB,OAAO,CAACyD,MAAxB;AAAgC,IAAA,KAAK,EAAE;AAACC,MAAAA,UAAU,EAAET,WAAW,CAAChD,IAAI,CAACM,KAAL,CAAWkD,MAAZ;AAAxB;AAAvC,KAAsFxD,IAAI,CAACM,KAAL,CAAWkD,MAAjG,CADlC,EAEI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEzD,OAAO,CAAC2D;AAAhC,KACK1D,IAAI,CAACM,KAAL,GACE,4BACCL,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GAAwB,IAAxB,GAA6B;AAAK,IAAA,SAAS,EAAExB,OAAO,CAACsD;AAAxB,KAAiCrD,IAAI,CAACM,KAAL,CAAW+C,MAA5C,CAD9B,EAEC,CAACpD,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,IAAyBvB,IAAI,CAACM,KAAL,CAAWkD,MAAX,KAAoB,QAA9C,KAAyD3D,OAAO,CAAC4C,IAAR,KAAe,OAAxE,GACG,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEvC,WAAW,GAACH,OAAO,CAAC4D,MAAT,GAAgB5D,OAAO,CAAC6D;AAA3D,KACK,MAAC,UAAD,6EADL,EAEK,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAExC,YAAY,CAACJ,GAA5B;AAAgC,IAAA,QAAQ,EAAEQ;AAA1C,KACKxB,IAAI,CAAC0C,aAAL,CAAmBmB,GAAnB,CAAwBjB,OAAD,IACpB,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,OAAO,CAAC5B,GAAvB;AAA4B,IAAA,KAAK,EAAE4B,OAAO,CAAC5B,GAA3C;AAAgD,IAAA,GAAG,EAAE4B,OAAO,CAACzB;AAA7D,KAAoEyB,OAAO,CAACzB,IAA5E,CADH,CADL,CAFL,CADH,GAUG,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,oEADV;AAEI,IAAA,KAAK,EAAEC,YAAY,CAACD,IAFxB;AAGI,IAAA,SAAS,EAAEjB,WAAW,GAACH,OAAO,CAAC4D,MAAT,GAAgB5D,OAAO,CAAC6D,OAHlD;AAII,IAAA,UAAU,EAAE;AACR,oBAAc,aADN;AAERE,MAAAA,QAAQ,EAAE;AAFF;AAJhB,IAZJ,EAsBC,iBAtBD,EAwBI7D,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,IAAyBvB,IAAI,CAACM,KAAL,CAAWkD,MAAX,KAAoB,QAA7C,GACI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEtD,WAAW,GAACH,OAAO,CAAC4D,MAAT,GAAgB5D,OAAO,CAAC6D;AAA3D,KACK,MAAC,UAAD,uEADL,EAEK,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAEhD,UAAU,CAACI,GAA1B;AAA+B,IAAA,QAAQ,EAAEF;AAAzC,KACKqB,WAAW,CAAC0B,GAAZ,CAAiBjB,OAAD,IACb,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,OAAO,CAAC5B,GAAvB;AAA4B,IAAA,KAAK,EAAE4B,OAAO,CAAC5B,GAA3C;AAAgD,IAAA,GAAG,EAAE4B,OAAO,CAACzB;AAA7D,KAAoEyB,OAAO,CAACzB,IAA5E,CADH,CADL,CAFL,CADJ,GAUI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,8DADV;AAEI,IAAA,KAAK,EAAEP,UAAU,CAACO,IAFtB;AAGI,IAAA,SAAS,EAAEjB,WAAW,GAACH,OAAO,CAAC4D,MAAT,GAAgB5D,OAAO,CAAC6D,OAHlD;AAII,IAAA,UAAU,EAAE;AACR,oBAAc,aADN;AAERE,MAAAA,QAAQ,EAAE;AAFF;AAJhB,IAlCR,EA4CC,iBA5CD,EA6CC,MAAC,SAAD;AACI,IAAA,SAAS,EAAE5D,WAAW,GAACH,OAAO,CAAC4D,MAAT,GAAgB5D,OAAO,CAAC6D,OADlD;AAEI,IAAA,KAAK,EAAC,0BAFV;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,eAAe,EAAE;AACbG,MAAAA,MAAM,EAAE;AADK,KAJrB;AAOI,IAAA,KAAK,EAAE3D,SAPX;AAQI,IAAA,UAAU,EAAE;AACR,oBAAc,aADN;AAER0D,MAAAA,QAAQ,EAAE,EAAE7D,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,IAAyBvB,IAAI,CAACM,KAAL,CAAWkD,MAAX,KAAoB,QAA/C;AAFF,KARhB;AAYI,IAAA,QAAQ,EAAGzC,KAAK,IAAIV,YAAY,CAACU,KAAK,CAACE,MAAN,CAAaC,KAAd;AAZpC,IA7CD,EA2DA,iBA3DA,EA4DA;AAAK,IAAA,KAAK,EAAE;AAAC8C,MAAAA,KAAK,EAAEd,aAAa,GAAC,KAAD,GAAO;AAA5B,KAAZ;AAAoD,IAAA,OAAO,EAAE,MAAI;AAC7Db,MAAAA,aAAa,CAAC,SAAD,EAAY,MAAC,QAAD;AAAU,QAAA,QAAQ,EAAEZ;AAApB,QAAZ,EAA6C,IAA7C,CAAb;AACAa,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAHD;AAGG,IAAA,SAAS,EAAEvC,OAAO,CAACkE;AAHtB,KAG4Bf,aAAa,GAAC,kBAAD,GAAoB,qBAH7D,CA5DA,EAgEA,iBAhEA,EAiEA;AAAK,IAAA,KAAK,EAAE;AAAEgB,MAAAA,cAAc,EAAE;AAAlB,KAAZ;AAA0C,IAAA,SAAS,EAAEnE,OAAO,CAACoE;AAA7D,KACI;AAAK,IAAA,KAAK,EAAE;AAACV,MAAAA,UAAU,EAAExB,UAAU,KAAG,KAAb,GAAmB,SAAnB,GAA6B;AAA1C,KAAZ;AAAkE,IAAA,OAAO,EAAE,MAAI;AAACC,MAAAA,aAAa,CAAC,KAAD,CAAb;AAAqB,KAArG;AAAuG,IAAA,SAAS,EAAEnC,OAAO,CAACkC;AAA1H,0BADJ,EAII;AAAK,IAAA,KAAK,EAAE;AAACwB,MAAAA,UAAU,EAAExB,UAAU,KAAG,WAAb,GAAyB,SAAzB,GAAmC;AAAhD,KAAZ;AAAwE,IAAA,OAAO,EAAE,MAAI;AAACC,MAAAA,aAAa,CAAC,WAAD,CAAb;AAA2B,KAAjH;AAAmH,IAAA,SAAS,EAAEnC,OAAO,CAACkC;AAAtI,8DAJJ,EAOI;AAAK,IAAA,KAAK,EAAE;AAACwB,MAAAA,UAAU,EAAExB,UAAU,KAAG,UAAb,GAAwB,SAAxB,GAAkC;AAA/C,KAAZ;AAAuE,IAAA,OAAO,EAAE,MAAI;AAACC,MAAAA,aAAa,CAAC,UAAD,CAAb;AAA0B,KAA/G;AAAiH,IAAA,SAAS,EAAEnC,OAAO,CAACkC;AAApI,wDAPJ,CAjEA,EA4EA,iBA5EA,EA6EA;AAAK,IAAA,SAAS,EAAElC,OAAO,CAACqE,YAAxB;AAAsC,IAAA,KAAK,EAAE;AAACC,MAAAA,IAAI,EAAEnE,WAAW,GAAC,IAAD,GAAM;AAAxB;AAA7C,KACK2B,WAAW,GAACA,WAAW,CAACgC,GAAZ,CAAgB,CAACjB,OAAD,EAAU0B,GAAV,KAAiB;AAC1C,WACI;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAe,MAAA,SAAS,EAAEvE,OAAO,CAACoE;AAAlC,OACK,CAAC,WAAD,EAAc,QAAd,EAAwB3B,QAAxB,CAAiCI,OAAO,CAAC2B,MAAR,CAAe,CAAf,EAAkBf,MAAnD,KAA4D,CAACZ,OAAO,CAAC4B,qBAArE,GACG,MAAC,QAAD;AAAU,MAAA,OAAO,EAAE/C,QAAQ,CAACe,QAAT,CAAkBI,OAAlB,CAAnB;AAA+C,MAAA,QAAQ,EAAE,MAAM;AAC3D,YAAI,CAACnB,QAAQ,CAACe,QAAT,CAAkBI,OAAlB,CAAL,EAAiC;AAC7BnB,UAAAA,QAAQ,CAACgD,IAAT,CAAc7B,OAAd;AACAb,UAAAA,kBAAkB,CAAC2C,MAAnB,CAA0B3C,kBAAkB,CAAC4C,OAAnB,CAA2B/B,OAA3B,CAA1B,EAA+D,CAA/D;AACAjB,UAAAA,cAAc,CAAC+C,MAAf,CAAsB/C,cAAc,CAACgD,OAAf,CAAuB/B,OAAvB,CAAtB,EAAuD,CAAvD;AACH,SAJD,MAIO;AACHnB,UAAAA,QAAQ,CAACiD,MAAT,CAAgBjD,QAAQ,CAACkD,OAAT,CAAiB/B,OAAjB,CAAhB,EAA2C,CAA3C;AACAb,UAAAA,kBAAkB,CAAC0C,IAAnB,CAAwB7B,OAAxB;AACAjB,UAAAA,cAAc,CAAC8C,IAAf,CAAoB7B,OAApB;AACH;;AACDlB,QAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,CAAD,CAAX;AACH;AAXD,MADH,GAaM,IAdX,EAeI,MAAC,SAAD;AAAW,MAAA,WAAW,EAAEwB,WAAxB;AAAqC,MAAA,KAAK,EAAEjD,IAAI,CAACM,KAAL,CAAWU,GAAvD;AAA4D,MAAA,OAAO,EAAE4B;AAArE,MAfJ,CADJ;AAmBH,GApBY,CAAD,GAoBT,IArBP,CA7EA,EAoGA;AAAK,IAAA,SAAS,EAAE1C,WAAW,GAACH,OAAO,CAAC6E,YAAT,GAAsB7E,OAAO,CAAC8E;AAAzD,KAEQ5E,MAAM,CAACqB,KAAP,CAAaC,EAAb,KAAkB,KAAlB,GACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,YAAS;AACtB,UAAInB,SAAS,IAAEQ,UAAU,CAACI,GAAtB,IAA2BI,YAAY,CAACJ,GAA5C,EAAiD;AAC7C,cAAM8D,MAAM,GAAG,YAAW;AACtB,cAAIlE,UAAU,CAACI,GAAX,KAAiB+D,SAAjB,IAA4B3E,SAAhC,EAA2C;AACvCqB,YAAAA,QAAQ,GAAGA,QAAQ,CAACoC,GAAT,CAAajB,OAAO,IAAEA,OAAO,CAAC5B,GAA9B,CAAX;AACA,kBAAM5C,QAAQ,CAAC;AACXqD,cAAAA,QAAQ,EAAEA,QADC;AAEXb,cAAAA,UAAU,EAAEA,UAAU,CAACI,GAFZ;AAGXZ,cAAAA,SAAS,EAAE,IAAIG,IAAJ,CAASH,SAAT;AAHA,aAAD,CAAd;AAKAf,YAAAA,MAAM,CAACoF,IAAP,CAAY,SAAZ;AACH;AACJ,SAVD;;AAWApC,QAAAA,aAAa,CAAC,cAAD,EAAiB,MAAC,YAAD;AAAc,UAAA,MAAM,EAAEyC;AAAtB,UAAjB,CAAb;AACAxC,QAAAA,cAAc,CAAC,IAAD,CAAd;AACH,OAdD,MAcO;AACHC,QAAAA,YAAY,CAAC,oBAAD,CAAZ;AACH;AACJ,KAlBD;AAkBG,IAAA,IAAI,EAAC,OAlBR;AAkBgB,IAAA,KAAK,EAAC;AAlBtB,wDADJ,GAuBI,4BACA,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,YAAS;AACtB,YAAMuC,MAAM,GAAG,YAAW;AACtB,YAAIE,WAAW,GAAG;AAAChE,UAAAA,GAAG,EAAEhB,IAAI,CAACM,KAAL,CAAWU;AAAjB,SAAlB;AACA,YAAGJ,UAAU,CAACI,GAAX,KAAiBhB,IAAI,CAACM,KAAL,CAAWM,UAAX,CAAsBI,GAAvC,IAA4ChB,IAAI,CAACM,KAAL,CAAWkD,MAAX,KAAoB,QAAnE,EAA4EwB,WAAW,CAACpE,UAAZ,GAAyBA,UAAU,CAACI,GAApC;AAC5E,YAAGZ,SAAS,IAAEJ,IAAI,CAACM,KAAL,CAAWkD,MAAX,KAAoB,QAAlC,EAA2CwB,WAAW,CAAC5E,SAAZ,GAAwB,IAAIG,IAAJ,CAASH,SAAT,CAAxB;AAC3C4E,QAAAA,WAAW,CAACvD,QAAZ,GAAuBA,QAAQ,CAACoC,GAAT,CAAajB,OAAO,IAAEA,OAAO,CAAC5B,GAA9B,CAAvB;AACA,YAAGW,cAAc,CAACyB,MAAf,GAAsB,CAAzB,EAA2B4B,WAAW,CAACrD,cAAZ,GAA6BA,cAAc,CAACkC,GAAf,CAAmBjB,OAAO,IAAEA,OAAO,CAAC5B,GAApC,CAA7B;AAC3B,cAAM9C,QAAQ,CAAC8G,WAAD,CAAd;AACA/B,QAAAA,WAAW;AACd,OARD;;AASAZ,MAAAA,aAAa,CAAC,cAAD,EAAiB,MAAC,YAAD;AAAc,QAAA,MAAM,EAAEyC;AAAtB,QAAjB,CAAb;AACAxC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAZD;AAYG,IAAA,IAAI,EAAC,OAZR;AAYgB,IAAA,KAAK,EAAC;AAZtB,8DADA,EAgBC,CAAC,aAAD,EAAgB,UAAhB,EAA4B,OAA5B,EAAqCE,QAArC,CAA8C3C,OAAO,CAAC4C,IAAtD,KAA6DzC,IAAI,CAACM,KAAL,CAAWkD,MAAX,KAAoB,QAAjF,GACG,4BACA,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,YAAS;AACtB,YAAMsB,MAAM,GAAG,YAAW;AACrB,cAAM3G,WAAW,CAAC,CAAC6B,IAAI,CAACM,KAAL,CAAWU,GAAZ,CAAD,CAAjB;AACD3B,QAAAA,MAAM,CAACoF,IAAP,CAAY,SAAZ;AACH,OAHD;;AAIApC,MAAAA,aAAa,CAAC,cAAD,EAAiB,MAAC,YAAD;AAAc,QAAA,MAAM,EAAEyC;AAAtB,QAAjB,CAAb;AACAxC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAPD;AAOG,IAAA,IAAI,EAAC,OAPR;AAOgB,IAAA,KAAK,EAAC;AAPtB,kDADA,CADH,GAcG,IA9BJ,CAzBZ,CApGA,CADF,GAkKA,mBAnKL,EAoKI,iBApKJ,CAFJ,CAXJ,CADJ;AAuLH,CAzPa,CAAd;;AA2PA5C,KAAK,CAACuF,eAAN,GAAwB,gBAAeC,GAAf,EAAoB;AACxC,MAAG,CAAC,CAAC,aAAD,EAAgB,UAAhB,EAA4B,OAA5B,EAAqC,YAArC,EAAmD1C,QAAnD,CAA4D0C,GAAG,CAACC,KAAJ,CAAUC,QAAV,GAAqBtF,IAArB,CAA0BD,OAA1B,CAAkC4C,IAA9F,CAAJ,EACI,IAAGyC,GAAG,CAACG,GAAP,EAAY;AACRH,IAAAA,GAAG,CAACG,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AACnBC,MAAAA,QAAQ,EAAE;AADS,KAAvB;AAGAL,IAAAA,GAAG,CAACG,GAAJ,CAAQG,GAAR;AACH,GALD,MAMQnG,MAAM,CAACoF,IAAP,CAAY,GAAZ;AACZ,SAAO;AACHzE,IAAAA,IAAI,oBACGkF,GAAG,CAAC5D,KAAJ,CAAUC,EAAV,KAAe,KAAf,GAAqB,MAAMtD,QAAQ,CAAC;AAAC+C,MAAAA,GAAG,EAAEkE,GAAG,CAAC5D,KAAJ,CAAUC;AAAhB,KAAD,CAAnC,GAAyD;AAACjB,MAAAA,KAAK,EAAE;AAACmB,QAAAA,QAAQ,EAAE,EAAX;AAAeb,QAAAA,UAAU,EAAE,EAA3B;AAA+B4C,QAAAA,MAAM,EAAE,EAAvC;AAA2CpD,QAAAA,SAAS,EAAE,IAAtD;AAA4DI,QAAAA,OAAO,EAAE,IAArE;AAA2E6C,QAAAA,MAAM,EAAE;AAAnF;AAAR,KAD5D,GAEG,MAAMtF,gBAAgB,CAAC;AAAC8E,MAAAA,MAAM,EAAE,EAAT;AAAaC,MAAAA,IAAI,EAAE,MAAnB;AAA2BH,MAAAA,MAAM,EAAE;AAAnC,KAAD,CAFzB;AADD,GAAP;AAMH,CAfD;;AAiBA,SAAS8C,eAAT,CAA0BC,KAA1B,EAAiC;AAC7B,SAAO;AACHvF,IAAAA,GAAG,EAAEuF,KAAK,CAACvF,GADR;AAEHL,IAAAA,IAAI,EAAE4F,KAAK,CAAC5F;AAFT,GAAP;AAIH;;AAED,SAAS6F,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACH3G,IAAAA,kBAAkB,EAAED,kBAAkB,CAACC,kBAAD,EAAqB2G,QAArB,CADnC;AAEH1G,IAAAA,eAAe,EAAEF,kBAAkB,CAACE,eAAD,EAAkB0G,QAAlB;AAFhC,GAAP;AAIH;;AAED,eAAe9H,OAAO,CAAC2H,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CjG,KAA7C,CAAf","sourcesContent":["import Head from 'next/head';\r\nimport React, { useState, useEffect } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport { getOrganizations } from '../../src/gql/organization'\r\nimport { getOrders } from '../../src/gql/order'\r\nimport { getRoute, setRoute, deleteRoute, addRoute } from '../../src/gql/route'\r\nimport { getEcspeditors } from '../../src/gql/employment'\r\nimport routeStyle from '../../src/styleMUI/route/route'\r\nimport { useRouter } from 'next/router'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CardOrder from '../../components/order/CardOrder';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Router from 'next/router'\r\nimport { pdDatePicker } from '../../src/lib'\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\nimport GeoRoute from '../../components/dialog/GeoRoute'\r\nimport { urlMain } from '../../redux/constants/other'\r\n\r\n\r\nconst Route = React.memo((props) => {\r\n    const { profile } = props.user;\r\n    const classes = routeStyle();\r\n    const { data } = props;\r\n    const router = useRouter()\r\n    const { isMobileApp } = props.app;\r\n    let [dateStart, setDateStart] = useState(data.route?pdDatePicker(new Date(data.route.dateStart)):null);\r\n    let [dateEnd, setDateEnd] = useState(data.route?data.route.dateEnd:null);\r\n    console.log(data.route)\r\n    let [employment, setEmployment] = useState(data.route?data.route.employment:{});\r\n    let handleEmployment =  (event) => {\r\n        setEmployment({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [organization, setOrganization] = useState(router.query.id==='new'||!data.route?{}:data.route.employment.organization);\r\n    let handleOrganization =  (event) => {\r\n        setOrganization({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [invoices, setInvoices] = useState(data.route?data.route.invoices:[]);\r\n    let [cancelInvoices, setCancelInvoices] = useState([]);\r\n    let [allInvoices, setAllInvoices] = useState([]);\r\n    let [unselectedInvoices, setUnselectedInvoices] = useState([]);\r\n    let [selectType, setSelectType] = useState('Все');\r\n    let [employments, setEmployments] = useState([]);\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(['организация', 'менеджер'].includes(profile.role)&&router.query.id==='new'){\r\n                let organization = data.organizations.filter(element=>element._id===profile.organization)\r\n                setOrganization(organization[0])\r\n            }\r\n        })()\r\n    },[profile])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            setUnselectedInvoices((await getOrders({search: '', sort: '-updatedAt', filter: 'обработка'})).invoices)\r\n        })()\r\n    },[])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(router.query.id==='new')\r\n                setEmployment({})\r\n            setEmployments((await getEcspeditors({_id: organization._id})).ecspeditors)\r\n        })()\r\n    },[organization])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(selectType=='Все')\r\n                setAllInvoices([...invoices, ...unselectedInvoices])\r\n            else if(selectType=='Свободные')\r\n                setAllInvoices([...unselectedInvoices])\r\n            else if(selectType=='Выбраные')\r\n                setAllInvoices([...invoices])\r\n        })()\r\n    },[selectType, unselectedInvoices, invoices])\r\n    const statusColor = {\r\n        'создан': 'orange',\r\n        'выполняется': 'blue',\r\n        'выполнен': 'green',\r\n    }\r\n    let getInvoices = async ()=>{\r\n        setUnselectedInvoices((await getOrders({search: '', sort: '-updatedAt', filter: 'обработка'})).invoices)\r\n        setCancelInvoices([])\r\n        setInvoices((await getRoute({_id: data.route._id})).route.invoices)\r\n    }\r\n    const breakGeoRoute = (invoices.filter((element)=>!element.address[1])).length>0\r\n    return (\r\n        <App pageName={data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'}</title>\r\n                <meta name='description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:title' content={data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'} />\r\n                <meta property='og:description' content='Азык – это онлайн платформа для заказа товаров оптом, разработанная специально для малого и среднего бизнеса.  Она объединяет производителей и торговые точки напрямую, сокращая расходы и повышая продажи. Азык предоставляет своим пользователям мощные технологии для масштабирования и развития своего бизнеса.' />\r\n                <meta property='og:type' content='website' />\r\n                <meta property='og:image' content={`${urlMain}/static/512x512.png`} />\r\n                <meta property=\"og:url\" content={`${urlMain}/route/${router.query.id}`} />\r\n                <link rel='canonical' href={`${urlMain}/route/${router.query.id}`}/>\r\n            </Head>\r\n            <Card className={isMobileApp?classes.pageM:classes.pageD}>\r\n                {router.query.id==='new'?null:<div className={classes.status} style={{background: statusColor[data.route.status]}}>{data.route.status}</div>}\r\n                <CardContent className={classes.column}>\r\n                    {data.route?\r\n                       <>\r\n                       {router.query.id==='new'?null:<div className={classes.number}>{data.route.number}</div>}\r\n                       {(router.query.id==='new'||data.route.status==='создан')&&profile.role==='admin'?\r\n                           <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                <InputLabel>Организация</InputLabel>\r\n                                <Select value={organization._id}onChange={handleOrganization}>\r\n                                    {data.organizations.map((element)=>\r\n                                        <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                    )}\r\n                                </Select>\r\n                            </FormControl>\r\n                           :\r\n                           <TextField\r\n                               label='Организация'\r\n                               value={organization.name}\r\n                               className={isMobileApp?classes.inputM:classes.inputDF}\r\n                               inputProps={{\r\n                                   'aria-label': 'description',\r\n                                   readOnly: true,\r\n                               }}\r\n                           />\r\n                       }\r\n                        <br/>\r\n                       {\r\n                           router.query.id==='new'||data.route.status==='создан'?\r\n                               <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                    <InputLabel>Экспедитор</InputLabel>\r\n                                    <Select value={employment._id} onChange={handleEmployment}>\r\n                                        {employments.map((element)=>\r\n                                            <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                        )}\r\n                                    </Select>\r\n                                </FormControl>\r\n                               :\r\n                               <TextField\r\n                                   label='Экспедитор'\r\n                                   value={employment.name}\r\n                                   className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                   inputProps={{\r\n                                       'aria-label': 'description',\r\n                                       readOnly: true,\r\n                                   }}\r\n                               />\r\n                       }\r\n                        <br/>\r\n                        <TextField\r\n                            className={isMobileApp?classes.inputM:classes.inputDF}\r\n                            label='Дата'\r\n                            type='date'\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            value={dateStart}\r\n                            inputProps={{\r\n                                'aria-label': 'description',\r\n                                readOnly: !(router.query.id==='new'||data.route.status==='создан'),\r\n                            }}\r\n                            onChange={ event => setDateStart(event.target.value) }\r\n                        />\r\n                       <br/>\r\n                       <div style={{color: breakGeoRoute?'red':'#ffb300'}} onClick={()=>{\r\n                           setMiniDialog('Маршрут', <GeoRoute invoices={invoices}/>, true)\r\n                           showMiniDialog(true)\r\n                       }} className={classes.geo}>{breakGeoRoute?'Маршрут неполный':'Просмотреть маршрут'}</div>\r\n                       <br/>\r\n                       <div style={{ justifyContent: 'center' }} className={classes.row}>\r\n                           <div style={{background: selectType==='Все'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Все')}} className={classes.selectType}>\r\n                               Все\r\n                           </div>\r\n                           <div style={{background: selectType==='Свободные'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Свободные')}} className={classes.selectType}>\r\n                               Свободные\r\n                           </div>\r\n                           <div style={{background: selectType==='Выбраные'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Выбраные')}} className={classes.selectType}>\r\n                               Выбраные\r\n                           </div>\r\n                       </div>\r\n                       <br/>\r\n                       <div className={classes.listInvoices} style={{zoom: isMobileApp?0.83:1}}>\r\n                           {allInvoices?allInvoices.map((element, idx)=> {\r\n                               return (\r\n                                   <div key={idx} className={classes.row}>\r\n                                       {['обработка', 'принят'].includes(element.orders[0].status)&&!element.confirmationForwarder?\r\n                                           <Checkbox checked={invoices.includes(element)} onChange={() => {\r\n                                               if (!invoices.includes(element)) {\r\n                                                   invoices.push(element)\r\n                                                   unselectedInvoices.splice(unselectedInvoices.indexOf(element), 1)\r\n                                                   cancelInvoices.splice(cancelInvoices.indexOf(element), 1)\r\n                                               } else {\r\n                                                   invoices.splice(invoices.indexOf(element), 1)\r\n                                                   unselectedInvoices.push(element)\r\n                                                   cancelInvoices.push(element)\r\n                                               }\r\n                                               setInvoices([...invoices])\r\n                                           }}\r\n                                           />:null}\r\n                                       <CardOrder getInvoices={getInvoices} route={data.route._id} element={element}/>\r\n                                   </div>\r\n                               )\r\n                           }):null}\r\n                       </div>\r\n                       <div className={isMobileApp?classes.bottomRouteM:classes.bottomRouteD}>\r\n                           {\r\n                               router.query.id==='new'?\r\n                                   <Button onClick={async()=>{\r\n                                       if (dateStart&&employment._id&&organization._id) {\r\n                                           const action = async() => {\r\n                                               if (employment._id!==undefined&&dateStart) {\r\n                                                   invoices = invoices.map(element=>element._id)\r\n                                                   await addRoute({\r\n                                                       invoices: invoices,\r\n                                                       employment: employment._id,\r\n                                                       dateStart: new Date(dateStart)\r\n                                                   })\r\n                                                   Router.push('/routes')\r\n                                               }\r\n                                           }\r\n                                           setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                           showMiniDialog(true)\r\n                                       } else {\r\n                                           showSnackBar('Заполните все поля')\r\n                                       }\r\n                                   }} size='small' color='primary'>\r\n                                       Добавить\r\n                                   </Button>\r\n                                   :\r\n                                   <>\r\n                                   <Button onClick={async()=>{\r\n                                       const action = async() => {\r\n                                           let editElement = {_id: data.route._id}\r\n                                           if(employment._id!==data.route.employment._id&&data.route.status==='создан')editElement.employment = employment._id;\r\n                                           if(dateStart&&data.route.status==='создан')editElement.dateStart = new Date(dateStart);\r\n                                           editElement.invoices = invoices.map(element=>element._id);\r\n                                           if(cancelInvoices.length>0)editElement.cancelInvoices = cancelInvoices.map(element=>element._id);\r\n                                           await setRoute(editElement)\r\n                                           getInvoices()\r\n                                       }\r\n                                       setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                       showMiniDialog(true)\r\n                                   }} size='small' color='primary'>\r\n                                       Сохранить\r\n                                   </Button>\r\n                                   {['организация', 'менеджер', 'admin'].includes(profile.role)&&data.route.status==='создан'?\r\n                                       <>\r\n                                       <Button onClick={async()=>{\r\n                                           const action = async() => {\r\n                                                await deleteRoute([data.route._id])\r\n                                               Router.push('/routes')\r\n                                           }\r\n                                           setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                           showMiniDialog(true)\r\n                                       }} size='small' color='primary'>\r\n                                           Удалить\r\n                                       </Button>\r\n                                       </>\r\n                                       :\r\n                                       null\r\n                                   }\r\n                                   </>\r\n                           }\r\n                       </div>\r\n                    </>\r\n                    :'Ничего не найдено'}\r\n                    <br/>\r\n                </CardContent>\r\n            </Card>\r\n        </App>\r\n    )\r\n})\r\n\r\nRoute.getInitialProps = async function(ctx) {\r\n    if(!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role))\r\n        if(ctx.res) {\r\n            ctx.res.writeHead(302, {\r\n                Location: '/'\r\n            })\r\n            ctx.res.end()\r\n        } else\r\n                Router.push('/')\r\n    return {\r\n        data: {\r\n            ...ctx.query.id!=='new'?await getRoute({_id: ctx.query.id}):{route: {invoices: [], employment: {}, status: '', dateStart: null, dateEnd: null, number: ''}},\r\n            ...await getOrganizations({search: '', sort: 'name', filter: ''}),\r\n        }\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        app: state.app,\r\n        user: state.user,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Route);"]},"metadata":{},"sourceType":"module"}