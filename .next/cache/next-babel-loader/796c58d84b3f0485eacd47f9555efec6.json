{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { cancelOrders, approveOrders } from '../../src/gql/order';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport * as userActions from '../../redux/actions/user';\nimport Button from '@material-ui/core/Button';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nimport moment from 'moment';\nimport dynamic from 'next/dynamic';\nconst Confirmation = dynamic(() => import('./Confirmation'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./Confirmation')],\n    modules: ['./Confirmation']\n  }\n});\nconst Order = React.memo(props => {\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    profile\n  } = props.user;\n  const {\n    showMiniDialog,\n    setMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    classes,\n    element,\n    setList,\n    route,\n    getInvoices\n  } = props;\n  const width = isMobileApp ? window.innerWidth - 126 : 500;\n  return __jsx(\"div\", {\n    className: classes.column,\n    style: {\n      width: width\n    }\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0417\\u0430\\u043A\\u0430\\u0437 \\u2116:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.number)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.orders[0].status === 'принят' && (element.confirmationForwarder || element.confirmationClient) ? route ? element.confirmationForwarder ? 'выполнен' : element.orders[0].status : element.confirmationClient ? 'выполнен' : element.confirmationForwarder ? 'доставлен' : element.orders[0].status : element.orders[0].status)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0412\\u0440\\u0435\\u043C\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430: \\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, moment(element.updatedAt).format('DD.MM.YYYY HH:mm'))), __jsx(\"a\", {\n    href: `/client/${element.client.user._id}`,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0430\\u0442\\u0435\\u043B\\u044C:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.client.name))), __jsx(\"a\", {\n    href: `/organization/${element.orders[0].item.organization._id}`,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041F\\u043E\\u0441\\u0442\\u0430\\u0432\\u0449\\u0438\\u043A:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.orders[0].item.organization.name))), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0421\\u0443\\u043C\\u043C\\u0430:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.allPrice, \"\\xA0\\u0441\\u043E\\u043C\")), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0421\\u043F\\u043E\\u0441\\u043E\\u0431 \\u043E\\u043F\\u043B\\u0430\\u0442\\u044B:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.paymentMethod)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.info)), __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.column\n  }, __jsx(\"b\", null, \"\\u0422\\u043E\\u0432\\u0430\\u0440\\u044B:\"), __jsx(\"br\", null), __jsx(\"br\", null), element.orders.map((order, idx) => __jsx(\"div\", {\n    key: idx,\n    className: classes.column\n  }, __jsx(\"a\", {\n    href: `/item/${order.item._id}`,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0422\\u043E\\u0432\\u0430\\u0440:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, order.item.name))), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, order.count, \"\\xA0\\u0448\\u0442\")), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041E\\u0431\\u0449\\u0430\\u044F \\u0441\\u0442\\u043E\\u0438\\u043C\\u043E\\u0441\\u0442\\u044C:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, order.allPrice, \"\\xA0\\u0441\\u043E\\u043C\")), __jsx(\"br\", null)))), __jsx(\"div\", null, profile.role === 'client' && 'принят' === element.orders[0].status && !element.confirmationClient || ['менеджер', 'организация'].includes(profile.role) && 'принят' === element.orders[0].status && !element.confirmationForwarder || profile.role === 'admin' ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => {\n      const action = async () => {\n        let invoices = (await approveOrders({\n          route: route,\n          invoices: [element._id]\n        })).invoices;\n        if (setList) setList(invoices);\n        if (getInvoices) getInvoices();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0430\\u0437 \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\") : null, profile.role === 'client' && element.orders[0].status === 'обработка' || ['менеджер', 'организация'].includes(profile.role) && ['обработка', 'принят'].includes(element.orders[0].status) && !element.confirmationForwarder || profile.role === 'admin' ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => {\n      let _id = element.orders.map(order => order._id);\n\n      const action = async () => {\n        let invoices = (await cancelOrders({\n          _id: _id\n        })).invoices;\n        if (setList) setList(invoices);\n        if (getInvoices) getInvoices();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n    },\n    className: classes.button\n  }, \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u0437\\u0430\\u043A\\u0430\\u0437\") : null, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      showMiniDialog(false);\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\")));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Order));","map":null,"metadata":{},"sourceType":"module"}