{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getEmployment, setEmployments, onoffEmployment, addEmployment, deleteEmployment } from '../../src/gql/employment';\nimport organizationStyle from '../../src/styleMUI/employment/employment';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Remove from '@material-ui/icons/Remove';\nimport { useRouter } from 'next/router';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { getOrganizations } from '../../src/gql/organization';\nimport Router from 'next/router';\nimport * as userActions from '../../redux/actions/user';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Confirmation from '../../components/dialog/Confirmation';\nimport { urlMain } from '../../redux/constants/other';\nconst Client = React.memo(props => {\n  const {\n    profile\n  } = props.user;\n  const classes = organizationStyle();\n  const {\n    data\n  } = props;\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  let {\n    0: status,\n    1: setStatus\n  } = useState(data.employment !== null ? data.employment.user.status : '');\n  let {\n    0: name,\n    1: setName\n  } = useState(data.employment !== null ? data.employment.name : '');\n  let {\n    0: email,\n    1: setEmail\n  } = useState(data.employment !== null ? data.employment.email : '');\n  let {\n    0: phone,\n    1: setPhone\n  } = useState(data.employment ? data.employment.phone : []);\n\n  let addPhone = () => {\n    phone = [...phone, ''];\n    setPhone(phone);\n  };\n\n  let editPhone = (event, idx) => {\n    phone[idx] = event.target.value;\n    setPhone([...phone]);\n  };\n\n  let deletePhone = idx => {\n    phone.splice(idx, 1);\n    setPhone([...phone]);\n  };\n\n  let {\n    0: login,\n    1: setLogin\n  } = useState(data.employment ? data.employment.user.login : '');\n  let {\n    0: organization,\n    1: setOrganization\n  } = useState(data.employment !== null ? data.employment.organization : {});\n\n  let handleOrganization = event => {\n    setOrganization({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: role,\n    1: setRole\n  } = useState(data.employment !== null ? data.employment.user.role : '');\n\n  let handleRole = event => {\n    setRole(event.target.value);\n  };\n\n  let {\n    0: password,\n    1: setPassword\n  } = useState('');\n\n  let handlePassword = event => {\n    setPassword(event.target.value);\n  };\n\n  let {\n    0: hide,\n    1: setHide\n  } = useState('password');\n\n  let handleHide = () => {\n    setHide(!hide);\n  };\n\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const router = useRouter();\n  const {\n    logout\n  } = props.userActions;\n  let roles = ['организация', 'менеджер', 'экспедитор'];\n  return __jsx(App, {\n    filters: data.filterSubCategory,\n    sorts: data.sortSubCategory,\n    pageName: data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено'\n  }, __jsx(Head, null, __jsx(\"title\", null, data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено'), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\"\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: data.employment !== null ? router.query.id === 'new' ? 'Добавить' : data.employment.name : 'Ничего не найдено'\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"\\u0410\\u0437\\u044B\\u043A \\u2013 \\u044D\\u0442\\u043E \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043F\\u043B\\u0430\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430 \\u0434\\u043B\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043E\\u043F\\u0442\\u043E\\u043C, \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043D\\u0430\\u044F \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u0430\\u043B\\u043E\\u0433\\u043E \\u0438 \\u0441\\u0440\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.  \\u041E\\u043D\\u0430 \\u043E\\u0431\\u044A\\u0435\\u0434\\u0438\\u043D\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0438\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438 \\u0442\\u043E\\u0440\\u0433\\u043E\\u0432\\u044B\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u043C\\u0443\\u044E, \\u0441\\u043E\\u043A\\u0440\\u0430\\u0449\\u0430\\u044F \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u044B \\u0438 \\u043F\\u043E\\u0432\\u044B\\u0448\\u0430\\u044F \\u043F\\u0440\\u043E\\u0434\\u0430\\u0436\\u0438. \\u0410\\u0437\\u044B\\u043A \\u043F\\u0440\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044F\\u0435\\u0442 \\u0441\\u0432\\u043E\\u0438\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C \\u043C\\u043E\\u0449\\u043D\\u044B\\u0435 \\u0442\\u0435\\u0445\\u043D\\u043E\\u043B\\u043E\\u0433\\u0438\\u0438 \\u0434\\u043B\\u044F \\u043C\\u0430\\u0441\\u0448\\u0442\\u0430\\u0431\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442\\u0438\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0431\\u0438\\u0437\\u043D\\u0435\\u0441\\u0430.\"\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: `${urlMain}/static/512x512.png`\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `${urlMain}/employment/${router.query.id}`\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: `${urlMain}/employment/${router.query.id}`\n  })), __jsx(Card, {\n    className: classes.page\n  }, __jsx(CardContent, {\n    className: isMobileApp ? classes.column : classes.row,\n    style: isMobileApp ? {} : {\n      justifyContent: 'start',\n      alignItems: 'flex-start'\n    }\n  }, data.employment !== null ? profile.role === 'admin' || profile.role === 'организация' || profile._id === data.employment.user._id ? __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(TextField, {\n    label: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n    value: login,\n    className: classes.input,\n    onChange: event => {\n      setLogin(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(Input, {\n    placeholder: router.query.id === 'new' ? 'Пароль' : 'Новый пароль',\n    type: hide ? 'password' : 'text',\n    value: password,\n    onChange: handlePassword,\n    className: classes.input,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"Toggle password visibility\",\n      onClick: handleHide\n    }, hide ? __jsx(VisibilityOff, null) : __jsx(Visibility, null)))\n  }), __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: classes.input,\n    onChange: event => {\n      setName(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), phone ? phone.map((element, idx) => __jsx(\"div\", {\n    key: idx\n  }, __jsx(FormControl, {\n    className: classes.input\n  }, __jsx(InputLabel, null, \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D. \\u0424\\u043E\\u0440\\u043C\\u0430\\u0442: +996555780861\"), __jsx(Input, {\n    placeholder: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D. \\u0424\\u043E\\u0440\\u043C\\u0430\\u0442: +996555780861\",\n    value: element,\n    className: classes.input,\n    onChange: event => {\n      editPhone(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deletePhone(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  })))) : null, __jsx(Button, {\n    onClick: async () => {\n      addPhone();\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"email\",\n    value: email,\n    className: classes.input,\n    onChange: event => {\n      setEmail(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), router.query.id === 'new' && profile.role === 'admin' ? __jsx(FormControl, {\n    className: classes.input\n  }, __jsx(InputLabel, null, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Select, {\n    value: organization._id,\n    onChange: handleOrganization\n  }, data.organizations.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name\n  }, element.name)))) : router.query.id !== 'new' ? __jsx(TextField, {\n    label: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n    value: organization.name,\n    className: classes.input,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    }\n  }) : null, __jsx(FormControl, {\n    className: classes.input\n  }, __jsx(InputLabel, null, \"\\u0420\\u043E\\u043B\\u044C\"), __jsx(Select, {\n    value: role,\n    onChange: handleRole,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: profile._id === data.employment.user._id || !['admin', 'организация'].includes(profile.role)\n    }\n  }, roles.map(element => {\n    //if(element!=='организация'||profile.role=='admin')\n    return __jsx(MenuItem, {\n      key: element,\n      value: element\n    }, element);\n  }))), __jsx(\"div\", {\n    className: classes.row\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick: async () => {\n      if (name.length > 0 && email.length > 0 && password.length > 0 && phone.length > 0 && role.length > 0 && organization._id !== undefined) {\n        const action = async () => {\n          await addEmployment({\n            name: name,\n            email: email,\n            phone: phone,\n            login: login,\n            password: password,\n            role: role,\n            organization: organization._id\n          });\n          Router.push('/employments');\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: data.employment._id\n      };\n      if (name.length > 0 && name !== data.employment.name) editElement.name = name;\n      editElement.phone = phone;\n      if (login.length > 0 && login !== data.employment.user.login) editElement.login = login;\n      if (email.length > 0 && email !== data.employment.email) editElement.email = email;\n      if (password.length > 0) editElement.newPass = password;\n      if (role.length > 0 && role !== data.employment.role) editElement.role = role;\n\n      const action = async () => {\n        await setEmployments(editElement);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), profile._id !== data.employment.user._id && ['admin', 'организация'].includes(profile.role) ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await onoffEmployment([data.employment._id]);\n        setStatus(status === 'active' ? 'deactive' : 'active');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, status === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await deleteEmployment([data.employment._id]);\n        Router.push('/employments');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null, profile._id === data.employment.user._id ? __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        logout(true);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0412\\u044B\\u0439\\u0442\\u0438\") : null)))) : 'Ничего не найдено' : 'Ничего не найдено')));\n});\n\nClient.getInitialProps = async function (ctx) {\n  if (!['организация', 'менеджер', 'admin', 'экспедитор'].includes(ctx.store.getState().user.profile.role)) if (ctx.res) {\n    ctx.res.writeHead(302, {\n      Location: '/'\n    });\n    ctx.res.end();\n  } else Router.push('/');\n  return {\n    data: _objectSpread({}, ctx.query.id !== 'new' ? await getEmployment({\n      _id: ctx.query.id\n    }) : {\n      employment: {\n        name: '',\n        email: '',\n        user: {\n          phone: '',\n          status: '',\n          role: ''\n        },\n        organization: {\n          _id: ''\n        }\n      }\n    }, (await getOrganizations({\n      search: '',\n      sort: 'name',\n      filter: ''\n    })))\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);","map":null,"metadata":{},"sourceType":"module"}