{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nimport { setCountBasket } from '../../redux/actions/app';\nexport const getBasket = async () => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      query: gql`\n                    query{\n                        baskets {\n                            _id\n                            createdAt\n                            item \n                                {\n                                    _id \n                                    name \n                                    stock \n                                    image \n                                    price\n                                    organization\n                                        {_id name minimumOrder}\n                                }\n                            count\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getCountBasket = async () => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res;\n    console.log(new SingletonStore().getStore().getState().user.authenticated);\n    if (new SingletonStore().getStore().getState().user.authenticated) res = await client.query({\n      query: gql`\n                    query {\n                        countBasket \n                    }`\n    });else if (localStorage.basket) {\n      let basket = JSON.parse(localStorage.basket);\n      res = {\n        data: {\n          countBasket: basket.length\n        }\n      };\n    }\n    new SingletonStore().getStore().dispatch(setCountBasket(res.data.countBasket));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteBasket = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteBasket(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    await getCountBasket();\n    return await getBasket(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addBasket = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($item: ID!, $count: Int!) {\n                        addBasket(item: $item, count: $count) {\n                             data\n                        }\n                    }`\n    });\n    await getCountBasket();\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setBasket = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: ID!, $count: Int!) {\n                        setBasket(_id: $_id, count: $count) {\n                             data\n                        }\n                    }`\n    });\n    await getCountBasket();\n    return await getBasket(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\basket.js"],"names":["gql","SingletonApolloClient","SingletonStore","setCountBasket","getBasket","client","getClient","res","query","data","err","console","error","getCountBasket","log","getStore","getState","user","authenticated","localStorage","basket","JSON","parse","countBasket","length","dispatch","deleteBasket","ids","mutate","variables","_id","mutation","app","addBasket","element","setBasket"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\nimport {\r\n    setCountBasket\r\n} from '../../redux/actions/app'\r\n\r\nexport const getBasket = async()=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                query: gql`\r\n                    query{\r\n                        baskets {\r\n                            _id\r\n                            createdAt\r\n                            item \r\n                                {\r\n                                    _id \r\n                                    name \r\n                                    stock \r\n                                    image \r\n                                    price\r\n                                    organization\r\n                                        {_id name minimumOrder}\r\n                                }\r\n                            count\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getCountBasket = async()=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res;\r\n        console.log(new SingletonStore().getStore().getState().user.authenticated)\r\n        if(new SingletonStore().getStore().getState().user.authenticated)\r\n            res = await client.query({\r\n                query : gql`\r\n                    query {\r\n                        countBasket \r\n                    }`\r\n            })\r\n        else if(localStorage.basket) {\r\n            let basket = JSON.parse(localStorage.basket)\r\n            res = { data: { countBasket: basket.length}}\r\n        }\r\n        new SingletonStore().getStore().dispatch(setCountBasket(res.data.countBasket))\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteBasket = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteBasket(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        await getCountBasket()\r\n        return await getBasket(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addBasket = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($item: ID!, $count: Int!) {\r\n                        addBasket(item: $item, count: $count) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        await getCountBasket()\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setBasket = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $count: Int!) {\r\n                        setBasket(_id: $_id, count: $count) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        await getCountBasket()\r\n        return await getBasket(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}