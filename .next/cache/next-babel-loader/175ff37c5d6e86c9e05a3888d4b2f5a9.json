{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addOrders } from '../../src/gql/order';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport * as userActions from '../../redux/actions/user';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Router from 'next/router';\nimport Confirmation from './Confirmation';\nimport Link from 'next/link';\nconst BuyBasket = React.memo(props => {\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    client,\n    allPrice,\n    organization,\n    bonus\n  } = props;\n  const {\n    showMiniDialog,\n    setMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  const {\n    classes\n  } = props;\n  const width = isMobileApp ? window.innerWidth - 144 : 500;\n  let {\n    0: address,\n    1: setAddress\n  } = useState([]);\n  let {\n    0: coment,\n    1: setComent\n  } = useState('');\n\n  let handleComent = event => {\n    setComent(event.target.value);\n  };\n\n  let {\n    0: paymentMethod,\n    1: setPaymentMethod\n  } = useState('');\n  let {\n    0: useBonus,\n    1: setUseBonus\n  } = useState(false);\n  let paymentMethods = ['Наличные'];\n\n  let handlePaymentMethod = event => {\n    setPaymentMethod(event.target.value);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.main\n  }, __jsx(FormControl, {\n    component: \"fieldset\",\n    style: {\n      width: width\n    }\n  }, __jsx(FormLabel, {\n    component: \"legend\"\n  }, \"\\u0410\\u0434\\u0440\\u0435\\u0441\\u0430 \\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043A\\u0438\"), __jsx(FormGroup, null, client.address.map((element, idx) => __jsx(FormControlLabel, {\n    key: idx,\n    onChange: e => {\n      if (e.target.checked) address.push(element);else {\n        address.splice(address.indexOf(element), 1);\n      }\n      setAddress([...address]);\n    },\n    control: __jsx(Checkbox, {\n      value: idx\n    }),\n    label: element[0]\n  })))), __jsx(\"br\", null), __jsx(Link, {\n    href: 'client/[id]',\n    as: `/client/${client.user._id}`,\n    style: {\n      width: width\n    }\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0430\\u0434\\u0440\\u0435\\u0441\"), __jsx(\"br\", null), __jsx(Input, {\n    style: {\n      width: width\n    },\n    placeholder: \"\\u041A\\u043E\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439\",\n    value: coment,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: handleComent,\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"br\", null), __jsx(FormControl, {\n    style: {\n      width: width\n    },\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u0421\\u043F\\u043E\\u0441\\u043E\\u0431 \\u043E\\u043F\\u043B\\u0430\\u0442\\u044B\"), __jsx(Select, {\n    value: paymentMethod,\n    onChange: handlePaymentMethod\n  }, paymentMethods.map(element => __jsx(MenuItem, {\n    key: element,\n    value: element\n  }, element)))), __jsx(\"br\", null), organization.minimumOrder > 0 ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.itogo\n  }, __jsx(\"b\", null, \"\\u041C\\u0438\\u043D\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u044B\\u0439 \\u0437\\u0430\\u043A\\u0430\\u0437:\"), ` ${organization.minimumOrder} сом`)) : null, bonus.addedBonus && bonus.addedBonus > 0 ? __jsx(FormControlLabel, {\n    style: {\n      width: width\n    },\n    onChange: e => {\n      setUseBonus(e.target.checked);\n    },\n    control: __jsx(Checkbox, null),\n    label: `Использовать бонус ${bonus.addedBonus} сом`\n  }) : null, __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.itogo\n  }, __jsx(\"b\", null, \"\\u0418\\u0442\\u043E\\u0433\\u043E:\"), ` ${useBonus ? allPrice * address.length - bonus.addedBonus : allPrice * address.length} сом`), __jsx(\"br\", null), __jsx(\"div\", null, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: async () => {\n      if (organization.minimumOrder === 0 || organization.minimumOrder < allPrice) {\n        if (paymentMethod.length > 0 && address.length > 0) {\n          const action = async () => {\n            await addOrders({\n              info: coment,\n              usedBonus: useBonus,\n              paymentMethod: paymentMethod,\n              address: address,\n              organization: organization._id\n            });\n            Router.push('/orders');\n            showMiniDialog(false);\n          };\n\n          setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n            action: action\n          }));\n        } else showSnackBar('Заполните все поля');\n      } else {\n        showSnackBar('Сумма заказа должна быть выше минимальной');\n      }\n    },\n    className: classes.button\n  }, \"\\u041A\\u0443\\u043F\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      showMiniDialog(false);\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\")));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(BuyBasket));","map":null,"metadata":{},"sourceType":"module"}