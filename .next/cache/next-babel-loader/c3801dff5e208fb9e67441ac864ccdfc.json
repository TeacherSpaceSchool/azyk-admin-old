{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport cardEmploymentStyle from '../../src/styleMUI/employment/cardEmployment.js';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport dynamic from 'next/dynamic';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport { onoffEmployment, deleteEmployment } from '../../src/gql/employment';\nvar Confirmation = dynamic(function () {\n  return import('../../components/dialog/Confirmation');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../../components/dialog/Confirmation')];\n    },\n    modules: ['../../components/dialog/Confirmation']\n  }\n});\nvar CardEmployment = React.memo(function (props) {\n  var classes = cardEmploymentStyle();\n  var element = props.element,\n      setList = props.setList;\n  var isMobileApp = props.app.isMobileApp;\n  var profile = props.user.profile;\n  var _props$mini_dialogAct = props.mini_dialogActions,\n      setMiniDialog = _props$mini_dialogAct.setMiniDialog,\n      showMiniDialog = _props$mini_dialogAct.showMiniDialog;\n\n  var _useState = useState(element !== undefined ? element.user.status : ''),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  return __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD\n  }, __jsx(CardActionArea, null, __jsx(Link, {\n    href: \"/employment/[id]\",\n    as: \"/employment/\".concat(element.user._id)\n  }, __jsx(CardContent, null, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0418\\u043C\\u044F:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.name)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.user.phone)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.organization.name)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0420\\u043E\\u043B\\u044C:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.user.role))))), (profile.role === 'admin' || profile.role === 'организация') && profile._id !== element.user._id ? __jsx(CardActions, null, __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return onoffEmployment([element._id]);\n\n                        case 2:\n                          setStatus(status === 'active' ? 'deactive' : 'active');\n\n                        case 3:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function action() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, status === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref4 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3() {\n                  var list;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return deleteEmployment([element._id]);\n\n                        case 2:\n                          list = _context3.sent.employments;\n                          setList(list);\n\n                        case 4:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function action() {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    })),\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardEmployment);","map":null,"metadata":{},"sourceType":"module"}