{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { cancelOrders, approveOrders, setOrder } from '../../src/gql/order';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport * as userActions from '../../redux/actions/user';\nimport Button from '@material-ui/core/Button';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nimport { pdDDMMYYHHMM } from '../../src/lib';\nimport Confirmation from './Confirmation';\nimport Geo from '../../components/dialog/Geo';\nimport IconButton from '@material-ui/core/IconButton';\nimport CancelIcon from '@material-ui/icons/Cancel';\nconst Order = React.memo(props => {\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    profile\n  } = props.user;\n  const {\n    showMiniDialog,\n    setMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    classes,\n    element,\n    setList,\n    route,\n    getInvoices\n  } = props;\n  let {\n    0: orders,\n    1: setOrders\n  } = useState(element.orders);\n  let {\n    0: allPrice,\n    1: setAllPrice\n  } = useState(element.allPrice);\n  const width = isMobileApp ? window.innerWidth - 144 : 500;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n\n  let canculateAllPrice = () => {\n    allPrice = 0;\n\n    for (let i = 0; i < orders.length; i++) {\n      allPrice += orders[i].allPrice;\n    }\n\n    if (element.usedBonus && element.usedBonus > 0) allPrice -= element.usedBonus;\n    setAllPrice(allPrice);\n  };\n\n  let increment = idx => {\n    orders[idx].count += 1;\n    orders[idx].allPrice = orders[idx].count * (orders[idx].item.stock === 0 || orders[idx].item.stock === undefined ? orders[idx].item.price : orders[idx].item.stock);\n    setOrders([...orders]);\n    canculateAllPrice();\n  };\n\n  let decrement = idx => {\n    if (orders[idx].count > 1) {\n      orders[idx].count -= 1;\n      orders[idx].allPrice = orders[idx].count * (orders[idx].item.stock === 0 || orders[idx].item.stock === undefined ? orders[idx].item.price : orders[idx].item.stock);\n      setOrders([...orders]);\n      canculateAllPrice();\n    }\n  };\n\n  let remove = idx => {\n    if (orders.length > 1) {\n      orders.splice(idx, 1);\n      setOrders([...orders]);\n      canculateAllPrice();\n    } else showSnackBar('Товары не могут отсутствовать в заказе');\n  };\n\n  return __jsx(\"div\", {\n    className: classes.column,\n    style: {\n      width: width\n    }\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0417\\u0430\\u043A\\u0430\\u0437 \\u2116:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.number)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.orders[0].status === 'принят' && (element.confirmationForwarder || element.confirmationClient) ? element.confirmationClient ? 'подтвержден клиентом' : element.confirmationForwarder ? 'доставлен поставщиком' : element.orders[0].status : element.orders[0].status)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0410\\u0434\\u0440\\u0435\\u0441: \\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.address[0])), __jsx(\"div\", {\n    className: classes.geo,\n    style: {\n      color: element.address[1] ? '#ffb300' : 'red'\n    },\n    onClick: () => {\n      setMiniDialog('Геолокация', __jsx(Geo, {\n        geo: element.address[1]\n      }), true);\n      showMiniDialog(true);\n    }\n  }, element.address[1] ? 'Посмотреть геолокацию' : 'Геолокация не задана'), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0412\\u0440\\u0435\\u043C\\u044F \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430: \\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, pdDDMMYYHHMM(new Date(element.createdAt)))), element.dateDelivery ? __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0412\\u0440\\u0435\\u043C\\u044F \\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043A\\u0438:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, pdDDMMYYHHMM(new Date(element.dateDelivery)))) : null, __jsx(\"a\", {\n    href: `/client/${element.client.user._id}`,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0430\\u0442\\u0435\\u043B\\u044C:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.client.name))), __jsx(\"a\", {\n    href: `/organization/${element.orders[0].item.organization._id}`,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u041F\\u043E\\u0441\\u0442\\u0430\\u0432\\u0449\\u0438\\u043A:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.orders[0].item.organization.name))), element.usedBonus && element.usedBonus > 0 ? __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0418\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u043D\\u043D\\u044B\\u0439 \\u0431\\u043E\\u043D\\u0443\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.usedBonus, \"\\xA0\\u0441\\u043E\\u043C\")) : null, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0421\\u0443\\u043C\\u043C\\u0430:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, allPrice, \"\\xA0\\u0441\\u043E\\u043C\")), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0421\\u043F\\u043E\\u0441\\u043E\\u0431 \\u043E\\u043F\\u043B\\u0430\\u0442\\u044B:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.paymentMethod)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, element.info)), __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.column\n  }, __jsx(\"b\", null, \"\\u0422\\u043E\\u0432\\u0430\\u0440\\u044B:\"), orders.map((order, idx) => {\n    if (element.orders[0].status === 'обработка' && (profile.role === 'client' || ['менеджер', 'организация'].includes(profile.role) || profile.role === 'admin')) return __jsx(\"div\", {\n      key: idx,\n      className: classes.column\n    }, __jsx(\"div\", {\n      className: classes.row\n    }, __jsx(\"div\", {\n      className: classes.nameField\n    }, \"\\u0422\\u043E\\u0432\\u0430\\u0440:\\xA0\"), __jsx(\"a\", {\n      href: `/item/${order.item._id}`,\n      target: \"_blank\"\n    }, __jsx(\"div\", {\n      className: classes.value\n    }, order.item.name)), __jsx(IconButton, {\n      onClick: () => {\n        remove(idx);\n      },\n      color: \"primary\",\n      className: classes.button,\n      \"aria-label\": \"\\u0443\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n    }, __jsx(CancelIcon, {\n      style: {\n        height: 20,\n        width: 20\n      }\n    }))), __jsx(\"div\", {\n      className: classes.row\n    }, __jsx(\"div\", {\n      className: classes.nameField\n    }, \"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E:\\xA0\"), __jsx(\"div\", {\n      className: classes.counterbtn,\n      onClick: () => {\n        decrement(idx);\n      }\n    }, \"-\"), __jsx(\"div\", {\n      className: classes.value\n    }, order.count, \"\\xA0\\u0448\\u0442\"), __jsx(\"div\", {\n      className: classes.counterbtn,\n      onClick: () => {\n        increment(idx);\n      }\n    }, \"+\")), __jsx(\"div\", {\n      className: classes.row\n    }, __jsx(\"div\", {\n      className: classes.nameField\n    }, \"\\u041E\\u0431\\u0449\\u0430\\u044F \\u0441\\u0442\\u043E\\u0438\\u043C\\u043E\\u0441\\u0442\\u044C:\\xA0\"), __jsx(\"div\", {\n      className: classes.value\n    }, order.allPrice, \"\\xA0\\u0441\\u043E\\u043C\")), __jsx(\"br\", null));else return __jsx(\"div\", {\n      key: idx,\n      className: classes.column\n    }, __jsx(\"a\", {\n      href: `/item/${order.item._id}`,\n      target: \"_blank\"\n    }, __jsx(\"div\", {\n      className: classes.row\n    }, __jsx(\"div\", {\n      className: classes.nameField\n    }, \"\\u0422\\u043E\\u0432\\u0430\\u0440:\\xA0\"), __jsx(\"div\", {\n      className: classes.value\n    }, order.item.name))), __jsx(\"div\", {\n      className: classes.row\n    }, __jsx(\"div\", {\n      className: classes.nameField\n    }, \"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E:\\xA0\"), __jsx(\"div\", {\n      className: classes.value\n    }, order.count, \"\\xA0\\u0448\\u0442\")), __jsx(\"div\", {\n      className: classes.row\n    }, __jsx(\"div\", {\n      className: classes.nameField\n    }, \"\\u041E\\u0431\\u0449\\u0430\\u044F \\u0441\\u0442\\u043E\\u0438\\u043C\\u043E\\u0441\\u0442\\u044C:\\xA0\"), __jsx(\"div\", {\n      className: classes.value\n    }, order.allPrice, \"\\xA0\\u0441\\u043E\\u043C\")), __jsx(\"br\", null));\n  })), __jsx(\"div\", null, element.orders[0].status === 'обработка' && (profile.role === 'client' || ['менеджер', 'организация'].includes(profile.role) || profile.role === 'admin') ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => {\n      const action = async () => {\n        let sendOrders = orders.map(order => {\n          return {\n            _id: order._id,\n            count: order.count,\n            allPrice: order.allPrice,\n            status: order.status\n          };\n        });\n        let invoices = (await setOrder({\n          orders: sendOrders,\n          invoice: element._id\n        })).invoices;\n        if (setList) setList(invoices);\n        if (getInvoices) getInvoices();\n        showMiniDialog(false);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n    },\n    className: classes.button\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\") : null, profile.role === 'client' && 'принят' === element.orders[0].status && !element.confirmationClient || ['менеджер', 'организация'].includes(profile.role) && 'принят' === element.orders[0].status && !element.confirmationForwarder || profile.role === 'admin' ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => {\n      const action = async () => {\n        let invoices = (await approveOrders({\n          route: route,\n          invoices: [element._id]\n        })).invoices;\n        if (setList) setList(invoices);\n        if (getInvoices) getInvoices();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0430\\u0437 \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\") : null, profile.role === 'client' && element.orders[0].status === 'обработка' || ['менеджер', 'организация'].includes(profile.role) && ['обработка', 'принят'].includes(element.orders[0].status) && !element.confirmationForwarder || profile.role === 'admin' ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => {\n      let _id = element.orders.map(order => order._id);\n\n      const action = async () => {\n        let invoices = (await cancelOrders({\n          _id: _id,\n          invoice: element._id\n        })).invoices;\n        if (setList) setList(invoices);\n        if (getInvoices) getInvoices();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n    },\n    className: classes.button\n  }, \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u0437\\u0430\\u043A\\u0430\\u0437\") : null, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      showMiniDialog(false);\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\")));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Order));","map":null,"metadata":{},"sourceType":"module"}