{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\pages\\\\route\\\\[id].js\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState, useEffect } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getOrganizations } from '../../src/gql/organization';\nimport { getOrders } from '../../src/gql/order';\nimport { getRoute, setRoute, deleteRoute, addRoute } from '../../src/gql/route';\nimport { getEcspeditors } from '../../src/gql/employment';\nimport routeStyle from '../../src/styleMUI/route/route';\nimport { useRouter } from 'next/router';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CardOrder from '../../components/order/CardOrder';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport dynamic from 'next/dynamic';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Router from 'next/router';\nimport { pdDDMMYYYY } from '../../src/lib';\nconst Confirmation = dynamic(() => import('../../components/dialog/Confirmation'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../components/dialog/Confirmation')],\n    modules: ['../../components/dialog/Confirmation']\n  }\n});\nconst Route = React.memo(props => {\n  const {\n    profile,\n    authenticated\n  } = props.user;\n  if (!['организация', 'менеджер', 'admin', 'экспедитор'].includes(profile.role)) Router.push('/');\n  const classes = routeStyle();\n  const {\n    data\n  } = props;\n  const router = useRouter();\n  const {\n    isMobileApp\n  } = props.app;\n  let {\n    0: dateStart,\n    1: setDateStart\n  } = useState(data.route !== null ? pdDDMMYYYY(new Date(data.route.dateStart)) : null);\n  let {\n    0: dateEnd,\n    1: setDateEnd\n  } = useState(data.route !== null ? data.route.dateEnd : null);\n  let {\n    0: employment,\n    1: setEmployment\n  } = useState(data.route ? data.route.employment : {});\n\n  let handleEmployment = event => {\n    setEmployment({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: organization,\n    1: setOrganization\n  } = useState(router.query.id === 'new' ? {} : data.route.employment.organization);\n\n  let handleOrganization = event => {\n    setOrganization({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: invoices,\n    1: setInvoices\n  } = useState(data.route !== null ? data.route.invoices : []);\n  let {\n    0: cancelInvoices,\n    1: setCancelInvoices\n  } = useState([]);\n  let {\n    0: allInvoices,\n    1: setAllInvoices\n  } = useState([]);\n  let {\n    0: unselectedInvoices,\n    1: setUnselectedInvoices\n  } = useState([]);\n  let {\n    0: selectType,\n    1: setSelectType\n  } = useState('Все');\n  let {\n    0: employments,\n    1: setEmployments\n  } = useState([]);\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  useEffect(() => {\n    (async () => {\n      if (['организация', 'менеджер'].includes(profile.role) && router.query.id === 'new') {\n        let organization = data.organizations.filter(element => element._id === profile.organization);\n        setOrganization(organization[0]);\n      }\n    })();\n  }, [profile]);\n  useEffect(() => {\n    (async () => {\n      setUnselectedInvoices((await getOrders({\n        search: '',\n        sort: '-updatedAt',\n        filter: 'обработка'\n      })).invoices);\n    })();\n  }, []);\n  useEffect(() => {\n    (async () => {\n      if (router.query.id === 'new') setEmployment({});\n      setEmployments((await getEcspeditors({\n        _id: organization._id\n      })).ecspeditors);\n    })();\n  }, [organization]);\n  useEffect(() => {\n    (async () => {\n      if (selectType == 'Все') setAllInvoices([...invoices, ...unselectedInvoices]);else if (selectType == 'Свободные') setAllInvoices([...unselectedInvoices]);else if (selectType == 'Выбраные') setAllInvoices([...invoices]);\n    })();\n  }, [selectType, unselectedInvoices, invoices]);\n  const statusColor = {\n    'создан': 'orange',\n    'выполняется': 'blue',\n    'выполнен': 'green'\n  };\n\n  let getInvoices = async () => {\n    setUnselectedInvoices((await getOrders({\n      search: '',\n      sort: '-updatedAt',\n      filter: 'обработка'\n    })).invoices);\n    setCancelInvoices([]);\n    setInvoices((await getRoute({\n      _id: data.route._id\n    })).route.invoices);\n  };\n\n  return __jsx(App, {\n    pageName: data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, data.route ? router.query.id === 'new' ? 'Добавить' : data.route.number : 'Ничего не найдено')), __jsx(Card, {\n    className: isMobileApp ? classes.pageM : classes.pageD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, router.query.id === 'new' ? null : __jsx(\"div\", {\n    className: classes.status,\n    style: {\n      background: statusColor[data.route.status]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, data.route.status), __jsx(CardContent, {\n    className: classes.column,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, data.route ? __jsx(React.Fragment, null, router.query.id === 'new' ? null : __jsx(\"div\", {\n    className: classes.number,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, data.route.number), (router.query.id === 'new' || data.route.status === 'создан') && profile.role === 'admin' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Select, {\n    value: organization._id,\n    onChange: handleOrganization,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, data.organizations.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, element.name)))) : __jsx(TextField, {\n    label: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n    value: organization.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), router.query.id === 'new' || data.route.status === 'создан' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"\\u042D\\u043A\\u0441\\u043F\\u0435\\u0434\\u0438\\u0442\\u043E\\u0440\"), __jsx(Select, {\n    value: employment._id,\n    onChange: handleEmployment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, employments.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, element.name)))) : __jsx(TextField, {\n    label: \"\\u042D\\u043A\\u0441\\u043F\\u0435\\u0434\\u0438\\u0442\\u043E\\u0440\",\n    value: employment.name,\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), __jsx(TextField, {\n    className: isMobileApp ? classes.inputM : classes.inputDF,\n    label: \"\\u0414\\u0430\\u0442\\u0430\",\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: dateStart,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: !(router.query.id === 'new' || data.route.status === 'создан')\n    },\n    onChange: event => setDateStart(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      justifyContent: 'center'\n    },\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      background: selectType === 'Все' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Все');\n    },\n    className: classes.selectType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"\\u0412\\u0441\\u0435\"), __jsx(\"div\", {\n    style: {\n      background: selectType === 'Свободные' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Свободные');\n    },\n    className: classes.selectType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"\\u0421\\u0432\\u043E\\u0431\\u043E\\u0434\\u043D\\u044B\\u0435\"), __jsx(\"div\", {\n    style: {\n      background: selectType === 'Выбраные' ? '#ffb300' : '#ffffff'\n    },\n    onClick: () => {\n      setSelectType('Выбраные');\n    },\n    className: classes.selectType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u043D\\u044B\\u0435\")), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: classes.listInvoices,\n    style: {\n      zoom: isMobileApp ? 0.83 : 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, allInvoices ? allInvoices.map((element, idx) => {\n    return __jsx(\"div\", {\n      key: idx,\n      className: classes.row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, ['обработка', 'принят'].includes(element.orders[0].status) ? __jsx(Checkbox, {\n      checked: invoices.includes(element),\n      onChange: () => {\n        if (!invoices.includes(element)) {\n          invoices.push(element);\n          unselectedInvoices.splice(unselectedInvoices.indexOf(element), 1);\n          cancelInvoices.splice(cancelInvoices.indexOf(element), 1);\n        } else {\n          invoices.splice(invoices.indexOf(element), 1);\n          unselectedInvoices.push(element);\n          cancelInvoices.push(element);\n        }\n\n        setInvoices([...invoices]);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }) : null, __jsx(CardOrder, {\n      getInvoices: getInvoices,\n      route: data.route._id,\n      element: element,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }));\n  }) : null), __jsx(\"div\", {\n    className: isMobileApp ? classes.bottomRouteM : classes.bottomRouteD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick: async () => {\n      if (dateStart && employment._id && organization._id) {\n        const action = async () => {\n          if (employment._id !== undefined && dateStart) {\n            invoices = invoices.map(element => element._id);\n            await addRoute({\n              invoices: invoices,\n              employment: employment._id,\n              dateStart: new Date(dateStart)\n            });\n            Router.push('/routes');\n          }\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        let editElement = {\n          _id: data.route._id\n        };\n        if (employment._id !== data.route.employment._id && data.route.status === 'создан') editElement.employment = employment._id;\n        if (dateStart && data.route.status === 'создан') editElement.dateStart = new Date(dateStart);\n        editElement.invoices = invoices.map(element => element._id);\n        if (cancelInvoices.length > 0) editElement.cancelInvoices = cancelInvoices.map(element => element._id);\n        await setRoute(editElement);\n        getInvoices();\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), data.route.status === 'создан' ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await deleteRoute([data.route._id]);\n        Router.push('/routes');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null))) : 'Ничего не найдено', __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }))));\n});\n\nRoute.getInitialProps = async function (ctx) {\n  return {\n    data: _objectSpread({}, ctx.query.id !== 'new' ? await getRoute({\n      _id: ctx.query.id\n    }) : {\n      route: {\n        invoices: [],\n        employment: {},\n        status: '',\n        dateStart: null,\n        dateEnd: null,\n        number: ''\n      }\n    }, (await getOrganizations({\n      search: '',\n      sort: 'name',\n      filter: ''\n    })))\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Route);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\pages\\route\\[id].js"],"names":["Head","React","useState","useEffect","App","connect","getOrganizations","getOrders","getRoute","setRoute","deleteRoute","addRoute","getEcspeditors","routeStyle","useRouter","Card","CardContent","Checkbox","CardOrder","InputLabel","MenuItem","FormControl","Select","dynamic","bindActionCreators","mini_dialogActions","snackbarActions","TextField","Button","Router","pdDDMMYYYY","Confirmation","Route","memo","props","profile","authenticated","user","includes","role","push","classes","data","router","isMobileApp","app","dateStart","setDateStart","route","Date","dateEnd","setDateEnd","employment","setEmployment","handleEmployment","event","_id","target","value","name","organization","setOrganization","query","id","handleOrganization","invoices","setInvoices","cancelInvoices","setCancelInvoices","allInvoices","setAllInvoices","unselectedInvoices","setUnselectedInvoices","selectType","setSelectType","employments","setEmployments","setMiniDialog","showMiniDialog","showSnackBar","organizations","filter","element","search","sort","ecspeditors","statusColor","getInvoices","number","pageM","pageD","status","background","column","inputM","inputDF","map","readOnly","shrink","justifyContent","row","listInvoices","zoom","idx","orders","splice","indexOf","bottomRouteM","bottomRouteD","action","undefined","editElement","length","getInitialProps","ctx","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import Head from 'next/head';\r\nimport React, { useState, useEffect } from 'react';\r\nimport App from '../../layouts/App';\r\nimport { connect } from 'react-redux'\r\nimport { getOrganizations } from '../../src/gql/organization'\r\nimport { getOrders } from '../../src/gql/order'\r\nimport { getRoute, setRoute, deleteRoute, addRoute } from '../../src/gql/route'\r\nimport { getEcspeditors } from '../../src/gql/employment'\r\nimport routeStyle from '../../src/styleMUI/route/route'\r\nimport { useRouter } from 'next/router'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CardOrder from '../../components/order/CardOrder';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport dynamic from 'next/dynamic'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport * as snackbarActions from '../../redux/actions/snackbar'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Router from 'next/router'\r\nimport { pdDDMMYYYY } from '../../src/lib'\r\n\r\nconst Confirmation = dynamic(\r\n    () => import('../../components/dialog/Confirmation')\r\n)\r\n\r\nconst Route = React.memo((props) => {\r\n    const { profile, authenticated } = props.user;\r\n    if(!['организация', 'менеджер', 'admin', 'экспедитор'].includes(profile.role))\r\n        Router.push('/')\r\n    const classes = routeStyle();\r\n    const { data } = props;\r\n    const router = useRouter()\r\n    const { isMobileApp } = props.app;\r\n    let [dateStart, setDateStart] = useState(data.route!==null?pdDDMMYYYY(new Date(data.route.dateStart)):null);\r\n    let [dateEnd, setDateEnd] = useState(data.route!==null?data.route.dateEnd:null);\r\n    let [employment, setEmployment] = useState(data.route?data.route.employment:{});\r\n    let handleEmployment =  (event) => {\r\n        setEmployment({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [organization, setOrganization] = useState(router.query.id==='new'?{}:data.route.employment.organization);\r\n    let handleOrganization =  (event) => {\r\n        setOrganization({_id: event.target.value, name: event.target.name})\r\n    };\r\n    let [invoices, setInvoices] = useState(data.route!==null?data.route.invoices:[]);\r\n    let [cancelInvoices, setCancelInvoices] = useState([]);\r\n    let [allInvoices, setAllInvoices] = useState([]);\r\n    let [unselectedInvoices, setUnselectedInvoices] = useState([]);\r\n    let [selectType, setSelectType] = useState('Все');\r\n    let [employments, setEmployments] = useState([]);\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    const { showSnackBar } = props.snackbarActions;\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(['организация', 'менеджер'].includes(profile.role)&&router.query.id==='new'){\r\n                let organization = data.organizations.filter(element=>element._id===profile.organization)\r\n                setOrganization(organization[0])\r\n            }\r\n        })()\r\n    },[profile])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            setUnselectedInvoices((await getOrders({search: '', sort: '-updatedAt', filter: 'обработка'})).invoices)\r\n        })()\r\n    },[])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(router.query.id==='new')\r\n                setEmployment({})\r\n            setEmployments((await getEcspeditors({_id: organization._id})).ecspeditors)\r\n        })()\r\n    },[organization])\r\n    useEffect(()=>{\r\n        (async()=>{\r\n            if(selectType=='Все')\r\n                setAllInvoices([...invoices, ...unselectedInvoices])\r\n            else if(selectType=='Свободные')\r\n                setAllInvoices([...unselectedInvoices])\r\n            else if(selectType=='Выбраные')\r\n                setAllInvoices([...invoices])\r\n        })()\r\n    },[selectType, unselectedInvoices, invoices])\r\n    const statusColor = {\r\n        'создан': 'orange',\r\n        'выполняется': 'blue',\r\n        'выполнен': 'green',\r\n    }\r\n    let getInvoices = async ()=>{\r\n        setUnselectedInvoices((await getOrders({search: '', sort: '-updatedAt', filter: 'обработка'})).invoices)\r\n        setCancelInvoices([])\r\n        setInvoices((await getRoute({_id: data.route._id})).route.invoices)\r\n    }\r\n    return (\r\n        <App pageName={data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'}>\r\n            <Head>\r\n                <title>{data.route?router.query.id==='new'?'Добавить':data.route.number:'Ничего не найдено'}</title>\r\n            </Head>\r\n            <Card className={isMobileApp?classes.pageM:classes.pageD}>\r\n                {router.query.id==='new'?null:<div className={classes.status} style={{background: statusColor[data.route.status]}}>{data.route.status}</div>}\r\n                <CardContent className={classes.column}>\r\n                    {data.route?\r\n                       <>\r\n                       {router.query.id==='new'?null:<div className={classes.number}>{data.route.number}</div>}\r\n                       {(router.query.id==='new'||data.route.status==='создан')&&profile.role==='admin'?\r\n                           <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                <InputLabel>Организация</InputLabel>\r\n                                <Select value={organization._id}onChange={handleOrganization}>\r\n                                    {data.organizations.map((element)=>\r\n                                        <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                    )}\r\n                                </Select>\r\n                            </FormControl>\r\n                           :\r\n                           <TextField\r\n                               label='Организация'\r\n                               value={organization.name}\r\n                               className={isMobileApp?classes.inputM:classes.inputDF}\r\n                               inputProps={{\r\n                                   'aria-label': 'description',\r\n                                   readOnly: true,\r\n                               }}\r\n                           />\r\n                       }\r\n                        <br/>\r\n                       {\r\n                           router.query.id==='new'||data.route.status==='создан'?\r\n                               <FormControl className={isMobileApp?classes.inputM:classes.inputDF}>\r\n                                    <InputLabel>Экспедитор</InputLabel>\r\n                                    <Select value={employment._id} onChange={handleEmployment}>\r\n                                        {employments.map((element)=>\r\n                                            <MenuItem key={element._id} value={element._id} ola={element.name}>{element.name}</MenuItem>\r\n                                        )}\r\n                                    </Select>\r\n                                </FormControl>\r\n                               :\r\n                               <TextField\r\n                                   label='Экспедитор'\r\n                                   value={employment.name}\r\n                                   className={isMobileApp?classes.inputM:classes.inputDF}\r\n                                   inputProps={{\r\n                                       'aria-label': 'description',\r\n                                       readOnly: true,\r\n                                   }}\r\n                               />\r\n                       }\r\n                        <br/>\r\n                        <TextField\r\n                            className={isMobileApp?classes.inputM:classes.inputDF}\r\n                            label='Дата'\r\n                            type='date'\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            value={dateStart}\r\n                            inputProps={{\r\n                                'aria-label': 'description',\r\n                                readOnly: !(router.query.id==='new'||data.route.status==='создан'),\r\n                            }}\r\n                            onChange={ event => setDateStart(event.target.value) }\r\n                        />\r\n                       <br/>\r\n                       <div style={{ justifyContent: 'center' }} className={classes.row}>\r\n                           <div style={{background: selectType==='Все'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Все')}} className={classes.selectType}>\r\n                               Все\r\n                           </div>\r\n                           <div style={{background: selectType==='Свободные'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Свободные')}} className={classes.selectType}>\r\n                               Свободные\r\n                           </div>\r\n                           <div style={{background: selectType==='Выбраные'?'#ffb300':'#ffffff'}} onClick={()=>{setSelectType('Выбраные')}} className={classes.selectType}>\r\n                               Выбраные\r\n                           </div>\r\n                       </div>\r\n                       <br/>\r\n                       <div className={classes.listInvoices} style={{zoom: isMobileApp?0.83:1}}>\r\n                           {allInvoices?allInvoices.map((element, idx)=> {\r\n                               return (\r\n                                   <div key={idx} className={classes.row}>\r\n                                       {['обработка', 'принят'].includes(element.orders[0].status)?\r\n                                           <Checkbox checked={invoices.includes(element)} onChange={() => {\r\n                                               if (!invoices.includes(element)) {\r\n                                                   invoices.push(element)\r\n                                                   unselectedInvoices.splice(unselectedInvoices.indexOf(element), 1)\r\n                                                   cancelInvoices.splice(cancelInvoices.indexOf(element), 1)\r\n                                               } else {\r\n                                                   invoices.splice(invoices.indexOf(element), 1)\r\n                                                   unselectedInvoices.push(element)\r\n                                                   cancelInvoices.push(element)\r\n                                               }\r\n                                               setInvoices([...invoices])\r\n                                           }}\r\n                                           />:null}\r\n                                       <CardOrder getInvoices={getInvoices} route={data.route._id} element={element}/>\r\n                                   </div>\r\n                               )\r\n                           }):null}\r\n                       </div>\r\n                       <div className={isMobileApp?classes.bottomRouteM:classes.bottomRouteD}>\r\n                           {\r\n                               router.query.id==='new'?\r\n                                   <Button onClick={async()=>{\r\n                                       if (dateStart&&employment._id&&organization._id) {\r\n                                           const action = async() => {\r\n                                               if (employment._id!==undefined&&dateStart) {\r\n                                                   invoices = invoices.map(element=>element._id)\r\n                                                   await addRoute({\r\n                                                       invoices: invoices,\r\n                                                       employment: employment._id,\r\n                                                       dateStart: new Date(dateStart)\r\n                                                   })\r\n                                                   Router.push('/routes')\r\n                                               }\r\n                                           }\r\n                                           setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                           showMiniDialog(true)\r\n                                       } else {\r\n                                           showSnackBar('Заполните все поля')\r\n                                       }\r\n                                   }} size='small' color='primary'>\r\n                                       Добавить\r\n                                   </Button>\r\n                                   :\r\n                                   <>\r\n                                   <Button onClick={async()=>{\r\n                                       const action = async() => {\r\n                                           let editElement = {_id: data.route._id}\r\n                                           if(employment._id!==data.route.employment._id&&data.route.status==='создан')editElement.employment = employment._id;\r\n                                           if(dateStart&&data.route.status==='создан')editElement.dateStart = new Date(dateStart);\r\n                                           editElement.invoices = invoices.map(element=>element._id);\r\n                                           if(cancelInvoices.length>0)editElement.cancelInvoices = cancelInvoices.map(element=>element._id);\r\n                                           await setRoute(editElement)\r\n                                           getInvoices()\r\n                                       }\r\n                                       setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                       showMiniDialog(true)\r\n                                   }} size='small' color='primary'>\r\n                                       Сохранить\r\n                                   </Button>\r\n                                   {data.route.status==='создан'?\r\n                                       <>\r\n                                       <Button onClick={async()=>{\r\n                                           const action = async() => {\r\n                                                await deleteRoute([data.route._id])\r\n                                               Router.push('/routes')\r\n                                           }\r\n                                           setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                           showMiniDialog(true)\r\n                                       }} size='small' color='primary'>\r\n                                           Удалить\r\n                                       </Button>\r\n                                       </>\r\n                                       :\r\n                                       null\r\n                                   }\r\n                                   </>\r\n                           }\r\n                       </div>\r\n                    </>\r\n                    :'Ничего не найдено'}\r\n                    <br/>\r\n                </CardContent>\r\n            </Card>\r\n        </App>\r\n    )\r\n})\r\n\r\nRoute.getInitialProps = async function(ctx) {\r\n    return {\r\n        data: {\r\n            ...ctx.query.id!=='new'?await getRoute({_id: ctx.query.id}):{route: {invoices: [], employment: {}, status: '', dateStart: null, dateEnd: null, number: ''}},\r\n            ...await getOrganizations({search: '', sort: 'name', filter: ''}),\r\n        }\r\n    };\r\n};\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        app: state.app,\r\n        user: state.user,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n        snackbarActions: bindActionCreators(snackbarActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Route);"]},"metadata":{},"sourceType":"module"}