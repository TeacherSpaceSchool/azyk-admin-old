{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getItems = async ({\n  subCategory,\n  search,\n  sort,\n  filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        subCategory: subCategory,\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($subCategory: ID!,$search: String!, $sort: String!, $filter: String!) {\n                        items(subCategory: $subCategory, search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            subCategory\n                                {_id name}\n                            name\n                            status\n                            createdAt                  \n                            stock\n                            image\n                            info\n                            price\n                            reiting\n                            organization\n                                {_id name}\n                            hit\n                            latest\n                            favorite\n                            basket\n                        }\n                        sortItem {\n                            name\n                            field\n                        }\n                        filterItem {\n                           name\n                           value\n                        }\n                        subCategory(_id: $subCategory) {\n                           _id\n                           name\n                           category\n                                {_id name}\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getBrands = async ({\n  organization,\n  search,\n  sort,\n  filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        organization: organization,\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($organization: ID!,$search: String!, $sort: String!) {\n                        brands(organization: $organization, search: $search, sort: $sort) {\n                            _id\n                            subCategory\n                                {_id name}\n                            name\n                            status\n                            createdAt                  \n                            stock\n                            image\n                            info\n                            price\n                            reiting\n                            organization\n                                {_id name info image}\n                            hit\n                            latest\n                            favorite\n                            basket\n                        }\n                        sortItem {\n                            name\n                            field\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const favorites = async ({\n  search\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        search: search\n      },\n      query: gql`\n                    query ($search: String!) {\n                        favorites(search: $search) {\n                            _id\n                            subCategory\n                                {_id name}\n                            name\n                            status\n                            createdAt                  \n                            stock\n                            image\n                            info\n                            price\n                            reiting\n                            organization\n                                {_id name}\n                            hit\n                            latest\n                            favorite\n                            basket\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getItem = async ({\n  _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID!) {\n                        item(_id: $_id) {\n                            _id\n                            subCategory\n                                {\n                                    _id \n                                    name \n                                    category\n                                        {_id name}\n                                }\n                            name\n                            status\n                            createdAt                  \n                            stock\n                            image\n                            info\n                            price\n                            reiting\n                            organization\n                                {_id name minimumOrder}\n                            hit\n                            latest\n                            favorite\n                            basket\n                            deliveryDays\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteItem = async (ids, subCategory) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        deleteItem(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getItems(_objectSpread({\n      subCategory: subCategory\n    }, new SingletonStore().getStore().getState().app));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const onoffItem = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        onoffItem(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const favoriteItem = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        favoriteItem(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addFavoriteItem = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        addFavoriteItem(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addItem = async (element, subCategory) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: _objectSpread({}, element, {\n        subCategory: subCategory\n      }),\n      mutation: gql`\n                    mutation ($stock: Int!, $deliveryDays: [String], $name: String!, $image: Upload, $info: String!, $price: Int!, $subCategory: ID!, $organization: ID!, $hit: Boolean!, $latest: Boolean!) {\n                        addItem(stock: $stock, deliveryDays: $deliveryDays, name: $name, image: $image, info: $info, price: $price, subCategory: $subCategory, organization: $organization, hit: $hit, latest: $latest) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setItem = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: _objectSpread({}, element),\n      mutation: gql`\n                    mutation ($_id: ID!, $stock: Int, $deliveryDays: [String], $name: String, $image: Upload, $info: String, $price: Int, $subCategory: ID, $organization: ID, $hit: Boolean, $latest: Boolean) {\n                        setItem(_id: $_id, stock: $stock, deliveryDays: $deliveryDays, name: $name, image: $image, info: $info, price: $price, subCategory: $subCategory, organization: $organization, hit: $hit, latest: $latest) {\n                             data\n                        }\n                    }`\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\items.js"],"names":["gql","SingletonApolloClient","SingletonStore","getItems","subCategory","search","sort","filter","client","getClient","res","query","variables","data","err","console","error","getBrands","organization","favorites","getItem","_id","deleteItem","ids","mutate","mutation","getStore","getState","app","onoffItem","favoriteItem","addFavoriteItem","addItem","element","setItem"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getItems = async({subCategory,  search,  sort,  filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n\r\n        let res = await client\r\n            .query({\r\n                variables: {subCategory: subCategory, search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($subCategory: ID!,$search: String!, $sort: String!, $filter: String!) {\r\n                        items(subCategory: $subCategory, search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            subCategory\r\n                                {_id name}\r\n                            name\r\n                            status\r\n                            createdAt                  \r\n                            stock\r\n                            image\r\n                            info\r\n                            price\r\n                            reiting\r\n                            organization\r\n                                {_id name}\r\n                            hit\r\n                            latest\r\n                            favorite\r\n                            basket\r\n                        }\r\n                        sortItem {\r\n                            name\r\n                            field\r\n                        }\r\n                        filterItem {\r\n                           name\r\n                           value\r\n                        }\r\n                        subCategory(_id: $subCategory) {\r\n                           _id\r\n                           name\r\n                           category\r\n                                {_id name}\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getBrands = async({organization,  search,  sort,  filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {organization: organization, search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($organization: ID!,$search: String!, $sort: String!) {\r\n                        brands(organization: $organization, search: $search, sort: $sort) {\r\n                            _id\r\n                            subCategory\r\n                                {_id name}\r\n                            name\r\n                            status\r\n                            createdAt                  \r\n                            stock\r\n                            image\r\n                            info\r\n                            price\r\n                            reiting\r\n                            organization\r\n                                {_id name info image}\r\n                            hit\r\n                            latest\r\n                            favorite\r\n                            basket\r\n                        }\r\n                        sortItem {\r\n                            name\r\n                            field\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const favorites = async({ search})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: { search: search },\r\n                query: gql`\r\n                    query ($search: String!) {\r\n                        favorites(search: $search) {\r\n                            _id\r\n                            subCategory\r\n                                {_id name}\r\n                            name\r\n                            status\r\n                            createdAt                  \r\n                            stock\r\n                            image\r\n                            info\r\n                            price\r\n                            reiting\r\n                            organization\r\n                                {_id name}\r\n                            hit\r\n                            latest\r\n                            favorite\r\n                            basket\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getItem = async({_id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        item(_id: $_id) {\r\n                            _id\r\n                            subCategory\r\n                                {\r\n                                    _id \r\n                                    name \r\n                                    category\r\n                                        {_id name}\r\n                                }\r\n                            name\r\n                            status\r\n                            createdAt                  \r\n                            stock\r\n                            image\r\n                            info\r\n                            price\r\n                            reiting\r\n                            organization\r\n                                {_id name minimumOrder}\r\n                            hit\r\n                            latest\r\n                            favorite\r\n                            basket\r\n                            deliveryDays\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const deleteItem = async(ids, subCategory)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        deleteItem(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getItems({subCategory: subCategory, ...(new SingletonStore().getStore().getState().app)})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const onoffItem = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        onoffItem(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const favoriteItem = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        favoriteItem(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addFavoriteItem = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        addFavoriteItem(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const addItem = async(element, subCategory)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {...element, subCategory: subCategory},\r\n            mutation : gql`\r\n                    mutation ($stock: Int!, $deliveryDays: [String], $name: String!, $image: Upload, $info: String!, $price: Int!, $subCategory: ID!, $organization: ID!, $hit: Boolean!, $latest: Boolean!) {\r\n                        addItem(stock: $stock, deliveryDays: $deliveryDays, name: $name, image: $image, info: $info, price: $price, subCategory: $subCategory, organization: $organization, hit: $hit, latest: $latest) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setItem = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {...element},\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $stock: Int, $deliveryDays: [String], $name: String, $image: Upload, $info: String, $price: Int, $subCategory: ID, $organization: ID, $hit: Boolean, $latest: Boolean) {\r\n                        setItem(_id: $_id, stock: $stock, deliveryDays: $deliveryDays, name: $name, image: $image, info: $info, price: $price, subCategory: $subCategory, organization: $organization, hit: $hit, latest: $latest) {\r\n                             data\r\n                        }\r\n                    }`})\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}