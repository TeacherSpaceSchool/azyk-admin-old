{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState, useRef } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getClient } from '../../src/gql/client';\nimport clientStyle from '../../src/styleMUI/client/client';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as userActions from '../../redux/actions/user';\nimport { onoffClient, setClient } from '../../src/gql/client';\nimport Remove from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { urlMain } from '../../redux/constants/other';\nimport Confirmation from '../../components/dialog/Confirmation';\nimport Geo from '../../components/dialog/Geo';\nimport { useRouter } from 'next/router';\nimport { pdDatePicker } from '../../src/lib';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nconst Client = React.memo(props => {\n  const {\n    profile\n  } = props.user;\n  const classes = clientStyle();\n  const {\n    data\n  } = props;\n  const {\n    isMobileApp\n  } = props.app;\n  let {\n    0: status,\n    1: setStatus\n  } = useState(data.client ? data.client.user.status : '');\n  let {\n    0: name,\n    1: setName\n  } = useState(data.client ? data.client.name : '');\n  let {\n    0: email,\n    1: setEmail\n  } = useState(data.client ? data.client.email : '');\n  let {\n    0: phone,\n    1: setPhone\n  } = useState(data.client ? data.client.phone : []);\n\n  let addPhone = () => {\n    phone = [...phone, ''];\n    setPhone(phone);\n  };\n\n  let editPhone = (event, idx) => {\n    phone[idx] = event.target.value;\n    setPhone([...phone]);\n  };\n\n  let deletePhone = idx => {\n    phone.splice(idx, 1);\n    setPhone([...phone]);\n  };\n\n  let {\n    0: login,\n    1: setLogin\n  } = useState(data.client ? data.client.user.login : ''); //привести к геолокации\n\n  if (!_Array$isArray(data.client.address[0])) data.client.address.map(addres => [addres]);\n  let {\n    0: address,\n    1: setAddress\n  } = useState(data.client ? data.client.address : []);\n  let {\n    0: birthday,\n    1: setBirthday\n  } = useState(data.client ? pdDatePicker(new Date(data.client.birthday)) : null);\n  let {\n    0: city,\n    1: setCity\n  } = useState(data.client ? data.client.city : '');\n  let {\n    0: type,\n    1: setType\n  } = useState(data.client ? data.client.type : '');\n\n  let handleType = event => {\n    setType(event.target.value);\n  };\n\n  const types = ['частное лицо', 'торговая точка'];\n  let {\n    0: newAddress,\n    1: setNewAddress\n  } = useState('');\n\n  let addAddress = () => {\n    address = [...address, [newAddress]];\n    setAddress(address);\n    setNewAddress('');\n  };\n\n  let editAddress = (event, idx) => {\n    address[idx][0] = event.target.value;\n    setAddress([...address]);\n  };\n\n  let editAddressName = (event, idx) => {\n    address[idx][2] = event.target.value;\n    setAddress([...address]);\n  };\n\n  let deleteAddress = idx => {\n    address.splice(idx, 1);\n    setAddress([...address]);\n  };\n\n  let setAddressGeo = (geo, idx) => {\n    address[idx][1] = geo;\n    setAddress([...address]);\n  };\n\n  let {\n    0: info,\n    1: setInfo\n  } = useState(data.client ? data.client.info : '');\n  let {\n    0: preview,\n    1: setPreview\n  } = useState(data.client ? data.client.image : '');\n  let {\n    0: image,\n    1: setImage\n  } = useState(undefined);\n\n  let handleChangeImage = event => {\n    setImage(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n  };\n\n  let {\n    0: patent,\n    1: setPatent\n  } = useState(undefined);\n\n  let handleChangePatent = event => {\n    setPatent(event.target.files[0]);\n  };\n\n  let patentUrl = data.client ? data.client.patent : '';\n  let patentRef = useRef(null);\n  let {\n    0: passport,\n    1: setPassport\n  } = useState(undefined);\n\n  let handleChangePassport = event => {\n    setPassport(event.target.files[0]);\n  };\n\n  let passportUrl = data.client ? data.client.passport : '';\n  let passportRef = useRef(null);\n  let {\n    0: certificate,\n    1: setCertificate\n  } = useState(undefined);\n\n  let handleChangeCertificate = event => {\n    setCertificate(event.target.files[0]);\n  };\n\n  let certificateUrl = data.client ? data.client.certificate : '';\n  let certificateRef = useRef(null);\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    logout\n  } = props.userActions;\n  let {\n    0: newPass,\n    1: setNewPass\n  } = useState('');\n\n  let handleNewPass = event => {\n    setNewPass(event.target.value);\n  };\n\n  let {\n    0: hide,\n    1: setHide\n  } = useState('password');\n\n  let handleHide = () => {\n    setHide(!hide);\n  };\n\n  const router = useRouter();\n  return __jsx(App, {\n    filters: data.filterSubCategory,\n    sorts: data.sortSubCategory,\n    pageName: data.client ? data.client.name : 'Ничего не найдено'\n  }, __jsx(Head, null, __jsx(\"title\", null, data.client ? data.client.name : 'Ничего не найдено'), __jsx(\"meta\", {\n    name: \"description\",\n    content: info\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: data.client ? data.client.name : 'Ничего не найдено'\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: info\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: preview\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `${urlMain}/client/${router.query.id}`\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: `${urlMain}/client/${router.query.id}`\n  })), __jsx(Card, {\n    className: classes.page\n  }, __jsx(CardContent, {\n    className: isMobileApp ? classes.column : classes.row,\n    style: isMobileApp ? {} : {\n      justifyContent: 'start',\n      alignItems: 'flex-start'\n    }\n  }, data.client ? profile.role === 'admin' || profile._id === data.client.user._id ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.column\n  }, __jsx(\"label\", {\n    htmlFor: \"contained-button-file\"\n  }, __jsx(\"img\", {\n    className: classes.media,\n    src: preview,\n    alt: 'Добавить'\n  })), type === 'торговая точка' ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.line\n  }, __jsx(\"div\", {\n    className: classes.doc\n  }, \"C\\u0432\\u0438\\u0434\\u0435\\u0442\\u0435\\u043B\\u044C\\u0441\\u0442\\u0432\\u043E:\\xA0\"), certificateUrl && certificateUrl.length > 0 ? __jsx(\"a\", {\n    href: certificateUrl,\n    download: true,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.docUrl,\n    style: {\n      color: 'indigo'\n    }\n  }, \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C\")) : null, \"\\xA0\", __jsx(\"div\", {\n    className: classes.docUrl,\n    style: {\n      color: certificate || certificateUrl && certificateUrl.length > 0 ? '#ffb300' : 'red'\n    },\n    onClick: () => {\n      certificateRef.current.click();\n    }\n  }, certificate || certificateUrl && certificateUrl.length > 0 ? 'Изменить' : 'Добавить')), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.doc\n  }, \"\\u041F\\u0430\\u0441\\u043F\\u043E\\u0440\\u0442:\\xA0\"), passportUrl && passportUrl.length > 0 ? __jsx(\"a\", {\n    href: passportUrl,\n    download: true,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.docUrl,\n    style: {\n      color: 'indigo'\n    }\n  }, \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C\")) : null, \"\\xA0\", __jsx(\"div\", {\n    className: classes.docUrl,\n    style: {\n      color: passport || passportUrl && passportUrl.length > 0 ? '#ffb300' : 'red'\n    },\n    onClick: () => {\n      passportRef.current.click();\n    }\n  }, passport || passportUrl && passportUrl.length > 0 ? 'Изменить' : 'Добавить')), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.doc\n  }, \"\\u041F\\u0430\\u0442\\u0435\\u043D\\u0442:\\xA0\"), patentUrl && patentUrl.length > 0 ? __jsx(\"a\", {\n    href: patentUrl,\n    download: true,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.docUrl,\n    style: {\n      color: 'indigo'\n    }\n  }, \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C\")) : null, \"\\xA0\", __jsx(\"div\", {\n    className: classes.docUrl,\n    style: {\n      color: patent || patentUrl && patentUrl.length > 0 ? '#ffb300' : 'red'\n    },\n    onClick: () => {\n      patentRef.current.click();\n    }\n  }, patent || patentUrl && patentUrl.length > 0 ? 'Изменить' : 'Добавить'))) : null), __jsx(\"div\", null, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: classes.input,\n    onChange: event => {\n      setName(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(TextField, {\n    label: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n    value: login,\n    className: classes.input,\n    onChange: event => {\n      setLogin(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(Input, {\n    placeholder: \"\\u041D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n    type: hide ? 'password' : 'text',\n    value: newPass,\n    onChange: handleNewPass,\n    className: classes.input,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"Toggle password visibility\",\n      onClick: handleHide\n    }, hide ? __jsx(VisibilityOff, null) : __jsx(Visibility, null)))\n  }), __jsx(FormControl, {\n    className: classes.input\n  }, __jsx(InputLabel, null, \"\\u0422\\u0438\\u043F \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430\"), __jsx(Select, {\n    value: type,\n    onChange: handleType\n  }, types.map(element => __jsx(MenuItem, {\n    key: element,\n    value: element\n  }, element)))), __jsx(TextField, {\n    className: classes.input,\n    label: \"\\u0414\\u0435\\u043D\\u044C \\u0440\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435\",\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: birthday,\n    inputProps: {\n      'aria-label': 'description'\n    },\n    onChange: event => setBirthday(event.target.value)\n  }), __jsx(TextField, {\n    className: classes.input,\n    label: \"\\u0413\\u043E\\u0440\\u043E\\u0434\",\n    type: \"text\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: city,\n    inputProps: {\n      'aria-label': 'description'\n    },\n    onChange: event => setCity(event.target.value)\n  }), __jsx(\"br\", null), __jsx(\"br\", null), phone ? phone.map((element, idx) => __jsx(\"div\", {\n    key: idx\n  }, __jsx(FormControl, {\n    className: classes.input\n  }, __jsx(InputLabel, null, \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D. \\u0424\\u043E\\u0440\\u043C\\u0430\\u0442: +996555780861\"), __jsx(Input, {\n    placeholder: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D. \\u0424\\u043E\\u0440\\u043C\\u0430\\u0442: +996555780861\",\n    value: element,\n    className: classes.input,\n    onChange: event => {\n      editPhone(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deletePhone(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  })))) : null, __jsx(Button, {\n    onClick: async () => {\n      addPhone();\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\"), __jsx(\"br\", null), __jsx(\"br\", null), address ? address.map((element, idx) => __jsx(\"div\", {\n    key: idx\n  }, __jsx(FormControl, {\n    className: classes.input\n  }, __jsx(InputLabel, null, \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043C\\u0430\\u0433\\u0430\\u0437\\u0438\\u043D\\u0430\"), __jsx(Input, {\n    placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043C\\u0430\\u0433\\u0430\\u0437\\u0438\\u043D\\u0430\",\n    value: element[2],\n    className: classes.input,\n    onChange: event => {\n      editAddressName(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      onClick: () => {\n        deleteAddress(idx);\n      },\n      \"aria-label\": \"toggle password visibility\"\n    }, __jsx(Remove, null)))\n  })), __jsx(FormControl, {\n    className: classes.input\n  }, __jsx(InputLabel, null, \"\\u0410\\u0434\\u0440\\u0435\\u0441 \\u043C\\u0430\\u0433\\u0430\\u0437\\u0438\\u043D\\u0430\"), __jsx(Input, {\n    placeholder: \"\\u0410\\u0434\\u0440\\u0435\\u0441\",\n    value: element[0],\n    className: classes.input,\n    onChange: event => {\n      editAddress(event, idx);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  })), __jsx(\"div\", {\n    className: classes.geo,\n    style: {\n      color: element[1] ? '#ffb300' : 'red'\n    },\n    onClick: () => {\n      setMiniDialog('Геолокация', __jsx(Geo, {\n        change: true,\n        geo: element[1],\n        setAddressGeo: setAddressGeo,\n        idx: idx\n      }), true);\n      showMiniDialog(true);\n    }\n  }, element[1] ? 'Изменить геолокацию' : 'Задайте геолокацию'))) : __jsx(\"br\", null), __jsx(Button, {\n    onClick: async () => {\n      addAddress();\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0430\\u0434\\u0440\\u0435\\u0441\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"email\",\n    value: email,\n    className: classes.input,\n    onChange: event => {\n      setEmail(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(TextField, {\n    multiline: true,\n    label: \"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F\",\n    value: info,\n    className: classes.input,\n    onChange: event => {\n      setInfo(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: data.client.user._id\n      };\n      if (image !== undefined) editElement.image = image;\n      if (passport !== undefined) editElement.passport = passport;\n      if (patent !== undefined) editElement.patent = patent;\n      if (certificate !== undefined) editElement.certificate = certificate;\n      if (name.length > 0 && name !== data.client.name) editElement.name = name;\n      editElement.address = address;\n      if (email.length > 0 && email !== data.client.email) editElement.email = email;\n      if (login.length > 0 && data.client.user.login !== login) editElement.login = login;\n      editElement.phone = phone;\n      if (info.length > 0 && info !== data.client.info) editElement.info = info;\n      if (city.length > 0 && city !== data.client.city) editElement.city = city;\n      if (type && type.length > 0 && type !== data.client.type) editElement.type = type;\n      if (birthday && birthday !== data.client.birthday) editElement.birthday = birthday;\n      if (newPass.length > 0) editElement.newPass = newPass;\n\n      const action = async () => {\n        await setClient(editElement);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), profile.role === 'admin' ? __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await onoffClient([data.client._id]);\n        setStatus(status === 'active' ? 'deactive' : 'active');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, status === 'active' ? 'Отключить' : 'Включить') : __jsx(Button, {\n    onClick: () => {\n      const action = async () => {\n        logout(true);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0412\\u044B\\u0439\\u0442\\u0438\")))) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.column\n  }, __jsx(\"img\", {\n    className: classes.media,\n    src: preview,\n    alt: name\n  }), ['admin', 'организация', 'менеджер'].includes(profile.role) && certificateUrl && certificateUrl.length > 0 ? __jsx(\"a\", {\n    href: certificateUrl,\n    download: true,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.docUrl,\n    style: {\n      color: 'indigo'\n    }\n  }, \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C \\u0441\\u0435\\u0440\\u0442\\u0438\\u0444\\u0438\\u043A\\u0430\\u0442\")) : null, ['admin', 'организация', 'менеджер'].includes(profile.role) && passportUrl && passportUrl.length > 0 ? __jsx(\"a\", {\n    href: passportUrl,\n    download: true,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.docUrl,\n    style: {\n      color: 'indigo'\n    }\n  }, \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C \\u043F\\u0430\\u0441\\u043F\\u043E\\u0440\\u0442\")) : null, ['admin', 'организация', 'менеджер'].includes(profile.role) && patentUrl && patentUrl.length > 0 ? __jsx(\"a\", {\n    href: patentUrl,\n    download: true,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: classes.docUrl,\n    style: {\n      color: 'indigo'\n    }\n  }, \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C \\u043F\\u0430\\u0442\\u0435\\u043D\\u0442\")) : null), __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.name\n  }, name), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0410\\u0434\\u0440\\u0435\\u0441:\\xA0\"), __jsx(\"div\", {\n    className: classes.column\n  }, address ? address.map((element, idx) => __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.value,\n    key: idx\n  }, element[1]), __jsx(\"div\", {\n    className: classes.value,\n    key: idx\n  }, element[0]), __jsx(\"div\", {\n    className: classes.geo,\n    style: {\n      color: element[1] ? '#ffb300' : 'red'\n    },\n    onClick: () => {\n      setMiniDialog('Геолокация', __jsx(Geo, {\n        geo: element[1]\n      }), true);\n      showMiniDialog(true);\n    }\n  }, element[1] ? 'Посмотреть геолокацию' : 'Геолокация не задана'))) : null)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"E-mail:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, email)), __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(\"div\", {\n    className: classes.nameField\n  }, \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D:\\xA0\"), __jsx(\"div\", {\n    className: classes.value\n  }, __jsx(\"div\", {\n    className: classes.column\n  }, phone ? phone.map((element, idx) => __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.value,\n    key: idx\n  }, element))) : null))), __jsx(\"div\", {\n    className: classes.info\n  }, info))) : 'Ничего не найдено')), __jsx(\"input\", {\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    id: \"contained-button-file\",\n    type: \"file\",\n    onChange: handleChangeImage\n  }), __jsx(\"input\", {\n    ref: passportRef,\n    style: {\n      display: 'none'\n    },\n    id: \"input-passport\",\n    type: \"file\",\n    onChange: handleChangePassport\n  }), __jsx(\"input\", {\n    ref: certificateRef,\n    style: {\n      display: 'none'\n    },\n    id: \"input-certificate\",\n    type: \"file\",\n    onChange: handleChangeCertificate\n  }), __jsx(\"input\", {\n    ref: patentRef,\n    style: {\n      display: 'none'\n    },\n    id: \"input-patent\",\n    type: \"file\",\n    onChange: handleChangePatent\n  }));\n});\n\nClient.getInitialProps = async function (ctx) {\n  return {\n    data: await getClient({\n      _id: ctx.query.id\n    })\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Client);","map":null,"metadata":{},"sourceType":"module"}