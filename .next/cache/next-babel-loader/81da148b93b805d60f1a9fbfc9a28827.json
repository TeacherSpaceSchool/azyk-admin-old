{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../singleton/client';\nimport { SingletonStore } from '../singleton/store';\nexport const getClients = async ({\n  search: search,\n  sort: sort,\n  filter: filter\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        search: search,\n        sort: sort,\n        filter: filter\n      },\n      query: gql`\n                    query ($search: String!, $sort: String!, $filter: String!) {\n                        clients(search: $search, sort: $sort, filter: $filter) {\n                            _id\n                            image\n                            createdAt\n                            name\n                            email\n                            address\n                            info\n                            reiting\n                            birthday\n                            type\n                            city\n                            patent \n                            passport \n                            certificate\n                            user \n                                {_id role status phone}\n                          }\n                          sortClient {\n                           name\n                            field\n                          }\n                          filterClient {\n                           name\n                           value\n                          }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getClient = async ({\n  _id: _id\n}) => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    let res = await client.query({\n      variables: {\n        _id: _id\n      },\n      query: gql`\n                    query ($_id: ID!) {\n                        client(_id: $_id) {\n                            _id\n                            image\n                            createdAt\n                            name\n                            email\n                            address\n                            info\n                            reiting\n                            birthday\n                            city\n                            type\n                            patent \n                            passport \n                            certificate\n                            user \n                                {_id role status phone}\n                        }\n                    }`\n    });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const onoffClient = async ids => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: {\n        _id: ids\n      },\n      mutation: gql`\n                    mutation ($_id: [ID]!) {\n                        onoffClient(_id: $_id) {\n                             data\n                        }\n                    }`\n    });\n    return await getClients(new SingletonStore().getStore().getState().app);\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const setClient = async element => {\n  try {\n    const client = new SingletonApolloClient().getClient();\n    await client.mutate({\n      variables: element,\n      mutation: gql`\n                    mutation ($_id: ID!, $phone: String, $city: String, $type: String, $image: Upload, $patent: Upload, $passport: Upload, $certificate: Upload, $birthday: Date, $name: String, $email: String, $address: [[String]], $info: String, $newPass: String) {\n                        setClient(_id: $_id, phone: $phone, city: $city, image: $image,, patent: $patent, passport: $passport, certificate: $certificate, type: $type, birthday: $birthday, name: $name, email: $email, address: $address, info: $info, newPass: $newPass) {\n                             data\n                        }\n                    }`\n    });\n    let list = await getClients(new SingletonStore().getStore().getState().app);\n    return list;\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\src\\gql\\client.js"],"names":["gql","SingletonApolloClient","SingletonStore","getClients","search","sort","filter","client","getClient","res","query","variables","data","err","console","error","_id","onoffClient","ids","mutate","mutation","getStore","getState","app","setClient","element","list"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,OAAO,MAAMC,UAAU,GAAG,OAAM;AAACC,EAAAA,MAAM,EAAEA,MAAT;AAAiBC,EAAAA,IAAI,EAAEA,IAAvB;AAA6BC,EAAAA,MAAM,EAAEA;AAArC,CAAN,KAAqD;AAC3E,MAAG;AACC,UAAMC,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,QAAIC,GAAG,GAAG,MAAMF,MAAM,CACjBG,KADW,CACL;AACHC,MAAAA,SAAS,EAAE;AAACP,QAAAA,MAAM,EAAEA,MAAT;AAAiBC,QAAAA,IAAI,EAAEA,IAAvB;AAA6BC,QAAAA,MAAM,EAAEA;AAArC,OADR;AAEHI,MAAAA,KAAK,EAAEV,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFR,KADK,CAAhB;AAiCA,WAAOS,GAAG,CAACG,IAAX;AACH,GApCD,CAoCE,OAAMC,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAxCM;AA0CP,OAAO,MAAML,SAAS,GAAG,OAAM;AAACQ,EAAAA,GAAG,EAAEA;AAAN,CAAN,KAAmB;AACxC,MAAG;AACC,UAAMT,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,QAAIC,GAAG,GAAG,MAAMF,MAAM,CACjBG,KADW,CACL;AACHC,MAAAA,SAAS,EAAE;AAACK,QAAAA,GAAG,EAAEA;AAAN,OADR;AAEHN,MAAAA,KAAK,EAAEV,GAAI;;;;;;;;;;;;;;;;;;;;;AAFR,KADK,CAAhB;AAyBA,WAAOS,GAAG,CAACG,IAAX;AACH,GA5BD,CA4BE,OAAMC,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAhCM;AAkCP,OAAO,MAAMI,WAAW,GAAG,MAAMC,GAAN,IAAY;AACnC,MAAG;AACC,UAAMX,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,UAAMD,MAAM,CAACY,MAAP,CAAc;AAChBR,MAAAA,SAAS,EAAE;AAACK,QAAAA,GAAG,EAAEE;AAAN,OADK;AAEhBE,MAAAA,QAAQ,EAAGpB,GAAI;;;;;;AAFC,KAAd,CAAN;AAQA,WAAO,MAAMG,UAAU,CAAC,IAAID,cAAJ,GAAqBmB,QAArB,GAAgCC,QAAhC,GAA2CC,GAA5C,CAAvB;AACH,GAXD,CAWE,OAAMV,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMW,SAAS,GAAG,MAAMC,OAAN,IAAgB;AACrC,MAAG;AACC,UAAMlB,MAAM,GAAG,IAAIN,qBAAJ,GAA4BO,SAA5B,EAAf;AACA,UAAMD,MAAM,CAACY,MAAP,CAAc;AAChBR,MAAAA,SAAS,EAAEc,OADK;AAEhBL,MAAAA,QAAQ,EAAGpB,GAAI;;;;;;AAFC,KAAd,CAAN;AAQA,QAAI0B,IAAI,GAAG,MAAMvB,UAAU,CAAC,IAAID,cAAJ,GAAqBmB,QAArB,GAAgCC,QAAhC,GAA2CC,GAA5C,CAA3B;AACA,WAAOG,IAAP;AACH,GAZD,CAYE,OAAMb,GAAN,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,CAhBM","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../singleton/client';\r\nimport { SingletonStore } from '../singleton/store';\r\n\r\nexport const getClients = async({search: search, sort: sort, filter: filter})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {search: search, sort: sort, filter: filter},\r\n                query: gql`\r\n                    query ($search: String!, $sort: String!, $filter: String!) {\r\n                        clients(search: $search, sort: $sort, filter: $filter) {\r\n                            _id\r\n                            image\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            address\r\n                            info\r\n                            reiting\r\n                            birthday\r\n                            type\r\n                            city\r\n                            patent \r\n                            passport \r\n                            certificate\r\n                            user \r\n                                {_id role status phone}\r\n                          }\r\n                          sortClient {\r\n                           name\r\n                            field\r\n                          }\r\n                          filterClient {\r\n                           name\r\n                           value\r\n                          }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const getClient = async({_id: _id})=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        let res = await client\r\n            .query({\r\n                variables: {_id: _id},\r\n                query: gql`\r\n                    query ($_id: ID!) {\r\n                        client(_id: $_id) {\r\n                            _id\r\n                            image\r\n                            createdAt\r\n                            name\r\n                            email\r\n                            address\r\n                            info\r\n                            reiting\r\n                            birthday\r\n                            city\r\n                            type\r\n                            patent \r\n                            passport \r\n                            certificate\r\n                            user \r\n                                {_id role status phone}\r\n                        }\r\n                    }`,\r\n            })\r\n        return res.data\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const onoffClient = async(ids)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: {_id: ids},\r\n            mutation : gql`\r\n                    mutation ($_id: [ID]!) {\r\n                        onoffClient(_id: $_id) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        return await getClients(new SingletonStore().getStore().getState().app)\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport const setClient = async(element)=>{\r\n    try{\r\n        const client = new SingletonApolloClient().getClient()\r\n        await client.mutate({\r\n            variables: element,\r\n            mutation : gql`\r\n                    mutation ($_id: ID!, $phone: String, $city: String, $type: String, $image: Upload, $patent: Upload, $passport: Upload, $certificate: Upload, $birthday: Date, $name: String, $email: String, $address: [[String]], $info: String, $newPass: String) {\r\n                        setClient(_id: $_id, phone: $phone, city: $city, image: $image,, patent: $patent, passport: $passport, certificate: $certificate, type: $type, birthday: $birthday, name: $name, email: $email, address: $address, info: $info, newPass: $newPass) {\r\n                             data\r\n                        }\r\n                    }`})\r\n        let list = await getClients(new SingletonStore().getStore().getState().app)\r\n        return list\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}