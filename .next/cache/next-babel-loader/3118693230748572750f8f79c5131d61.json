{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\projects\\\\azyk\\\\azyk-admin\\\\components\\\\organization\\\\CardOrganization.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport cardOrganizationStyle from '../../src/styleMUI/organization/cardOrganization.js';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport Button from '@material-ui/core/Button';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport { onoffOrganization, deleteOrganization } from '../../src/gql/organization';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport Confirmation from '../../components/dialog/Confirmation';\nvar CardOrganization = React.memo(function (props) {\n  var classes = cardOrganizationStyle();\n  var element = props.element,\n      setList = props.setList;\n  var isMobileApp = props.app.isMobileApp;\n  var profile = props.user.profile;\n  var _props$mini_dialogAct = props.mini_dialogActions,\n      setMiniDialog = _props$mini_dialogAct.setMiniDialog,\n      showMiniDialog = _props$mini_dialogAct.showMiniDialog;\n\n  var _useState = useState(element !== undefined ? element.status : ''),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  return __jsx(Card, {\n    className: isMobileApp ? classes.cardM : classes.cardD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, __jsx(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/organization/[id]\",\n    as: \"/organization/\".concat(element._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.line,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: classes.mediaO,\n    src: element.image,\n    alt: element.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, element.name)))), profile.role === 'admin' ? __jsx(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return onoffOrganization([element._id]);\n\n                        case 2:\n                          setStatus(status === 'active' ? 'deactive' : 'active');\n\n                        case 3:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function action() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 47\n                },\n                __self: this\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    })),\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, status === 'active' ? 'Отключить' : 'Включить'), __jsx(Button, {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var action;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              action =\n              /*#__PURE__*/\n              function () {\n                var _ref4 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3() {\n                  var list;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return deleteOrganization([element._id]);\n\n                        case 2:\n                          list = _context3.sent.organizations;\n                          setList(list);\n\n                        case 4:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function action() {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n\n              setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n                action: action,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 57\n                },\n                __self: this\n              }));\n              showMiniDialog(true);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    })),\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")) : null);\n});\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrganization);","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\components\\organization\\CardOrganization.js"],"names":["React","useState","Card","CardActionArea","CardActions","cardOrganizationStyle","connect","Link","Button","bindActionCreators","mini_dialogActions","onoffOrganization","deleteOrganization","LazyLoadImage","Confirmation","CardOrganization","memo","props","classes","element","setList","isMobileApp","app","profile","user","setMiniDialog","showMiniDialog","undefined","status","setStatus","cardM","cardD","_id","line","mediaO","image","name","inputM","inputD","role","action","list","organizations","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,qBAAP,MAAkC,qDAAlC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAO,KAAKC,kBAAZ,MAAoC,iCAApC;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,4BAAtD;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AAEA,IAAMC,gBAAgB,GAAGf,KAAK,CAACgB,IAAN,CAAW,UAACC,KAAD,EAAW;AAC3C,MAAMC,OAAO,GAAGb,qBAAqB,EAArC;AAD2C,MAEnCc,OAFmC,GAEdF,KAFc,CAEnCE,OAFmC;AAAA,MAE1BC,OAF0B,GAEdH,KAFc,CAE1BG,OAF0B;AAAA,MAGnCC,WAHmC,GAGnBJ,KAAK,CAACK,GAHa,CAGnCD,WAHmC;AAAA,MAInCE,OAJmC,GAIvBN,KAAK,CAACO,IAJiB,CAInCD,OAJmC;AAAA,8BAKDN,KAAK,CAACP,kBALL;AAAA,MAKnCe,aALmC,yBAKnCA,aALmC;AAAA,MAKpBC,cALoB,yBAKpBA,cALoB;;AAAA,kBAMjBzB,QAAQ,CAACkB,OAAO,KAAGQ,SAAV,GAAoBR,OAAO,CAACS,MAA5B,GAAmC,EAApC,CANS;AAAA,MAMtCA,MANsC;AAAA,MAM9BC,SAN8B;;AAO3C,SACI,MAAC,IAAD;AAAM,IAAA,SAAS,EAAER,WAAW,GAACH,OAAO,CAACY,KAAT,GAAeZ,OAAO,CAACa,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,oBAAX;AAAgC,IAAA,EAAE,0BAAmBZ,OAAO,CAACa,GAA3B,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAEd,OAAO,CAACe,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AACI,IAAA,MAAM,EAAC,MADX;AAEI,IAAA,SAAS,EAAEf,OAAO,CAACgB,MAFvB;AAGI,IAAA,GAAG,EAAEf,OAAO,CAACgB,KAHjB;AAII,IAAA,GAAG,EAAEhB,OAAO,CAACiB,IAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAOI;AAAI,IAAA,SAAS,EAAEf,WAAW,GAACH,OAAO,CAACmB,MAAT,GAAgBnB,OAAO,CAACoB,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,OAAO,CAACiB,IADb,CAPJ,CADJ,CADJ,CADJ,EAiBYb,OAAO,CAACgB,IAAR,KAAiB,OAAjB,GACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,OAAO;AAAA;AAAA;AAAA;AAAA,6BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,MADD;AAAA;AAAA;AAAA;AAAA;AAAA,yCACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACL7B,iBAAiB,CAAC,CAACQ,OAAO,CAACa,GAAT,CAAD,CADZ;;AAAA;AAEXH,0BAAAA,SAAS,CAACD,MAAM,KAAG,QAAT,GAAkB,UAAlB,GAA6B,QAA9B,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADV;;AAAA,gCACCY,MADD;AAAA;AAAA;AAAA;;AAKLf,cAAAA,aAAa,CAAC,cAAD,EAAiB,MAAC,YAAD;AAAc,gBAAA,MAAM,EAAEe,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAjB,CAAb;AACAd,cAAAA,cAAc,CAAC,IAAD,CAAd;;AANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF,EAAf;AAOW,IAAA,IAAI,EAAC,OAPhB;AAOwB,IAAA,KAAK,EAAC,SAP9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKE,MAAM,KAAG,QAAT,GAAkB,WAAlB,GAA8B,UARnC,CADJ,EAWY,MAAC,MAAD;AAAQ,IAAA,OAAO;AAAA;AAAA;AAAA;AAAA,6BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACPY,cAAAA,MADO;AAAA;AAAA;AAAA;AAAA;AAAA,yCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACS5B,kBAAkB,CAAC,CAACO,OAAO,CAACa,GAAT,CAAD,CAD3B;;AAAA;AACLS,0BAAAA,IADK,kBAC4CC,aAD5C;AAEXtB,0BAAAA,OAAO,CAACqB,IAAD,CAAP;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF;;AAAA,gCACPD,MADO;AAAA;AAAA;AAAA;;AAKbf,cAAAA,aAAa,CAAC,cAAD,EAAiB,MAAC,YAAD;AAAc,gBAAA,MAAM,EAAEe,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAjB,CAAb;AACAd,cAAAA,cAAc,CAAC,IAAD,CAAd;;AANa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF,EAAf;AAOG,IAAA,IAAI,EAAC,OAPR;AAOgB,IAAA,KAAK,EAAC,SAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAXZ,CADJ,GAwBI,IAzChB,CADJ;AA8CH,CArDwB,CAAzB;;AAuDA,SAASiB,eAAT,CAA0BC,KAA1B,EAAiC;AAC7B,SAAO;AACHtB,IAAAA,GAAG,EAAEsB,KAAK,CAACtB,GADR;AAEHE,IAAAA,IAAI,EAAEoB,KAAK,CAACpB;AAFT,GAAP;AAIH;;AAED,SAASqB,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHpC,IAAAA,kBAAkB,EAAED,kBAAkB,CAACC,kBAAD,EAAqBoC,QAArB;AADnC,GAAP;AAGH;;AAED,eAAexC,OAAO,CAACqC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C9B,gBAA7C,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport cardOrganizationStyle from '../../src/styleMUI/organization/cardOrganization.js'\r\nimport { connect } from 'react-redux'\r\nimport Link from 'next/link';\r\nimport Button from '@material-ui/core/Button';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog'\r\nimport { onoffOrganization, deleteOrganization } from '../../src/gql/organization'\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport Confirmation from '../../components/dialog/Confirmation'\r\n\r\nconst CardOrganization = React.memo((props) => {\r\n    const classes = cardOrganizationStyle();\r\n    const { element, setList } = props;\r\n    const { isMobileApp } = props.app;\r\n    const { profile } = props.user;\r\n    const { setMiniDialog, showMiniDialog } = props.mini_dialogActions;\r\n    let [status, setStatus] = useState(element!==undefined?element.status:'');\r\n    return (\r\n        <Card className={isMobileApp?classes.cardM:classes.cardD}>\r\n            <CardActionArea>\r\n                <Link href='/organization/[id]' as={`/organization/${element._id}`}>\r\n                    <div className={classes.line}>\r\n                        <LazyLoadImage\r\n                            effect='blur'\r\n                            className={classes.mediaO}\r\n                            src={element.image}\r\n                            alt={element.name}\r\n                        />\r\n                        <h3 className={isMobileApp?classes.inputM:classes.inputD}>\r\n                            {element.name}\r\n                        </h3>\r\n                    </div>\r\n                </Link>\r\n            </CardActionArea>\r\n                {\r\n                    profile.role === 'admin' ?\r\n                        <CardActions>\r\n                            <Button onClick={async()=>{\r\n                                        const action = async() => {\r\n                                            await onoffOrganization([element._id])\r\n                                            setStatus(status==='active'?'deactive':'active')\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                {status==='active'?'Отключить':'Включить'}\r\n                            </Button>\r\n                                    <Button onClick={async()=>{\r\n                                        const action = async() => {\r\n                                            const list = (await deleteOrganization([element._id])).organizations\r\n                                            setList(list)\r\n                                        }\r\n                                        setMiniDialog('Вы уверенны?', <Confirmation action={action}/>)\r\n                                        showMiniDialog(true)\r\n                                    }} size='small' color='primary'>\r\n                                        Удалить\r\n                                    </Button>\r\n                        </CardActions>\r\n                        :\r\n                        null\r\n                }\r\n        </Card>\r\n    );\r\n})\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        app: state.app,\r\n        user: state.user\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardOrganization)"]},"metadata":{},"sourceType":"module"}