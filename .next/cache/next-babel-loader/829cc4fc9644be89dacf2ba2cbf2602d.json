{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { useState, useEffect } from 'react';\nimport App from '../../layouts/App';\nimport { connect } from 'react-redux';\nimport { getSubCategorys } from '../../src/gql/subcategory';\nimport { getEmployment } from '../../src/gql/employment';\nimport { getOrganizations } from '../../src/gql/organization';\nimport { getItem, addItem, setItem, onoffItem, deleteItem, favoriteItem } from '../../src/gql/items';\nimport { addBasket } from '../../src/gql/basket';\nimport { checkInt } from '../../src/lib';\nimport itemStyle from '../../src/styleMUI/item/item';\nimport { useRouter } from 'next/router';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { FacebookShareButton, VKShareButton, OKShareButton, WhatsappShareButton, TelegramShareButton, FacebookIcon, VKIcon, OKIcon, TelegramIcon, WhatsappIcon } from 'react-share';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Switch from '@material-ui/core/Switch';\nimport Router from 'next/router';\nimport dynamic from 'next/dynamic';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as snackbarActions from '../../redux/actions/snackbar';\nimport Star from '@material-ui/icons/Star';\nimport TextField from '@material-ui/core/TextField';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nconst Confirmation = dynamic(() => import('../../components/dialog/Confirmation'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../components/dialog/Confirmation')],\n    modules: ['../../components/dialog/Confirmation']\n  }\n});\nconst Item = React.memo(props => {\n  const classes = itemStyle();\n  const {\n    data\n  } = props;\n  const router = useRouter();\n  const {\n    isMobileApp\n  } = props.app;\n  const {\n    profile,\n    authenticated\n  } = props.user;\n  let {\n    0: stock,\n    1: setStock\n  } = useState(data.item !== null ? data.item.stock : '');\n  let {\n    0: name,\n    1: setName\n  } = useState(data.item !== null ? data.item.name : '');\n  let {\n    0: info,\n    1: setInfo\n  } = useState(data.item !== null ? data.item.info : '');\n  let {\n    0: price,\n    1: setPrice\n  } = useState(data.item !== null ? data.item.price : '');\n  let {\n    0: subCategory,\n    1: setSubCategory\n  } = useState(data.item !== null ? data.item.subCategory : {});\n  let {\n    0: status,\n    1: setStatus\n  } = useState(data.item !== null ? data.item.status : '');\n\n  let handleSubCategory = event => {\n    setSubCategory({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: organization,\n    1: setOrganization\n  } = useState(data.item !== null ? data.item.organization : {});\n\n  let handleOrganization = event => {\n    setOrganization({\n      _id: event.target.value,\n      name: event.target.name\n    });\n  };\n\n  let {\n    0: hit,\n    1: setHit\n  } = useState(data.item !== null ? data.item.hit : false);\n  let {\n    0: latest,\n    1: setLatest\n  } = useState(data.item !== null ? data.item.latest : false);\n  let {\n    0: preview,\n    1: setPreview\n  } = useState(data.item !== null ? data.item.image : '');\n  let {\n    0: image,\n    1: setImage\n  } = useState(undefined);\n  let {\n    0: employment,\n    1: setEmployment\n  } = useState({\n    organization: ''\n  });\n\n  let handleChangeImage = event => {\n    setImage(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (['организация', 'менеджер', 'экспедитор'].includes(profile.role)) {\n        let employment = (await getEmployment({\n          _id: profile._id\n        })).employment;\n        setOrganization(employment.organization);\n        setEmployment(employment);\n      }\n    })();\n  }, [profile]);\n  useEffect(() => {\n    if (!authenticated) {\n      if (localStorage.favorites == undefined) localStorage.favorites = _JSON$stringify([]);else if (data.item !== null) {\n        let favorites = JSON.parse(localStorage.favorites);\n\n        for (let i = 0; i < favorites.length; i++) {\n          if (favorites[i]._id == data.item._id) setFavorite(true);\n        }\n      }\n      if (localStorage.basket == undefined) localStorage.basket = _JSON$stringify([]);\n    }\n  }, []); //BUY\n\n  let {\n    0: count,\n    1: setCount\n  } = useState(0);\n\n  let increment = () => {\n    count += 1;\n    setCount(count);\n  };\n\n  let decrement = () => {\n    if (count > 0) count -= 1;\n    setCount(count);\n  };\n\n  const {\n    setMiniDialog,\n    showMiniDialog\n  } = props.mini_dialogActions;\n  const {\n    showSnackBar\n  } = props.snackbarActions;\n  let {\n    0: favorite,\n    1: setFavorite\n  } = useState(data.item !== null && data.item.favorite !== undefined ? data.item.favorite : []);\n  return __jsx(App, {\n    filters: data.filterItem,\n    sorts: data.sortItem,\n    pageName: data.item !== null ? router.query.id === 'new' ? 'Добавить' : data.item.name : 'Ничего не найдено'\n  }, __jsx(Head, null, __jsx(\"title\", null, data.item !== null ? router.query.id === 'new' ? 'Добавить' : data.item.name : 'Ничего не найдено')), __jsx(Card, {\n    className: classes.page\n  }, __jsx(CardContent, {\n    className: isMobileApp ? classes.column : classes.row\n  }, profile.role === 'admin' || router.query.id === 'new' || ['менеджер', 'организация'].includes(profile.role) && data.item.organization._id === employment.organization._id ? data.item !== null || router.query.id === 'new' ? __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: \"contained-button-file\"\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: isMobileApp ? classes.mediaM : classes.mediaD,\n    src: preview,\n    alt: 'Добавить'\n  })), __jsx(\"div\", null, __jsx(\"h1\", {\n    className: classes.name\n  }, __jsx(TextField, {\n    label: \"\\u0418\\u043C\\u044F\",\n    value: name,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setName(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  })), __jsx(\"div\", {\n    className: classes.price\n  }, __jsx(TextField, {\n    label: \"\\u0426\\u0435\\u043D\\u0430\",\n    value: price,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setPrice(checkInt(event.target.value));\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  })), __jsx(\"div\", {\n    className: classes.price\n  }, __jsx(TextField, {\n    label: \"\\u0421\\u043A\\u0438\\u0434\\u043A\\u0430\",\n    value: stock,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setStock(checkInt(event.target.value));\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  })), profile.role === 'admin' ? __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), __jsx(Select, {\n    value: organization._id,\n    onChange: handleOrganization\n  }, data.organizations.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name\n  }, element.name)))) : __jsx(Input, {\n    value: organization.name,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    inputProps: {\n      'aria-label': 'description',\n      readOnly: true\n    }\n  }), __jsx(\"br\", null), __jsx(FormControl, {\n    className: isMobileApp ? classes.inputM : classes.inputD\n  }, __jsx(InputLabel, null, \"\\u041F\\u043E\\u0434\\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044F\"), __jsx(Select, {\n    value: subCategory._id,\n    onChange: handleSubCategory\n  }, data.subCategorys.map(element => __jsx(MenuItem, {\n    key: element._id,\n    value: element._id,\n    ola: element.name\n  }, element.name)))), __jsx(\"br\", null), profile.role === 'admin' ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.row\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      checked: hit,\n      onChange: () => {\n        setHit(!hit);\n      },\n      color: \"primary\",\n      inputProps: {\n        'aria-label': 'primary checkbox'\n      }\n    }),\n    label: \"\\u041F\\u043E\\u043F\\u0443\\u043B\\u044F\\u0440\\u043D\\u043E\\u0435\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      checked: latest,\n      onChange: () => {\n        setLatest(!latest);\n      },\n      color: \"primary\",\n      inputProps: {\n        'aria-label': 'primary checkbox'\n      }\n    }),\n    label: \"\\u041D\\u043E\\u0432\\u0438\\u043D\\u043A\\u0430\"\n  })), __jsx(\"br\", null)) : null, __jsx(TextField, {\n    multiline: true,\n    label: \"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F\",\n    value: info,\n    className: isMobileApp ? classes.inputM : classes.inputD,\n    onChange: event => {\n      setInfo(event.target.value);\n    },\n    inputProps: {\n      'aria-label': 'description'\n    }\n  }), __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.row\n  }, router.query.id === 'new' ? __jsx(Button, {\n    onClick: async () => {\n      if (name.length > 0 && price > 0 && subCategory._id != undefined && organization._id != undefined) {\n        const action = async () => {\n          await addItem({\n            name: name,\n            stock: stock,\n            image: image,\n            info: info,\n            price: price,\n            subCategory: subCategory._id,\n            hit: hit,\n            latest: latest,\n            organization: organization._id\n          }, subCategory._id);\n          Router.push(`/items/${subCategory._id}`);\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      } else {\n        showSnackBar('Заполните все поля');\n      }\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\") : __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: async () => {\n      let editElement = {\n        _id: data.item._id\n      };\n      if (stock > 0 && stock !== data.item.stock) editElement.stock = stock;\n      if (name.length > 0 && name !== data.item.name) editElement.name = name;\n      if (image !== undefined) editElement.image = image;\n      if (info.length > 0 && info !== data.item.info) editElement.info = info;\n      if (price > 0 && price !== data.item.price) editElement.price = price;\n      if (hit !== data.item.hit) editElement.hit = hit;\n      if (latest !== data.item.latest) editElement.latest = latest;\n      if (organization._id !== data.item.organization._id) editElement.organization = organization._id;\n      if (subCategory._id !== data.item.subCategory._id) editElement.subCategory = subCategory._id;\n\n      const action = async () => {\n        await setItem(editElement, subCategory._id); //Router.push(`/items/${subCategory._id}`)\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await onoffItem([data.item._id]);\n        setStatus(status === 'active' ? 'deactive' : 'active');\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, status === 'active' ? 'Отключить' : 'Включить'), profile.role === 'admin' ? __jsx(Button, {\n    onClick: async () => {\n      const action = async () => {\n        await deleteItem([data.item._id], subCategory._id);\n        Router.push(`/items/${subCategory._id}`);\n      };\n\n      setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n        action: action\n      }));\n      showMiniDialog(true);\n    },\n    size: \"small\",\n    color: \"primary\"\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\") : null)))) : 'Ничего не найдено' : data.item === null || router.query.id === 'new' ? 'Ничего не найдено' : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.divImage\n  }, __jsx(LazyLoadImage, {\n    effect: \"blur\",\n    className: isMobileApp ? classes.mediaM : classes.mediaD,\n    src: data.item.image,\n    alt: data.item.info\n  }), __jsx(Star, {\n    className: classes.buttonToggle,\n    onClick: async () => {\n      let index;\n\n      if (profile.role === 'client') {\n        await favoriteItem([data.item._id]);\n        index = favorite.indexOf(profile._id);\n\n        if (index === -1) {\n          favorite.push(profile._id);\n          setFavorite([...favorite]);\n        }\n      } else if (!authenticated) {\n        let favorites = JSON.parse(localStorage.favorites);\n        index = -1;\n\n        for (let i = 0; i < favorites.length; i++) {\n          if (favorites[i]._id == data.item._id) index = i;\n        }\n\n        if (index === -1) {\n          favorites.push(data.item);\n          setFavorite(true);\n          localStorage.favorites = _JSON$stringify(favorites);\n        }\n      }\n\n      if (index !== -1) {\n        const action = async () => {\n          if (profile.role === 'client') {\n            favorite.splice(index, 1);\n            setFavorite([...favorite]);\n          } else if (!authenticated) {\n            let favorites = JSON.parse(localStorage.favorites);\n            favorites.splice(index, 1);\n            setFavorite(false);\n            localStorage.favorites = _JSON$stringify(favorites);\n          }\n        };\n\n        setMiniDialog('Вы уверенны?', __jsx(Confirmation, {\n          action: action\n        }));\n        showMiniDialog(true);\n      }\n    },\n    style: {\n      color: !authenticated && favorite === true || profile.role == 'client' && favorite.includes(profile._id) ? '#ffb300' : '#e1e1e1'\n    }\n  })), __jsx(\"div\", null, __jsx(\"br\", null), __jsx(\"h1\", {\n    className: classes.name\n  }, data.item.name), __jsx(\"div\", {\n    className: classes.share\n  }, data.item.organization.name), __jsx(\"div\", {\n    className: classes.row\n  }, data.item.stock === 0 || data.item.stock === undefined ? __jsx(\"div\", {\n    className: classes.price\n  }, data.item.price, \"\\xA0\\u0441\\u043E\\u043C\") : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.stockPrice\n  }, data.item.stock, \"\\xA0\\u0441\\u043E\\u043C\"), __jsx(\"div\", {\n    className: classes.crossedPrice\n  }, data.item.price, \"\\xA0\\u0441\\u043E\\u043C\"))), __jsx(\"br\", null), profile.role === 'client' || !authenticated ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: isMobileApp ? classes.column : classes.rowCenter\n  }, __jsx(\"div\", {\n    className: classes.counter,\n    style: isMobileApp ? {\n      marginBottom: 20\n    } : {\n      marginRight: 20\n    }\n  }, __jsx(\"div\", {\n    className: classes.counterbtn,\n    onClick: decrement\n  }, \"\\u2013\"), __jsx(\"input\", {\n    type: \"text\",\n    className: classes.counternmbr,\n    value: count,\n    onChange: event => {\n      setCount(isNaN(event.target.value) || event.target.value.length === 0 ? 0 : _parseInt(event.target.value));\n    }\n  }), __jsx(\"div\", {\n    className: classes.counterbtn,\n    onClick: increment\n  }, \"+\")), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: () => {\n      if (profile.role === 'client') addBasket({\n        item: data.item._id,\n        count: count > 0 ? count : 1\n      });else if (!authenticated) {\n        let basket = JSON.parse(localStorage.basket);\n        let index = -1;\n\n        for (let i = 0; i < basket.length; i++) {\n          if (basket[i].item._id == data.item._id) index = i;\n        }\n\n        if (index === -1) basket.push({\n          item: data.item,\n          count: count\n        });\n        localStorage.basket = _JSON$stringify(basket);\n      }\n      showSnackBar('Товар добавлен в корзину');\n    }\n  }, \"\\u0412 \\u041A\\u041E\\u0420\\u0417\\u0418\\u041D\\u0423\")), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"div\", {\n    className: classes.share\n  }, \"\\u041F\\u043E\\u0434\\u0435\\u043B\\u0438\\u0442\\u044C\\u0441\\u044F:\"), __jsx(\"div\", {\n    className: classes.rowCenter\n  }, __jsx(FacebookShareButton, {\n    url: process.browser ? window.location.href.toString() : ''\n  }, __jsx(FacebookIcon, {\n    size: 32,\n    round: true\n  })), \"\\xA0 \\xA0\", __jsx(VKShareButton, {\n    url: process.browser ? window.location.href : ''\n  }, __jsx(VKIcon, {\n    size: 32,\n    round: true\n  })), \"\\xA0 \\xA0\", __jsx(OKShareButton, {\n    url: process.browser ? window.location.href : ''\n  }, __jsx(OKIcon, {\n    size: 32,\n    round: true\n  })), \"\\xA0 \\xA0\", __jsx(WhatsappShareButton, {\n    url: process.browser ? window.location.href : ''\n  }, __jsx(WhatsappIcon, {\n    size: 32,\n    round: true\n  })), \"\\xA0 \\xA0\", __jsx(TelegramShareButton, {\n    url: process.browser ? window.location.href : ''\n  }, __jsx(TelegramIcon, {\n    size: 32,\n    round: true\n  })))) : null)))), __jsx(\"input\", {\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    id: \"contained-button-file\",\n    type: \"file\",\n    onChange: handleChangeImage\n  }));\n});\n\nItem.getInitialProps = async function (ctx) {\n  return {\n    data: _objectSpread({}, ctx.query.id !== 'new' ? await getItem({\n      _id: ctx.query.id\n    }) : {\n      item: {\n        image: '/static/add.png',\n        stock: 0,\n        name: '',\n        info: '',\n        price: 0,\n        subCategory: {\n          _id: ''\n        },\n        organization: {\n          _id: ''\n        },\n        hit: false,\n        latest: false\n      }\n    }, (await getOrganizations({\n      search: '',\n      sort: 'name',\n      filter: ''\n    })), (await getSubCategorys({\n      category: 'all',\n      search: '',\n      sort: 'name',\n      filter: ''\n    })))\n  };\n};\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    snackbarActions: bindActionCreators(snackbarActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","map":null,"metadata":{},"sourceType":"module"}