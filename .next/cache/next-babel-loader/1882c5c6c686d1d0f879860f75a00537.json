{"ast":null,"code":"import { AUTHENTICATED, UNAUTHENTICATED, SET_PROFILE, SET_AUTH, ERROR_AUTHENTICATED } from '../constants/user';\nimport { SHOW_MINI_DIALOG } from '../constants/mini_dialog';\nimport Cookies from 'js-cookie';\nimport { gql } from 'apollo-boost';\nimport { SingletonApolloClient } from '../../src/singleton/client';\nimport Router from 'next/router';\nexport function signup(payload) {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.mutate({\n        variables: payload,\n        mutation: gql`\n                    mutation ($phone: String!, $password: String!) {\n                        signupuser(phone: $phone, password: $password) {\n                            data,\n                        }\n                    }`\n      });\n      if (result.data.signupuser.data === 'Проверьте данные') await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });else {\n        await dispatch({\n          type: AUTHENTICATED\n        });\n        await dispatch({\n          type: SHOW_MINI_DIALOG,\n          payload: false\n        });\n        window.location.reload();\n      }\n    } catch (error) {\n      dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });\n    }\n  };\n}\nexport function signin(payload) {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.mutate({\n        variables: payload,\n        mutation: gql`\n                    mutation ($phone: String!, $password: String!) {\n                        signinuser(phone: $phone, password: $password) {\n                            data,\n                        }\n                    }`\n      });\n      if (result.data.signinuser.data === 'Проверьте данные') await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });else {\n        await dispatch({\n          type: AUTHENTICATED\n        });\n        await dispatch({\n          type: SHOW_MINI_DIALOG,\n          payload: false\n        }); //window.location.reload()\n      }\n    } catch (error) {\n      console.log(error);\n      await dispatch({\n        type: ERROR_AUTHENTICATED,\n        payload: true\n      });\n    }\n  };\n}\nexport function checkAuthenticated() {\n  return async dispatch => {\n    try {\n      if (Cookies.get('jwt')) {\n        dispatch({\n          type: AUTHENTICATED\n        });\n      } else {\n        dispatch({\n          type: UNAUTHENTICATED\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: UNAUTHENTICATED\n      });\n    }\n  };\n}\nexport function setAuthenticated(auth) {\n  return {\n    type: SET_AUTH,\n    payload: auth\n  };\n}\nexport function logout() {\n  return async dispatch => {\n    Cookies.remove('jwt');\n    dispatch({\n      type: UNAUTHENTICATED\n    });\n    Router.push('/'); //setTimeout(()=>{window.location.reload()},1000)\n  };\n}\nexport function setProfile() {\n  return async dispatch => {\n    try {\n      const client = new SingletonApolloClient().getClient();\n      let result = await client.query({\n        query: gql`\n                    query {\n                        getStatus {\n                           role\n                           status\n                           phone\n                           organization\n                           _id\n                          }\n                    }`\n      });\n      await dispatch({\n        type: SET_PROFILE,\n        payload: result.data.getStatus\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}","map":{"version":3,"sources":["C:\\projects\\azyk\\azyk-admin\\redux\\actions\\user.js"],"names":["AUTHENTICATED","UNAUTHENTICATED","SET_PROFILE","SET_AUTH","ERROR_AUTHENTICATED","SHOW_MINI_DIALOG","Cookies","gql","SingletonApolloClient","Router","signup","payload","dispatch","client","getClient","result","mutate","variables","mutation","data","signupuser","type","window","location","reload","error","signin","signinuser","console","log","checkAuthenticated","get","setAuthenticated","auth","logout","remove","push","setProfile","query","getStatus"],"mappings":"AAAA,SACIA,aADJ,EAEIC,eAFJ,EAGIC,WAHJ,EAIIC,QAJJ,EAKIC,mBALJ,QAMO,mBANP;AAOA,SACIC,gBADJ,QAEO,0BAFP;AAGA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,qBAAT,QAAsC,4BAAtC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAO,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AAC5B,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,MAAM,GAAG,IAAIL,qBAAJ,GAA4BM,SAA5B,EAAf;AACA,UAAIC,MAAM,GAAG,MAAMF,MAAM,CAACG,MAAP,CAAc;AAC7BC,QAAAA,SAAS,EAAEN,OADkB;AAE7BO,QAAAA,QAAQ,EAAGX,GAAI;;;;;;AAFc,OAAd,CAAnB;AAQA,UAAGQ,MAAM,CAACI,IAAP,CAAYC,UAAZ,CAAuBD,IAAvB,KAA8B,kBAAjC,EACI,MAAMP,QAAQ,CAAC;AACXS,QAAAA,IAAI,EAAEjB,mBADK;AAEXO,QAAAA,OAAO,EAAE;AAFE,OAAD,CAAd,CADJ,KAKK;AACD,cAAMC,QAAQ,CAAC;AAACS,UAAAA,IAAI,EAAErB;AAAP,SAAD,CAAd;AACA,cAAMY,QAAQ,CAAC;AACXS,UAAAA,IAAI,EAAEhB,gBADK;AAEXM,UAAAA,OAAO,EAAE;AAFE,SAAD,CAAd;AAIAW,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;AACJ,KAvBD,CAuBE,OAAMC,KAAN,EAAa;AACXb,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEjB,mBADD;AAELO,QAAAA,OAAO,EAAE;AAFJ,OAAD,CAAR;AAIH;AACJ,GA9BD;AA+BH;AAED,OAAO,SAASe,MAAT,CAAgBf,OAAhB,EAAyB;AAC5B,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,MAAM,GAAG,IAAIL,qBAAJ,GAA4BM,SAA5B,EAAf;AACA,UAAIC,MAAM,GAAG,MAAMF,MAAM,CAACG,MAAP,CAAc;AAC7BC,QAAAA,SAAS,EAAEN,OADkB;AAE7BO,QAAAA,QAAQ,EAAGX,GAAI;;;;;;AAFc,OAAd,CAAnB;AAQA,UAAGQ,MAAM,CAACI,IAAP,CAAYQ,UAAZ,CAAuBR,IAAvB,KAA8B,kBAAjC,EACI,MAAMP,QAAQ,CAAC;AACXS,QAAAA,IAAI,EAAEjB,mBADK;AAEXO,QAAAA,OAAO,EAAE;AAFE,OAAD,CAAd,CADJ,KAKK;AACD,cAAMC,QAAQ,CAAC;AAACS,UAAAA,IAAI,EAAErB;AAAP,SAAD,CAAd;AACA,cAAMY,QAAQ,CAAC;AACXS,UAAAA,IAAI,EAAEhB,gBADK;AAEXM,UAAAA,OAAO,EAAE;AAFE,SAAD,CAAd,CAFC,CAMD;AACH;AACJ,KAvBD,CAuBE,OAAMc,KAAN,EAAa;AACXG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,YAAMb,QAAQ,CAAC;AACXS,QAAAA,IAAI,EAAEjB,mBADK;AAEXO,QAAAA,OAAO,EAAE;AAFE,OAAD,CAAd;AAIH;AACJ,GA/BD;AAgCH;AAED,OAAO,SAASmB,kBAAT,GAA8B;AACjC,SAAO,MAAOlB,QAAP,IAAoB;AACvB,QAAI;AACA,UAAIN,OAAO,CAACyB,GAAR,CAAY,KAAZ,CAAJ,EAAwB;AACpBnB,QAAAA,QAAQ,CAAE;AAACS,UAAAA,IAAI,EAAErB;AAAP,SAAF,CAAR;AACH,OAFD,MAEO;AACHY,QAAAA,QAAQ,CAAE;AAACS,UAAAA,IAAI,EAAEpB;AAAP,SAAF,CAAR;AACH;AACJ,KAND,CAME,OAAOwB,KAAP,EAAc;AACZb,MAAAA,QAAQ,CAAE;AAACS,QAAAA,IAAI,EAAEpB;AAAP,OAAF,CAAR;AACH;AACJ,GAVD;AAWH;AAED,OAAO,SAAS+B,gBAAT,CAA0BC,IAA1B,EAAgC;AACnC,SAAO;AACHZ,IAAAA,IAAI,EAAElB,QADH;AAEHQ,IAAAA,OAAO,EAAEsB;AAFN,GAAP;AAIH;AAED,OAAO,SAASC,MAAT,GAAkB;AACrB,SAAO,MAAOtB,QAAP,IAAoB;AACvBN,IAAAA,OAAO,CAAC6B,MAAR,CAAe,KAAf;AACAvB,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAEpB;AADD,KAAD,CAAR;AAGAQ,IAAAA,MAAM,CAAC2B,IAAP,CAAY,GAAZ,EALuB,CAMvB;AAGH,GATD;AAUH;AAED,OAAO,SAASC,UAAT,GAAsB;AACzB,SAAO,MAAOzB,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,MAAM,GAAG,IAAIL,qBAAJ,GAA4BM,SAA5B,EAAf;AACA,UAAIC,MAAM,GAAG,MAAMF,MAAM,CACpByB,KADc,CACR;AACHA,QAAAA,KAAK,EAAE/B,GAAI;;;;;;;;;;AADR,OADQ,CAAnB;AAaA,YAAMK,QAAQ,CAAC;AACXS,QAAAA,IAAI,EAAEnB,WADK;AAEXS,QAAAA,OAAO,EAAEI,MAAM,CAACI,IAAP,CAAYoB;AAFV,OAAD,CAAd;AAIH,KAnBD,CAmBE,OAAMd,KAAN,EAAa;AACXG,MAAAA,OAAO,CAACH,KAAR,CAAcA,KAAd;AACH;AACJ,GAvBD;AAwBH","sourcesContent":["import {\r\n    AUTHENTICATED,\r\n    UNAUTHENTICATED,\r\n    SET_PROFILE,\r\n    SET_AUTH,\r\n    ERROR_AUTHENTICATED\r\n} from '../constants/user'\r\nimport {\r\n    SHOW_MINI_DIALOG\r\n} from '../constants/mini_dialog'\r\nimport Cookies from 'js-cookie';\r\nimport { gql } from 'apollo-boost';\r\nimport { SingletonApolloClient } from '../../src/singleton/client';\r\nimport Router from 'next/router'\r\n\r\nexport function signup(payload) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient()\r\n            let result = await client.mutate({\r\n                variables: payload,\r\n                mutation : gql`\r\n                    mutation ($phone: String!, $password: String!) {\r\n                        signupuser(phone: $phone, password: $password) {\r\n                            data,\r\n                        }\r\n                    }`})\r\n            if(result.data.signupuser.data==='Проверьте данные')\r\n                await dispatch({\r\n                    type: ERROR_AUTHENTICATED,\r\n                    payload: true\r\n                })\r\n            else {\r\n                await dispatch({type: AUTHENTICATED});\r\n                await dispatch({\r\n                    type: SHOW_MINI_DIALOG,\r\n                    payload: false\r\n                })\r\n                window.location.reload()\r\n            }\r\n        } catch(error) {\r\n            dispatch({\r\n                type: ERROR_AUTHENTICATED,\r\n                payload: true\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function signin(payload) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient();\r\n            let result = await client.mutate({\r\n                variables: payload,\r\n                mutation : gql`\r\n                    mutation ($phone: String!, $password: String!) {\r\n                        signinuser(phone: $phone, password: $password) {\r\n                            data,\r\n                        }\r\n                    }`})\r\n            if(result.data.signinuser.data==='Проверьте данные')\r\n                await dispatch({\r\n                    type: ERROR_AUTHENTICATED,\r\n                    payload: true\r\n                })\r\n            else {\r\n                await dispatch({type: AUTHENTICATED});\r\n                await dispatch({\r\n                    type: SHOW_MINI_DIALOG,\r\n                    payload: false\r\n                })\r\n                //window.location.reload()\r\n            }\r\n        } catch(error) {\r\n            console.log(error)\r\n            await dispatch({\r\n                type: ERROR_AUTHENTICATED,\r\n                payload: true\r\n            })\r\n        }\r\n    };\r\n}\r\n\r\nexport function checkAuthenticated() {\r\n    return async (dispatch) => {\r\n        try {\r\n            if (Cookies.get('jwt')) {\r\n                dispatch ({type: AUTHENTICATED});\r\n            } else {\r\n                dispatch ({type: UNAUTHENTICATED});\r\n            }\r\n        } catch (error) {\r\n            dispatch ({type: UNAUTHENTICATED});\r\n        }\r\n    };\r\n}\r\n\r\nexport function setAuthenticated(auth) {\r\n    return {\r\n        type: SET_AUTH,\r\n        payload: auth\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    return async (dispatch) => {\r\n        Cookies.remove('jwt');\r\n        dispatch({\r\n            type: UNAUTHENTICATED,\r\n        })\r\n        Router.push('/')\r\n        //setTimeout(()=>{window.location.reload()},1000)\r\n\r\n\r\n    }\r\n}\r\n\r\nexport function setProfile() {\r\n    return async (dispatch) => {\r\n        try {\r\n            const client = new SingletonApolloClient().getClient()\r\n            let result = await client\r\n                .query({\r\n                    query: gql`\r\n                    query {\r\n                        getStatus {\r\n                           role\r\n                           status\r\n                           phone\r\n                           organization\r\n                           _id\r\n                          }\r\n                    }`\r\n                })\r\n            await dispatch({\r\n                type: SET_PROFILE,\r\n                payload: result.data.getStatus\r\n            })\r\n        } catch(error) {\r\n            console.error(error)\r\n        }\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}