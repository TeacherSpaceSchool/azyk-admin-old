{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as mini_dialogActions from '../../redux/actions/mini_dialog';\nimport * as userActions from '../../redux/actions/user';\nimport { validPhone } from '../../redux/constants/other';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport classNames from 'classnames';\nimport IconButton from '@material-ui/core/IconButton';\nimport dialogContentStyle from '../../src/styleMUI/dialogContent';\nvar Sign = React.memo(function (props) {\n  var _useState = useState(''),\n      loginEnter = _useState[0],\n      setLoginEnter = _useState[1];\n\n  var _useState2 = useState(''),\n      passEnter = _useState2[0],\n      setPassEnter = _useState2[1];\n\n  var _useState3 = useState(false),\n      errorPhone = _useState3[0],\n      setErrorPhone = _useState3[1];\n\n  var _useState4 = useState(false),\n      errorPass = _useState4[0],\n      setErrorPass = _useState4[1];\n\n  var _useState5 = useState(false),\n      errorPassRepeat = _useState5[0],\n      setErrorPassRepeat = _useState5[1];\n\n  var handlePassEnter = function handlePassEnter(event) {\n    setPassEnter(event.target.value);\n  };\n\n  var handleLoginEnter = function handleLoginEnter(event) {\n    setLoginEnter(event.target.value);\n  };\n\n  var _useState6 = useState(''),\n      loginReg = _useState6[0],\n      setLoginReg = _useState6[1];\n\n  var _useState7 = useState(''),\n      passReg = _useState7[0],\n      setPassReg = _useState7[1];\n\n  var _useState8 = useState(''),\n      passRepeatReg = _useState8[0],\n      setPassRepeatReg = _useState8[1];\n\n  var handlePassReg = function handlePassReg(event) {\n    setPassReg(event.target.value);\n\n    if (event.target.value !== passRepeatReg) {\n      setErrorPassRepeat(true);\n    } else {\n      setErrorPassRepeat(false);\n    }\n\n    if (event.target.value.length < 8) {\n      setErrorPass(true);\n    } else {\n      setErrorPass(false);\n    }\n  };\n\n  var handlePassRepeatReg = function handlePassRepeatReg(event) {\n    setPassRepeatReg(event.target.value);\n\n    if (event.target.value !== passReg) {\n      setErrorPassRepeat(true);\n    } else {\n      setErrorPassRepeat(false);\n    }\n  };\n\n  var handleLoginReg = function handleLoginReg(event) {\n    setLoginReg(event.target.value);\n\n    if (!validPhone(event.target.value)) {\n      setErrorPhone(true);\n    } else {\n      setErrorPhone(false);\n    }\n  };\n\n  var _useState9 = useState('enter'),\n      type = _useState9[0],\n      setType = _useState9[1];\n\n  var _useState10 = useState('password'),\n      hide = _useState10[0],\n      setHide = _useState10[1];\n\n  var handleHide = function handleHide() {\n    setHide(!hide);\n  };\n\n  var error = props.user.error;\n  var isMobileApp = props.app.isMobileApp;\n  var showMiniDialog = props.mini_dialogActions.showMiniDialog;\n  var _props$userActions = props.userActions,\n      signin = _props$userActions.signin,\n      signup = _props$userActions.signup;\n  var classes = props.classes;\n  var width = isMobileApp ? window.innerWidth - 126 : 500;\n  return __jsx(\"div\", {\n    className: classes.main\n  }, type === 'enter' ? __jsx(React.Fragment, null, __jsx(TextField, {\n    style: {\n      width: width\n    },\n    id: \"standard-search\",\n    label: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\",\n    type: \"login\",\n    className: classes.textField,\n    margin: \"normal\",\n    value: loginEnter,\n    onChange: handleLoginEnter\n  }), __jsx(\"br\", null), __jsx(FormControl, {\n    style: {\n      width: width\n    },\n    className: classNames(classes.margin, classes.textField)\n  }, __jsx(InputLabel, {\n    htmlFor: \"adornment-password\"\n  }, \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\"), __jsx(Input, {\n    id: \"adornment-password\",\n    type: hide ? 'password' : 'text',\n    value: passEnter,\n    onChange: handlePassEnter,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"Toggle password visibility\",\n      onClick: handleHide\n    }, hide ? __jsx(VisibilityOff, null) : __jsx(Visibility, null)))\n  })), __jsx(\"br\", null), error ? __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.error_message\n  }, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u044B\\u0439 \\u043B\\u043E\\u0433\\u0438\\u043D \\u0438\\u043B\\u0438 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\") : null, __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.message,\n    onClick: function onClick() {\n      setType('reg');\n    }\n  }, \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0435\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\"), __jsx(\"div\", {\n    style: {\n      width: width\n    }\n  }, \"\\u0415\\u0441\\u043B\\u0438 \\u0437\\u0430\\u0431\\u044B\\u043B\\u0438 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C \\u0442\\u043E \\u0441\\u0432\\u044F\\u0436\\u0438\\u0442\\u0435\\u0441\\u044C \\u0441 \\u043D\\u0430\\u0448\\u0438\\u043C\\u0438 \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u0438\\u0441\\u0442\\u0430\\u043C\\u0438.\")), __jsx(\"br\", null), __jsx(\"div\", null, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: function onClick() {\n      if (loginEnter.length > 0 && passEnter.length > 0) signin({\n        phone: loginEnter,\n        password: passEnter\n      });\n    },\n    className: classes.button\n  }, \"\\u0412\\u043E\\u0439\\u0442\\u0438\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: function onClick() {\n      showMiniDialog(false);\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"))) : __jsx(React.Fragment, null, __jsx(TextField, {\n    id: \"standard-search\",\n    label: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\",\n    type: \"login\",\n    className: classes.textField,\n    margin: \"normal\",\n    value: loginReg,\n    onChange: handleLoginReg,\n    style: {\n      width: width\n    }\n  }), __jsx(\"br\", null), __jsx(FormControl, {\n    style: {\n      width: width\n    },\n    className: classNames(classes.margin, classes.textField)\n  }, __jsx(InputLabel, {\n    htmlFor: \"adornment-password\"\n  }, \"\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\"), __jsx(Input, {\n    id: \"adornment-password\",\n    type: hide ? 'password' : 'text',\n    value: passReg,\n    onChange: handlePassReg,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"Toggle password visibility\",\n      onClick: handleHide\n    }, hide ? __jsx(VisibilityOff, null) : __jsx(Visibility, null)))\n  })), __jsx(\"br\", null), __jsx(FormControl, {\n    style: {\n      width: width\n    },\n    className: classNames(classes.margin, classes.textField)\n  }, __jsx(InputLabel, {\n    htmlFor: \"adornment-password\"\n  }, \"\\u041F\\u043E\\u0432\\u0442\\u043E\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\"), __jsx(Input, {\n    id: \"adornment-password\",\n    type: hide ? 'password' : 'text',\n    value: passRepeatReg,\n    onChange: handlePassRepeatReg,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"Toggle password visibility\",\n      onClick: handleHide\n    }, hide ? __jsx(VisibilityOff, null) : __jsx(Visibility, null)))\n  })), __jsx(\"br\", null), error ? __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.error_message\n  }, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u044B\\u0439 \\u043B\\u043E\\u0433\\u0438\\u043D \\u0438\\u043B\\u0438 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\") : null, errorPhone ? __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.error_message\n  }, \"\\u041F\\u0440\\u043E\\u0432\\u0435\\u0440\\u044C\\u0442\\u0435 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D. \\u041F\\u0440\\u0438\\u043C\\u0435\\u0440: +996555780861.\") : null, errorPass ? __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.error_message\n  }, \"\\u041D\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0442\\u043E\\u0447\\u043D\\u0430\\u044F \\u0434\\u043B\\u0438\\u043D\\u0430 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044F\") : null, errorPassRepeat ? __jsx(\"div\", {\n    style: {\n      width: width\n    },\n    className: classes.error_message\n  }, \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u0438 \\u043D\\u0435 \\u0441\\u043E\\u0432\\u043F\\u0430\\u0434\\u0430\\u044E\\u0442\") : null, __jsx(\"br\", null), __jsx(\"div\", null, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: function onClick() {\n      if (!errorPass && !errorPassRepeat && !errorPhone) signup({\n        phone: loginReg,\n        password: passReg\n      });\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0435\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: function onClick() {\n      showMiniDialog(false);\n    },\n    className: classes.button\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"))));\n});\n\nfunction mapStateToProps(state) {\n  return {\n    mini_dialog: state.mini_dialog,\n    user: state.user,\n    app: state.app\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mini_dialogActions: bindActionCreators(mini_dialogActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(dialogContentStyle)(Sign));","map":null,"metadata":{},"sourceType":"module"}